# Production Docker Compose configuration with zero-downtime deployment support
version: '3.8'

services:
  # Load Balancer (HAProxy)
  loadbalancer:
    image: haproxy:2.8-alpine
    container_name: football-loadbalancer
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
      - "${HAPROXY_STATS_PORT:-8404}:8404"
    volumes:
      - ./docker/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./docker/ssl:/etc/ssl/certs:ro
    networks:
      - football-network
    depends_on:
      - app-1
      - app-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database with replication
  postgres-primary:
    image: postgres:15-alpine
    container_name: football-postgres-primary
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-football_automation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-replicator123}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./docker/postgres/primary:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.primary.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_PRIMARY_PORT:-5432}:5432"
    networks:
      - football-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c wal_level=replica
      -c max_wal_senders=3
      -c max_replication_slots=3
      -c hot_standby=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-football_automation}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-replica:
    image: postgres:15-alpine
    container_name: football-postgres-replica
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-football_automation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-replicator123}
      POSTGRES_PRIMARY_HOST: postgres-primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./docker/postgres/replica:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.replica.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_REPLICA_PORT:-5433}:5432"
    networks:
      - football-network
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hot_standby=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-football_automation}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cluster
  redis-master:
    image: redis:7-alpine
    container_name: football-redis-master
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis123}
      --masterauth ${REDIS_PASSWORD:-redis123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_master_data:/data
      - ./docker/redis/redis.master.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_MASTER_PORT:-6379}:6379"
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  redis-replica:
    image: redis:7-alpine
    container_name: football-redis-replica
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis123}
      --masterauth ${REDIS_PASSWORD:-redis123}
      --replicaof redis-master 6379
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_replica_data:/data
      - ./docker/redis/redis.replica.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_REPLICA_PORT:-6380}:6379"
    networks:
      - football-network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Application instances for zero-downtime deployment
  app-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: football-app-1
    environment:
      # Database configuration (primary for writes)
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-primary:5432/${POSTGRES_DB:-football_automation}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-replica:5432/${POSTGRES_DB:-football_automation}
      DATABASE_HOST: postgres-primary
      DATABASE_PORT: 5432
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/0
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Application configuration
      INSTANCE_ID: app-1
      API_WORKERS: ${API_WORKERS:-2}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      
      # Scaling configuration
      ENABLE_AUTO_SCALING: ${ENABLE_AUTO_SCALING:-true}
      MIN_WORKERS: ${MIN_WORKERS:-2}
      MAX_WORKERS: ${MAX_WORKERS:-10}
      
      # Graceful shutdown configuration
      GRACEFUL_SHUTDOWN_TIMEOUT: ${GRACEFUL_SHUTDOWN_TIMEOUT:-60}
      JOB_COMPLETION_TIMEOUT: ${JOB_COMPLETION_TIMEOUT:-300}
      
      # Health check configuration
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-30}
      
      # Backup configuration
      ENABLE_SCHEDULED_BACKUPS: ${ENABLE_SCHEDULED_BACKUPS:-true}
      BACKUP_INTERVAL_HOURS: ${BACKUP_INTERVAL_HOURS:-24}
    volumes:
      - ./source:/app/source
      - ./jsons:/app/jsons
      - ./logs:/app/logs
      - ./config:/app/config
      - app_1_data:/app/data
      - app_1_temp:/app/temp
      - shared_backups:/app/backups
    networks:
      - football-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["api"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  app-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: football-app-2
    environment:
      # Database configuration (primary for writes)
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-primary:5432/${POSTGRES_DB:-football_automation}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-replica:5432/${POSTGRES_DB:-football_automation}
      DATABASE_HOST: postgres-primary
      DATABASE_PORT: 5432
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/0
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Application configuration
      INSTANCE_ID: app-2
      API_WORKERS: ${API_WORKERS:-2}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      
      # Scaling configuration
      ENABLE_AUTO_SCALING: ${ENABLE_AUTO_SCALING:-true}
      MIN_WORKERS: ${MIN_WORKERS:-2}
      MAX_WORKERS: ${MAX_WORKERS:-10}
      
      # Graceful shutdown configuration
      GRACEFUL_SHUTDOWN_TIMEOUT: ${GRACEFUL_SHUTDOWN_TIMEOUT:-60}
      JOB_COMPLETION_TIMEOUT: ${JOB_COMPLETION_TIMEOUT:-300}
      
      # Health check configuration
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-30}
      
      # Backup configuration
      ENABLE_SCHEDULED_BACKUPS: ${ENABLE_SCHEDULED_BACKUPS:-false}  # Only one instance does backups
    volumes:
      - ./source:/app/source
      - ./jsons:/app/jsons
      - ./logs:/app/logs
      - ./config:/app/config
      - app_2_data:/app/data
      - app_2_temp:/app/temp
      - shared_backups:/app/backups
    networks:
      - football-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["api"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Automation Manager (single instance with leader election)
  automation:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: football-automation
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-primary:5432/${POSTGRES_DB:-football_automation}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-replica:5432/${POSTGRES_DB:-football_automation}
      DATABASE_HOST: postgres-primary
      DATABASE_PORT: 5432
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/0
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Application configuration
      INSTANCE_ID: automation-manager
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Web downloader configuration
      SOURCE_URL: ${SOURCE_URL:-https://example.com/football-data}
      DOWNLOAD_INTERVAL: ${DOWNLOAD_INTERVAL:-3600}
      
      # Processing configuration
      MAX_CONCURRENT_JOBS: ${MAX_CONCURRENT_JOBS:-4}
      PROCESSING_TIMEOUT: ${PROCESSING_TIMEOUT:-300}
      
      # Leader election
      ENABLE_LEADER_ELECTION: ${ENABLE_LEADER_ELECTION:-true}
      LEADER_ELECTION_KEY: automation_manager_leader
      LEADER_ELECTION_TTL: ${LEADER_ELECTION_TTL:-30}
    volumes:
      - ./source:/app/source
      - ./jsons:/app/jsons
      - ./logs:/app/logs
      - ./config:/app/config
      - automation_data:/app/data
      - automation_temp:/app/temp
      - shared_backups:/app/backups
    networks:
      - football-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    restart: unless-stopped
    command: ["automation"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.125'

  # Processing Workers (scalable)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-primary:5432/${POSTGRES_DB:-football_automation}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-replica:5432/${POSTGRES_DB:-football_automation}
      DATABASE_HOST: postgres-primary
      DATABASE_PORT: 5432
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis-master:6379/0
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Application configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Processing configuration
      MAX_CONCURRENT_JOBS: ${WORKER_MAX_CONCURRENT_JOBS:-2}
      PROCESSING_TIMEOUT: ${PROCESSING_TIMEOUT:-300}
      
      # Worker configuration
      WORKER_HEARTBEAT_INTERVAL: ${WORKER_HEARTBEAT_INTERVAL:-30}
      WORKER_CAPABILITIES: ${WORKER_CAPABILITIES:-pdf_processing,data_conversion}
    volumes:
      - ./source:/app/source:ro
      - ./jsons:/app/jsons
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - worker_data:/app/data
      - worker_temp:/app/temp
    networks:
      - football-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    restart: unless-stopped
    command: ["worker"]
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: football-prometheus
    volumes:
      - ./docker/prometheus/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - football-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: football-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-your-secret-key}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/plugins:/var/lib/grafana/plugins
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - football-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: football-loki
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    networks:
      - football-network
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: football-promtail
    volumes:
      - ./docker/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - football-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_master_data:
    driver: local
  redis_replica_data:
    driver: local
  app_1_data:
    driver: local
  app_2_data:
    driver: local
  automation_data:
    driver: local
  worker_data:
    driver: local
  app_1_temp:
    driver: local
  app_2_temp:
    driver: local
  automation_temp:
    driver: local
  worker_temp:
    driver: local
  shared_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  football-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: football-br0