# HAProxy configuration for zero-downtime deployment
global
    daemon
    log stdout local0 info
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics page
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-node

# Main frontend for HTTP traffic
frontend http_frontend
    bind *:80
    
    # Redirect HTTP to HTTPS (uncomment if using SSL)
    # redirect scheme https if !{ ssl_fc }
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Health check endpoint
    acl is_health_check path_beg /health
    use_backend health_check if is_health_check
    
    # API endpoints
    acl is_api path_beg /api
    use_backend api_servers if is_api
    
    # WebSocket endpoints
    acl is_websocket hdr(Upgrade) -i websocket
    use_backend api_servers if is_websocket
    
    # Default backend
    default_backend api_servers

# HTTPS frontend (uncomment if using SSL)
# frontend https_frontend
#     bind *:443 ssl crt /etc/ssl/certs/
#     
#     # Security headers
#     http-response set-header X-Frame-Options DENY
#     http-response set-header X-Content-Type-Options nosniff
#     http-response set-header X-XSS-Protection "1; mode=block"
#     http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
#     
#     # Health check endpoint
#     acl is_health_check path_beg /health
#     use_backend health_check if is_health_check
#     
#     # API endpoints
#     acl is_api path_beg /api
#     use_backend api_servers if is_api
#     
#     # WebSocket endpoints
#     acl is_websocket hdr(Upgrade) -i websocket
#     use_backend api_servers if is_websocket
#     
#     # Default backend
#     default_backend api_servers

# Backend for API servers with zero-downtime deployment support
backend api_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Server configuration for zero-downtime deployment
    # During deployment, servers are taken out of rotation gracefully
    server app-1 app-1:8000 check inter 10s fall 3 rise 2 weight 100
    server app-2 app-2:8000 check inter 10s fall 3 rise 2 weight 100
    
    # Backup server (optional)
    # server app-backup app-backup:8000 check inter 30s fall 5 rise 3 backup

# Health check backend
backend health_check
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server app-1 app-1:8000 check inter 5s fall 2 rise 1
    server app-2 app-2:8000 check inter 5s fall 2 rise 1

# Backend for database read operations (optional)
backend database_read
    balance leastconn
    option tcp-check
    
    server postgres-primary postgres-primary:5432 check inter 10s fall 3 rise 2 weight 100
    server postgres-replica postgres-replica:5432 check inter 10s fall 3 rise 2 weight 50

# Listen section for TCP load balancing (if needed)
# listen postgres_cluster
#     bind *:5432
#     mode tcp
#     balance leastconn
#     option tcp-check
#     
#     server postgres-primary postgres-primary:5432 check inter 10s fall 3 rise 2
#     server postgres-replica postgres-replica:5432 check inter 10s fall 3 rise 2 backup

# Redis cluster load balancing (if needed)
# listen redis_cluster
#     bind *:6379
#     mode tcp
#     balance first
#     option tcp-check
#     
#     server redis-master redis-master:6379 check inter 10s fall 3 rise 2
#     server redis-replica redis-replica:6379 check inter 10s fall 3 rise 2 backup