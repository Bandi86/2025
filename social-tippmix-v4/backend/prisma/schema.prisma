generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @unique @default(uuid())
  email                    String                    @unique
  username                 String?                   @unique
  password                 String
  emailVerified            DateTime?
  avatar                   String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  role                     String                    @default("USER")
  isOnline                 Boolean                   @default(false)
  lastLogin                DateTime?
  status                   String                    @default("ACTIVE")
  profileImage             String?
  bio                      String?
  website                  String?
  location                 String?
  birthDate                DateTime?
  comments                 Comment[]
  conversationParticipants ConversationParticipant[] @relation("UserParticipants")
  likes                    Like[]
  sentMessages             Message[]                 @relation("SentMessages")
  notifications            Notification[]
  posts                    Post[]
  followers                User[]                    @relation("FollowNetwork")
  following                User[]                    @relation("FollowNetwork")
}

model Post {
  id        String       @id @default(cuid())
  title     String
  content   String
  slug      String       @unique
  category  PostCategory
  imageUrl  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  authorId  String
  comments  Comment[]
  likes     Like[]       @relation("SinglePostLike")
  author    User         @relation(fields: [authorId], references: [id])
  tags      Tag[]        @relation("PostTags")
}

model Comment {
  id        String   @id @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]   @relation("CommentLikes")
}

model Like {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation("SinglePostLike", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @unique @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostTags")
}

model Notification {
  id        String   @id @unique @default(uuid())
  type      String
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  userId    String
  actorId   String?
  postId    String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String                    @id @unique @default(uuid())
  name          String?
  isGroupChat   Boolean                   @default(false)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime
  lastMessageAt DateTime?
  participants  ConversationParticipant[] @relation("ConversationParticipants")
  messages      Message[]
}

model ConversationParticipant {
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation("ConversationParticipants", fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation("UserParticipants", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @unique @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  senderId       String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  BANNED
  DELETED
}

enum PostCategory {
  HIR
  TIPP
  ELEMZES
  KOZLEMENY
}

model Image {
  id        String   @id @unique @default(uuid())
  url       String
  fileName  String
  fileSize  Int
  fileType  String
  width     Int
  height    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      String? // Reference to User ID
}
