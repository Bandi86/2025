import { randomUUID } from 'crypto';
import * as fs from 'fs/promises';
import * as path from 'path';
import { existsSync } from 'fs';

// Konfigur√°ci√≥s be√°ll√≠t√°sok k√ºl√∂n kezel√©se
export const MediaConfig = {
  supportedExtensions: ['.mp4', '.mkv', '.avi'],
  nfoExtension: '.nfo',
  batchSize: 10,
  cacheDuration: 1000 * 60 * 10, // 10 perc
  newDirectoryThreshold: 1000 * 60 * 60 * 24, // 24 √≥ra
};

export type MediaFile = {
  id: string;
  path: string;
  name: string;
  extension: string;
  size?: number;
  modifiedAt?: Date;
  isNewDirectory?: boolean;
  type: 'film' | 'sorozat';
  nfoContent?: string;
  linkedNfoPath?: string; // Az NFO f√°jl el√©r√©si √∫tja, ha van
  linkedMediaPath?: string; // A m√©diaf√°jl el√©r√©si √∫tja, ha ez egy NFO rekord
};

// Gyors√≠t√≥t√°r implement√°ci√≥
class FilesystemCache {
  private cache: Map<string, { data: any; timestamp: number }> = new Map();

  store(key: string, data: any): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
    });
  }

  retrieve<T>(key: string): T | null {
    const hit = this.cache.get(key);
    if (!hit) return null;

    // Ellen≈ërizz√ºk, hogy a gyors√≠t√≥t√°r √©rv√©nyes-e m√©g
    if (Date.now() - hit.timestamp > MediaConfig.cacheDuration) {
      this.cache.delete(key);
      return null;
    }

    return hit.data as T;
  }

  delete(key: string): void {
    this.cache.delete(key);
  }

  clean(): void {
    const currentTime = Date.now();
    for (const [key, value] of this.cache.entries()) {
      if (currentTime - value.timestamp > MediaConfig.cacheDuration) {
        this.cache.delete(key);
      }
    }
  }
}

const cache = new FilesystemCache();

// K√∂nyvt√°r t√≠pus√°nak okosabb meghat√°roz√°sa
async function determineDirectoryType(directoryPath: string): Promise<'film' | 'sorozat'> {
  const lower = path.basename(directoryPath).toLowerCase();

  // Alap√©rtelmezett √©rt√©k
  let type: 'film' | 'sorozat' = 'film';

  // K√∂nyvt√°rn√©v alapj√°n
  if (lower.includes('sorozat')) type = 'sorozat';
  if (lower.includes('film')) type = 'film';

  // K√∂nyvt√°rszerkezet alapj√°n tov√°bbi ellen≈ërz√©s
  try {
    // √âvad √©s epiz√≥d mint√°zat keres√©se
    if (existsSync(directoryPath)) {
      // Aszinkron m√≥don olvassuk be a k√∂nyvt√°r tartalm√°t
      const files = await fs.readdir(directoryPath);

      // √âvad-szer≈± k√∂nyvt√°rak keres√©se (S01, Season 1, stb.)
      const seasonPattern = /[Ss]\d+|[√â√©]vad\s*\d+|[Ss]eason\s*\d+/;

      // Aszinkron ellen≈ërz√©s minden f√°jlra
      const directoryChecks = await Promise.all(
        files.map(async (file) => {
          const fullPath = path.join(directoryPath, file);
          try {
            const stats = await fs.stat(fullPath);
            return {
              matchesPattern: seasonPattern.test(file),
              isDirectory: stats.isDirectory(),
            };
          } catch (error) {
            return { matchesPattern: false, isDirectory: false };
          }
        })
      );

      const hasSeasonDirectory = directoryChecks.some(
        (check) => check.matchesPattern && check.isDirectory
      );

      if (hasSeasonDirectory) type = 'sorozat';

      // Epiz√≥d mint√°zatok keres√©se a f√°jlnevekben (S01E02, E01, stb.)
      const episodePattern = /[Ss]\d+[Ee]\d+|[Ee]\d+|[Ee]piz√≥d\s*\d+/;
      const hasEpisodeFile = files.some((file) => episodePattern.test(file));

      if (hasEpisodeFile) type = 'sorozat';
    }
  } catch (error) {
    console.error(`‚ùå Hiba a k√∂nyvt√°r t√≠pus meghat√°roz√°s√°n√°l: ${directoryPath}`, error);
  }

  return type;
}

// M√©diak√∂nyvt√°rak beolvas√°sa
export async function scanMediaDirectories(
  paths: string[]
): Promise<{ files: MediaFile[]; errors: string[] }> {
  const results = await Promise.all(
    paths.map(async (directoryPath) => {
      // Gyors√≠t√≥t√°r ellen≈ërz√©se
      const cacheKey = `directory_${directoryPath}`;
      const cachedResult = cache.retrieve<{ files: MediaFile[]; error: string | null }>(cacheKey);

      if (cachedResult) {
        console.log(`üìÇ Gyors√≠t√≥t√°rb√≥l bet√∂ltve: ${directoryPath}`);
        return cachedResult;
      }

      const type = await determineDirectoryType(directoryPath);

      try {
        const filesFromDirectory = await walkDirectory(directoryPath, type);
        console.log(`‚úÖ Sikeres beolvas√°s: ${directoryPath}`);

        // M√©diaf√°jlok √©s NFO f√°jlok √∂sszekapcsol√°sa
        const linkedFiles = linkNfoAndMediaFiles(filesFromDirectory);

        // Eredm√©ny t√°rol√°sa a gyors√≠t√≥t√°rban
        cache.store(cacheKey, { files: linkedFiles, error: null });

        return { files: linkedFiles, error: null };
      } catch (error: any) {
        console.error(`‚ùå Hiba a k√∂nyvt√°r bej√°r√°sa k√∂zben: ${directoryPath}`, error);
        return {
          files: [],
          error: `Nem tal√°lhat√≥ vagy nem el√©rhet≈ë mappa: ${directoryPath}. Hiba: ${
            error.message || 'Ismeretlen hiba'
          }`,
        };
      }
    })
  );

  const allFiles = results.flatMap((r) => r.files);
  const errors = results.flatMap((r) => (r.error ? [r.error] : []));

  return { files: allFiles, errors };
}

// NFO √©s m√©diaf√°jlok √∂sszekapcsol√°sa
function linkNfoAndMediaFiles(files: MediaFile[]): MediaFile[] {
  const mediaFiles = files.filter((f) => MediaConfig.supportedExtensions.includes(f.extension));
  const nfoFiles = files.filter((f) => f.extension === MediaConfig.nfoExtension);

  // Minden NFO f√°jlhoz keress√ºk a megfelel≈ë m√©diaf√°jlt
  nfoFiles.forEach((nfoFile) => {
    const nfoBasename = path.basename(nfoFile.name, nfoFile.extension);

    // Pontosabb egyeztet√©si algoritmus
    // 1. Pontos n√©v egyez√©s
    // 2. Egyik tartalmazza a m√°sikat
    // 3. Fuzzy egyeztet√©s
    let matchedMedia = mediaFiles.find((mediaFile) => {
      const mediaBasename = path.basename(mediaFile.name, mediaFile.extension);

      // Pontosan egyezik
      if (mediaBasename === nfoBasename) return true;

      // Egyik tartalmazza a m√°sikat
      if (mediaBasename.includes(nfoBasename) || nfoBasename.includes(mediaBasename)) return true;

      // Tov√°bbi krit√©riumok mint p√©ld√°ul Levenshtein t√°vols√°g is implement√°lhat√≥k

      return false;
    });

    if (matchedMedia) {
      // Kapcsoljuk √∂ssze ≈ëket
      nfoFile.linkedMediaPath = matchedMedia.path;
      matchedMedia.linkedNfoPath = nfoFile.path;
      matchedMedia.nfoContent = nfoFile.nfoContent;

      console.log(`üîó NFO f√°jl √∂sszekapcsolva: ${nfoFile.name} -> ${matchedMedia.name}`);
    } else {
      console.warn(`‚ö†Ô∏è Nem tal√°ltam m√©diaf√°jlt az NFO-hoz: ${nfoFile.name}`);
    }
  });

  // Csak a m√©diaf√°jlokat adjuk vissza, az NFO-k inform√°ci√≥i m√°r benne vannak
  return mediaFiles;
}

// K√∂nyvt√°r bej√°r√°sa √©s f√°jlok √∂sszegy≈±jt√©se
async function walkDirectory(directory: string, type: 'film' | 'sorozat'): Promise<MediaFile[]> {
  let results: MediaFile[] = [];

  try {
    const entries = await fs.readdir(directory, { withFileTypes: true });

    // K√∂tegelt f√°jl feldolgoz√°s p√°rhuzamoss√°ggal, de limit√°lt mennyis√©ggel egyszerre
    const batchSize = MediaConfig.batchSize;

    // Az √∂sszes bejegyz√©st csoportokra bontjuk a hat√©konyabb feldolgoz√°s √©rdek√©ben
    for (let i = 0; i < entries.length; i += batchSize) {
      const batch = entries.slice(i, i + batchSize);
      const batchPromises = batch.map(async (entry) => {
        const fullPath = path.join(directory, entry.name);

        // Gyors√≠t√≥t√°r ellen≈ërz√©se az aktu√°lis f√°jlhoz/k√∂nyvt√°rhoz
        const cacheKey = `file_${fullPath}`;
        const cachedResult = cache.retrieve<MediaFile[]>(cacheKey);

        if (cachedResult) {
          return cachedResult;
        }

        try {
          if (entry.isDirectory()) {
            // Kihagyjuk a "sample" k√∂nyvt√°rakat
            if (entry.name.toLowerCase() === 'sample') {
              console.log(`‚è≠Ô∏è Sample k√∂nyvt√°r kihagyva: ${fullPath}`);
              return [];
            }

            const stats = await fs.stat(fullPath).catch((error) => {
              console.error(`‚ùå Nem siker√ºlt olvasni a k√∂nyvt√°r adatait: ${fullPath}`, error);
              return null;
            });

            if (!stats) return [];

            // Ha a k√∂nyvt√°r neve alapj√°n m√°s t√≠pust kellene haszn√°lni
            const subdirectoryType = await determineDirectoryType(fullPath);

            const isNewDirectory = Date.now() - stats.mtimeMs < MediaConfig.newDirectoryThreshold;
            const nestedFiles = await walkDirectory(fullPath, subdirectoryType);

            const result = nestedFiles.map((file) => ({ ...file, isNewDirectory }));
            cache.store(cacheKey, result);
            return result;
          } else {
            const extension = path.extname(entry.name).toLowerCase();

            // NFO f√°jlok feldolgoz√°sa
            if (extension === MediaConfig.nfoExtension) {
              try {
                const nfoContent = await fs.readFile(fullPath, 'utf-8');
                console.log(`üìÑ NFO f√°jl olvasva: ${entry.name}`);

                const result = [
                  {
                    id: randomUUID(),
                    path: fullPath,
                    name: entry.name,
                    extension,
                    type,
                    nfoContent,
                  },
                ];

                cache.store(cacheKey, result);
                return result;
              } catch (error) {
                console.warn(`‚ö†Ô∏è Nem siker√ºlt beolvasni NFO f√°jlt: ${fullPath}`, error);
                return [];
              }
            }
            // M√©diaf√°jlok feldolgoz√°sa
            else if (MediaConfig.supportedExtensions.includes(extension)) {
              try {
                const stats = await fs.stat(fullPath);

                const result = [
                  {
                    id: randomUUID(),
                    path: fullPath,
                    name: entry.name,
                    extension,
                    size: stats.size,
                    modifiedAt: stats.mtime,
                    type,
                  },
                ];

                cache.store(cacheKey, result);
                return result;
              } catch (error) {
                console.warn(`‚ö†Ô∏è Nem siker√ºlt beolvasni f√°jlt: ${fullPath}`, error);
                return [];
              }
            }

            return [];
          }
        } catch (error) {
          console.error(`‚ùå V√°ratlan hiba a f√°jl/k√∂nyvt√°r feldolgoz√°sa sor√°n: ${fullPath}`, error);
          return [];
        }
      });

      // Minden batch-et feldolgozunk p√°rhuzamosan
      const batchResults = await Promise.all(batchPromises);

      // Egyes√≠tj√ºk az eredm√©nyeket
      results = results.concat(batchResults.flat());
    }
  } catch (error) {
    console.error(`‚ùå Hiba a k√∂nyvt√°r bej√°r√°sa k√∂zben: ${directory}`, error);
    throw error; // Dobjuk tov√°bb a hib√°t, hogy a h√≠v√≥ kezelje
  }

  return results;
}

// Gyors√≠t√≥t√°r tiszt√≠t√°sa
export function clearCache(): void {
  cache.clean();
  console.log('üßπ M√©diaf√°jl gyors√≠t√≥t√°r tiszt√≠tva');
}
