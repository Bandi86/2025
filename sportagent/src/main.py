"""
Sport Agent - F≈ë oszt√°ly √©s alkalmaz√°s bel√©p√©si pont
"""
import os
import sys
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import click
from rich.console import Console
from rich.table import Table
from rich.progress import Progress
from rich.panel import Panel

# Helyi importok
from .config import Config
from .scrapers.match_scraper import MatchScraper
from .apis.sports_api import SportsAPI
from .data.data_processor import DataProcessor
from .data.demo_data import DemoData
from .reports.report_generator import ReportGenerator
from .utils.date_utils import DateUtils
from .utils.logger import Logger

console = Console()
logger = Logger().get_logger()

class SportAgent:
    """
    Sport Agent f≈ëoszt√°lya - koordin√°lja az adatgy≈±jt√©st, elemz√©st √©s riportgener√°l√°st
    """

    def __init__(self):
        self.config = Config()
        self.match_scraper = MatchScraper()
        self.sports_api = SportsAPI()
        self.data_processor = DataProcessor()
        self.report_generator = ReportGenerator()
        self.date_utils = DateUtils()

    def collect_matches(self, date: str = None, demo_mode: bool = False) -> List[Dict]:
        """
        Meccsek gy≈±jt√©se a megadott d√°tumra
        """
        target_date = self.date_utils.parse_date(date) if date else datetime.now() + timedelta(days=1)

        console.print(f"üîç Meccsek keres√©se erre a d√°tumra: {target_date.strftime('%Y-%m-%d')}", style="bold blue")

        # Demo m√≥d eset√©n tesztadatokat haszn√°lunk
        if demo_mode:
            console.print("üé≠ Demo m√≥d aktiv√°lva - tesztadatok haszn√°lata", style="yellow")
            demo_matches = DemoData.get_demo_matches(target_date)
            processed_matches = self.data_processor.process_matches(demo_matches)
            console.print(f"‚úÖ Demo: {len(processed_matches)} meccs bet√∂ltve", style="bold green")
            return processed_matches

        matches = []

        with Progress() as progress:
            task = progress.add_task("Adatgy≈±jt√©s...", total=100)

            # Web scraping
            progress.update(task, advance=30)
            scraped_matches = self.match_scraper.scrape_matches(target_date)
            matches.extend(scraped_matches)

            # API h√≠v√°sok
            progress.update(task, advance=40)
            api_matches = self.sports_api.get_matches(target_date)
            matches.extend(api_matches)

            # Adatok feldolgoz√°sa
            progress.update(task, advance=30)
            processed_matches = self.data_processor.process_matches(matches)

        console.print(f"‚úÖ √ñsszesen {len(processed_matches)} meccs tal√°lva", style="bold green")
        return processed_matches

    def generate_report(self, matches: List[Dict], output_format: str = 'html') -> str:
        """
        Riport gener√°l√°sa a meccsekr≈ël
        """
        console.print("üìù Riport gener√°l√°sa...", style="bold yellow")

        report_path = self.report_generator.generate_report(
            matches=matches,
            format=output_format,
            template='matches_overview'
        )

        console.print(f"‚úÖ Riport elk√©sz√ºlt: {report_path}", style="bold green")
        return report_path

    def analyze_match(self, match_id: str, demo_mode: bool = False) -> Dict:
        """
        Egy konkr√©t meccs r√©szletes elemz√©se
        """
        console.print(f"üéØ R√©szletes elemz√©s: {match_id}", style="bold magenta")

        # Demo m√≥d eset√©n tesztadatokat haszn√°lunk
        if demo_mode:
            console.print("üé≠ Demo elemz√©s bet√∂lt√©se", style="yellow")
            return DemoData.get_demo_match_analysis(match_id)

        # Meccs adatok lek√©r√©se
        match_data = self.sports_api.get_match_details(match_id)

        # Statisztik√°k
        stats = self.sports_api.get_match_statistics(match_id)

        # Odds adatok
        odds = self.sports_api.get_match_odds(match_id)

        # Kor√°bbi tal√°lkoz√≥k
        head_to_head = self.sports_api.get_head_to_head(match_data['home_team'], match_data['away_team'])

        analysis = {
            'match_data': match_data,
            'statistics': stats,
            'odds': odds,
            'head_to_head': head_to_head,
            'analysis': self.data_processor.analyze_match(match_data, stats, odds, head_to_head)
        }

        return analysis

    def interactive_mode(self, demo_mode: bool = False):
        """
        Interakt√≠v m√≥d - felhaszn√°l√≥ v√°laszthat meccseket
        """
        console.print(Panel.fit("üèÜ Sport Agent - Interakt√≠v M√≥d", style="bold blue"))

        # Demo m√≥d jelz√©se
        if demo_mode:
            console.print("üé≠ Demo m√≥d aktiv√°lva", style="yellow")

        # D√°tum bek√©r√©se
        date_input = click.prompt("Milyen d√°tumra keresel meccseket? (YYYY-MM-DD vagy 'tomorrow')", default="tomorrow")

        # Meccsek gy≈±jt√©se
        matches = self.collect_matches(date_input, demo_mode)

        if not matches:
            console.print("‚ùå Nem tal√°ltam meccseket erre a d√°tumra", style="bold red")
            return

        # Meccsek list√°z√°sa
        self._display_matches_table(matches)

        # Riport gener√°l√°s
        generate_report = click.confirm("K√©sz√≠tsek riportot ezekr≈ël a meccsekr≈ël?", default=True)
        if generate_report:
            format_choice = click.prompt("Milyen form√°tumban? (html/markdown/json)", default="html")
            report_path = self.generate_report(matches, format_choice)

            if click.confirm("Megnyitod a riportot?", default=True):
                os.system(f"xdg-open {report_path}")

        # R√©szletes elemz√©s
        if click.confirm("Szeretn√©l r√©szletes elemz√©st egy meccsr≈ël?", default=False):
            match_choice = click.prompt("Melyik meccs? (add meg a sorsz√°mot)", type=int)

            if 1 <= match_choice <= len(matches):
                selected_match = matches[match_choice - 1]
                analysis = self.analyze_match(selected_match['id'], demo_mode)

                detailed_report = self.report_generator.generate_detailed_report(analysis)
                console.print(f"üìä R√©szletes elemz√©s elk√©sz√ºlt: {detailed_report}", style="bold green")

                if click.confirm("Megnyitod a r√©szletes elemz√©st?", default=True):
                    os.system(f"xdg-open {detailed_report}")

    def _display_matches_table(self, matches: List[Dict]):
        """
        Meccsek t√°bl√°zatos megjelen√≠t√©se
        """
        table = Table(title="Tal√°latok")
        table.add_column("#", style="cyan", no_wrap=True)
        table.add_column("Id≈ë", style="magenta")
        table.add_column("Hazai", style="green")
        table.add_column("Vend√©g", style="red")
        table.add_column("Liga", style="blue")
        table.add_column("Odds", style="yellow")

        for i, match in enumerate(matches, 1):
            table.add_row(
                str(i),
                match.get('time', 'N/A'),
                match.get('home_team', 'N/A'),
                match.get('away_team', 'N/A'),
                match.get('league', 'N/A'),
                f"1:{match.get('odds_home', 'N/A')} X:{match.get('odds_draw', 'N/A')} 2:{match.get('odds_away', 'N/A')}"
            )

        console.print(table)

@click.command()
@click.option('--date', '-d', help='D√°tum (YYYY-MM-DD form√°tumban vagy "tomorrow")')
@click.option('--interactive', '-i', is_flag=True, help='Interakt√≠v m√≥d')
@click.option('--format', '-f', default='html', help='Riport form√°tum (html/markdown/json)')
@click.option('--demo', is_flag=True, help='Demo m√≥d tesztadatokkal')
def main(date, interactive, format, demo):
    """
    Sport Agent - Intelligens sportadatok gy≈±jt≈ëje √©s elemz≈ëje
    """
    agent = SportAgent()

    if interactive:
        agent.interactive_mode(demo_mode=demo)
    else:
        matches = agent.collect_matches(date, demo_mode=demo)
        if matches:
            report_path = agent.generate_report(matches, format)
            console.print(f"üéâ K√©sz! Riport: {report_path}", style="bold green")
        else:
            console.print("‚ùå Nem tal√°ltam meccseket", style="bold red")

if __name__ == "__main__":
    main()
