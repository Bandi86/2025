"""
Clean Multi-Agent Sport System
Tiszta, egyszer≈± multi-√ºgyn√∂k rendszer a megl√©v≈ë j√≥ komponensekkel
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn

from .agents.match_fixtures_collector import MatchFixturesCollector
from .agents.match_statistics_agent import MatchStatisticsAgent
from .agents.analysis_agent import AnalysisAgent
from .agents.betting_strategy_agent import BettingStrategyAgent
from .utils.logger import Logger
from .data.data_storage import DataStorage

console = Console()
logger = Logger().get_logger()

class CleanSportOrchestrator:
    """
    Tiszta Multi-agent Sport rendszer koordin√°tora

    √úgyn√∂k√∂k:
    1. MatchFixturesCollector - mai/holnapi meccsek gy≈±jt√©se
    2. MatchStatisticsAgent - meccsekr≈ël r√©szletes statisztik√°k
    3. AnalysisAgent - meccsek elemz√©se
    4. BettingStrategyAgent - fogad√°si strat√©gi√°k
    """

    def __init__(self):
        self.data_storage = DataStorage()

        # F≈ë √ºgyn√∂k√∂k inicializ√°l√°sa
        self.fixtures_collector = MatchFixturesCollector()
        self.statistics_agent = MatchStatisticsAgent()

        # Elemz≈ë √ºgyn√∂k√∂k
        try:
            self.analysis_agent = AnalysisAgent(self.data_storage)
            self.betting_agent = BettingStrategyAgent(self.data_storage)
        except Exception as e:
            logger.warning(f"Elemz≈ë √ºgyn√∂k√∂k bet√∂lt√©si hiba: {e}")
            self.analysis_agent = None
            self.betting_agent = None

        logger.info("Clean Sport Orchestrator inicializ√°lva")

    def run_daily_analysis(self, date_option: str = "today") -> Dict:
        """
        Napi sportanal√≠zis futtat√°sa

        Args:
            date_option: "today", "tomorrow", vagy "both"

        Returns:
            Dict: Teljes an√°l√≠zis eredm√©nye
        """
        console.print(Panel.fit("üöÄ Tiszta Multi-Agent Sport Rendszer", style="bold blue"))

        results = {
            'timestamp': datetime.now().isoformat(),
            'date_option': date_option,
            'matches_collected': [],
            'statistics': {},
            'analysis': {},
            'betting_strategies': {},
            'summary': {}
        }

        try:
            # 1. MECCSEK GY≈∞JT√âSE
            console.print("\nüìÖ [bold cyan]1. F√ÅZIS: Meccsek gy≈±jt√©se[/bold cyan]")

            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Meccsek gy≈±jt√©se...", total=None)

                matches = self._collect_matches(date_option)
                results['matches_collected'] = matches

                progress.update(task, description=f"‚úÖ {len(matches)} meccs √∂sszegy≈±jtve")

            if not matches:
                console.print("‚ùå Nem tal√°ltunk meccseket", style="red")
                return results

            # 2. STATISZTIK√ÅK GY≈∞JT√âSE
            console.print("\nüìä [bold yellow]2. F√ÅZIS: Statisztik√°k gy≈±jt√©se[/bold yellow]")

            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Statisztik√°k elemz√©se...", total=len(matches))

                statistics = {}
                for i, match in enumerate(matches):
                    try:
                        match_stats = self.statistics_agent.analyze_match(match)
                        statistics[match['id']] = match_stats
                        progress.advance(task)
                    except Exception as e:
                        logger.error(f"Statisztika hiba {match.get('id')}: {e}")
                        progress.advance(task)

                results['statistics'] = statistics
                progress.update(task, description=f"‚úÖ {len(statistics)} meccs statisztik√°ja k√©sz")

            # 3. R√âSZLETES ELEMZ√âS
            console.print("\nüß† [bold magenta]3. F√ÅZIS: R√©szletes elemz√©s[/bold magenta]")

            if self.analysis_agent:
                try:
                    analysis = self.analysis_agent.analyze_matches(matches)
                    results['analysis'] = analysis
                    console.print("‚úÖ R√©szletes elemz√©s befejezve", style="green")
                except Exception as e:
                    logger.error(f"Elemz√©s hiba: {e}")
                    console.print("‚ö†Ô∏è R√©szletes elemz√©s sikertelen", style="yellow")
            else:
                console.print("‚ö†Ô∏è Elemz≈ë √ºgyn√∂k nem el√©rhet≈ë", style="yellow")

            # 4. FOGAD√ÅSI STRAT√âGI√ÅK
            console.print("\nüí∞ [bold green]4. F√ÅZIS: Fogad√°si strat√©gi√°k[/bold green]")

            if self.betting_agent and results['analysis']:
                try:
                    betting_strategies = self.betting_agent.generate_betting_strategies(
                        matches=matches,
                        analysis=results['analysis']
                    )
                    results['betting_strategies'] = betting_strategies
                    console.print("‚úÖ Fogad√°si strat√©gi√°k gener√°lva", style="green")
                except Exception as e:
                    logger.error(f"Fogad√°si strat√©gia hiba: {e}")
                    console.print("‚ö†Ô∏è Fogad√°si strat√©gi√°k sikertelenek", style="yellow")
            else:
                console.print("‚ö†Ô∏è Fogad√°si √ºgyn√∂k nem el√©rhet≈ë", style="yellow")

            # 5. √ñSSZEGZ√âS
            results['summary'] = self._generate_summary(results)
            self._display_summary(results['summary'])

            return results

        except Exception as e:
            logger.error(f"Hiba a napi elemz√©s sor√°n: {str(e)}")
            console.print(f"‚ùå √Åltal√°nos hiba: {str(e)}", style="bold red")
            return results

    def _collect_matches(self, date_option: str) -> List[Dict]:
        """
        Meccsek gy≈±jt√©se a d√°tum opci√≥ alapj√°n
        """
        matches = []

        try:
            if date_option == "today":
                matches = self.fixtures_collector.collect_todays_fixtures()
            elif date_option == "tomorrow":
                matches = self.fixtures_collector.collect_tomorrows_fixtures()
            elif date_option == "both":
                today_matches = self.fixtures_collector.collect_todays_fixtures()
                tomorrow_matches = self.fixtures_collector.collect_tomorrows_fixtures()
                matches = today_matches + tomorrow_matches
            else:
                # Default: both
                matches = self.fixtures_collector.collect_fixtures_for_date_range(2)

        except Exception as e:
            logger.error(f"Hiba a meccsek gy≈±jt√©s√©ben: {str(e)}")
            # Fallback: demo adatok
            matches = self._get_demo_matches(date_option)

        return matches

    def _get_demo_matches(self, date_option: str) -> List[Dict]:
        """
        Demo meccsek ha minden m√°s sikertelen
        """
        today = datetime.now().strftime('%Y-%m-%d')
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

        demo_matches = [
            {
                'id': 'demo_1',
                'date': today if date_option != "tomorrow" else tomorrow,
                'time': '15:00',
                'home_team': 'Manchester United',
                'away_team': 'Liverpool',
                'league': 'Premier League',
                'sport': 'football',
                'status': 'scheduled',
                'source': 'demo_data'
            },
            {
                'id': 'demo_2',
                'date': today if date_option != "tomorrow" else tomorrow,
                'time': '17:30',
                'home_team': 'Barcelona',
                'away_team': 'Real Madrid',
                'league': 'La Liga',
                'sport': 'football',
                'status': 'scheduled',
                'source': 'demo_data'
            }
        ]

        return demo_matches

    def _generate_summary(self, results: Dict) -> Dict:
        """
        Eredm√©nyek √∂sszegz√©se
        """
        matches = results.get('matches_collected', [])
        statistics = results.get('statistics', {})

        summary = {
            'total_matches': len(matches),
            'matches_with_statistics': len(statistics),
            'analysis_available': bool(results.get('analysis')),
            'betting_strategies_available': bool(results.get('betting_strategies')),
            'top_matches': self._get_top_matches(matches, statistics),
            'leagues_covered': list(set(m.get('league', 'Unknown') for m in matches)),
            'completion_rate': self._calculate_completion_rate(results)
        }

        return summary

    def _get_top_matches(self, matches: List[Dict], statistics: Dict) -> List[Dict]:
        """
        Top meccsek kiv√°laszt√°sa confidence score alapj√°n
        """
        top_matches = []

        for match in matches:
            match_id = match.get('id')
            if match_id in statistics:
                confidence = statistics[match_id].get('confidence_score', 0)
                top_matches.append({
                    'match': match,
                    'confidence': confidence
                })

        # Confidence alapj√°n rendez√©s, top 3
        top_matches.sort(key=lambda x: x['confidence'], reverse=True)
        return top_matches[:3]

    def _calculate_completion_rate(self, results: Dict) -> float:
        """
        Feldolgoz√°si ar√°ny sz√°m√≠t√°sa
        """
        total_matches = len(results.get('matches_collected', []))
        if total_matches == 0:
            return 0.0

        completed_statistics = len(results.get('statistics', {}))
        return completed_statistics / total_matches

    def _display_summary(self, summary: Dict):
        """
        √ñsszegz√©s megjelen√≠t√©se
        """
        console.print("\nüìã [bold blue]√ñSSZEGZ√âS[/bold blue]")

        console.print(f"üéØ Meccsek √∂sszesen: {summary['total_matches']}")
        console.print(f"üìä Statisztik√°val: {summary['matches_with_statistics']}")
        console.print(f"üß† Elemz√©s: {'‚úÖ' if summary['analysis_available'] else '‚ùå'}")
        console.print(f"üí∞ Fogad√°si strat√©gia: {'‚úÖ' if summary['betting_strategies_available'] else '‚ùå'}")
        console.print(f"üìà Feldolgoz√°si ar√°ny: {summary['completion_rate']:.1%}")

        if summary['leagues_covered']:
            console.print(f"üèÜ Lig√°k: {', '.join(summary['leagues_covered'])}")

        if summary['top_matches']:
            console.print("\nüåü [bold yellow]TOP MECCSEK:[/bold yellow]")
            for i, top_match in enumerate(summary['top_matches'], 1):
                match = top_match['match']
                confidence = top_match['confidence']
                console.print(f"  {i}. {match['home_team']} vs {match['away_team']} "
                             f"({confidence:.2f} megb√≠zhat√≥s√°g)")

    def quick_today_analysis(self) -> Dict:
        """
        Gyors mai elemz√©s
        """
        console.print("‚ö° Gyors mai elemz√©s ind√≠t√°sa...")
        return self.run_daily_analysis("today")

    def quick_tomorrow_analysis(self) -> Dict:
        """
        Gyors holnapi elemz√©s
        """
        console.print("‚ö° Gyors holnapi elemz√©s ind√≠t√°sa...")
        return self.run_daily_analysis("tomorrow")

    def interactive_mode(self):
        """
        Interakt√≠v m√≥d
        """
        console.print(Panel.fit("üéÆ Interakt√≠v Sport Elemz≈ë", style="bold green"))

        while True:
            console.print("\n[bold cyan]V√°lassz opci√≥t:[/bold cyan]")
            console.print("1. üìÖ Mai meccsek elemz√©se")
            console.print("2. üîÆ Holnapi meccsek elemz√©se")
            console.print("3. üìä Mindk√©t nap elemz√©se")
            console.print("4. ‚ùå Kil√©p√©s")

            choice = console.input("\nV√°laszt√°s (1-4): ")

            if choice == "1":
                self.quick_today_analysis()
            elif choice == "2":
                self.quick_tomorrow_analysis()
            elif choice == "3":
                self.run_daily_analysis("both")
            elif choice == "4":
                console.print("üëã Viszl√°t!", style="bold blue")
                break
            else:
                console.print("‚ùå √ârv√©nytelen v√°laszt√°s", style="red")

    def get_system_status(self) -> Dict:
        """
        Rendszer √°llapot√°nak ellen≈ërz√©se
        """
        status = {
            'timestamp': datetime.now().isoformat(),
            'agents': {
                'fixtures_collector': True,
                'statistics_agent': True,
                'analysis_agent': self.analysis_agent is not None,
                'betting_agent': self.betting_agent is not None
            },
            'data_storage': True,
            'overall_health': 'good'
        }

        active_agents = sum(status['agents'].values())
        if active_agents >= 3:
            status['overall_health'] = 'excellent'
        elif active_agents >= 2:
            status['overall_health'] = 'good'
        else:
            status['overall_health'] = 'limited'

        return status
