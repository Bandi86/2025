import structlog
import logging
import sys
from typing import Any, Dict
from core.config import settings

def setup_logging():
    """Setup structured logging"""
    
    # Configure structlog
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            structlog.processors.JSONRenderer() if settings.LOG_FORMAT == "json" else structlog.dev.ConsoleRenderer(),
        ],
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )
    
    # Configure standard library logging
    logging.basicConfig(
        format="%(message)s",
        stream=sys.stdout,
        level=getattr(logging, settings.LOG_LEVEL.upper()),
    )
    
    # Set log levels for noisy libraries
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
    logging.getLogger("uvicorn.error").setLevel(logging.WARNING)
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)

def get_logger(name: str = None) -> structlog.BoundLogger:
    """Get a structured logger"""
    return structlog.get_logger(name)

class AgentLogger:
    """Specialized logger for agent operations"""
    
    def __init__(self, agent_id: str = None, agent_name: str = None):
        self.agent_id = agent_id
        self.agent_name = agent_name
        self.logger = get_logger("agent")
    
    def _add_context(self, **kwargs) -> Dict[str, Any]:
        """Add agent context to log entries"""
        context = kwargs.copy()
        if self.agent_id:
            context["agent_id"] = self.agent_id
        if self.agent_name:
            context["agent_name"] = self.agent_name
        return context
    
    def info(self, message: str, **kwargs):
        """Log info message with agent context"""
        self.logger.info(message, **self._add_context(**kwargs))
    
    def warning(self, message: str, **kwargs):
        """Log warning message with agent context"""
        self.logger.warning(message, **self._add_context(**kwargs))
    
    def error(self, message: str, **kwargs):
        """Log error message with agent context"""
        self.logger.error(message, **self._add_context(**kwargs))
    
    def debug(self, message: str, **kwargs):
        """Log debug message with agent context"""
        self.logger.debug(message, **self._add_context(**kwargs))
    
    def task_started(self, task_id: str, task_type: str, **kwargs):
        """Log task start"""
        self.info(
            "Task started",
            task_id=task_id,
            task_type=task_type,
            **kwargs
        )
    
    def task_completed(self, task_id: str, task_type: str, duration: float = None, **kwargs):
        """Log task completion"""
        self.info(
            "Task completed",
            task_id=task_id,
            task_type=task_type,
            duration=duration,
            **kwargs
        )
    
    def task_failed(self, task_id: str, task_type: str, error: str, **kwargs):
        """Log task failure"""
        self.error(
            "Task failed",
            task_id=task_id,
            task_type=task_type,
            error=error,
            **kwargs
        )
    
    def prediction_made(self, prediction_type: str, confidence: float, **kwargs):
        """Log prediction made by agent"""
        self.info(
            "Prediction made",
            prediction_type=prediction_type,
            confidence=confidence,
            **kwargs
        )
    
    def insight_generated(self, insight_type: str, confidence: float = None, **kwargs):
        """Log insight generated by agent"""
        self.info(
            "Insight generated",
            insight_type=insight_type,
            confidence=confidence,
            **kwargs
        ) 