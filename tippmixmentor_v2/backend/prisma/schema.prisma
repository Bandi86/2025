// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// User Management
// =============================================================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String?
  lastName          String?
  avatar            String?
  isEmailVerified   Boolean  @default(false)
  isActive          Boolean  @default(true)
  role              UserRole @default(USER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  predictions       Prediction[]
  userStats         UserStats?
  notifications     Notification[]
  refreshTokens     RefreshToken[]
  userPreferences   UserPreferences?

  @@map("users")
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  favoriteTeams         String[] // Array of team IDs
  favoriteLeagues       String[] // Array of league IDs
  notificationSettings  Json     // JSON object for notification preferences
  theme                 String   @default("light")
  language              String   @default("en")
  timezone              String   @default("UTC")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// =============================================================================
// Football Data Models
// =============================================================================

model League {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  country     String?
  flag        String?
  logo        String?
  season      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teams       Team[]
  matches     Match[]
  standings   Standing[]
  analytics   LeagueAnalytics[]

  @@map("leagues")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  shortName   String?
  code        String   @unique
  country     String?
  city        String?
  founded     Int?
  logo        String?
  venue       String?
  capacity    Int?
  leagueId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  league      League   @relation(fields: [leagueId], references: [id])
  homeMatches Match[]  @relation("HomeTeam")
  awayMatches Match[]  @relation("AwayTeam")
  players     Player[]
  standings   Standing[] @relation("HomeTeamStanding")
  analytics   TeamAnalytics[]
  lineups     Lineup[]

  @@map("teams")
}

model Player {
  id          String   @id @default(cuid())
  name        String
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  nationality String?
  position    String?
  jerseyNumber Int?
  height      Int?     // in cm
  weight      Int?     // in kg
  teamId      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  team        Team?    @relation(fields: [teamId], references: [id])
  playerStats PlayerStats[]
  lineups     Lineup[]

  @@map("players")
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  city        String?
  country     String?
  capacity    Int?
  surface     String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  matches     Match[]

  @@map("venues")
}

model Match {
  id              String      @id @default(cuid())
  homeTeamId      String
  awayTeamId      String
  leagueId        String
  venueId         String?
  season          String
  matchDate       DateTime
  status          MatchStatus @default(SCHEDULED)
  homeScore       Int?
  awayScore       Int?
  homeHalfScore   Int?
  awayHalfScore   Int?
  referee         String?
  attendance      Int?
  weather         String?
  temperature     Float?
  humidity        Float?
  windSpeed       Float?
  isLive          Boolean     @default(false)
  isFinished      Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  homeTeam        Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam        Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  league          League      @relation(fields: [leagueId], references: [id])
  venue           Venue?      @relation(fields: [venueId], references: [id])
  predictions     Prediction[]
  matchStats      MatchStats?
  keyEvents       KeyEvent[]
  plays           Play[]
  lineups         Lineup[]
  playerStats     PlayerStats[]

  @@map("matches")
}

model MatchStats {
  id                    String   @id @default(cuid())
  matchId               String   @unique
  homePossession        Float?
  awayPossession        Float?
  homeShots             Int?
  awayShots             Int?
  homeShotsOnTarget     Int?
  awayShotsOnTarget     Int?
  homeCorners           Int?
  awayCorners           Int?
  homeFouls             Int?
  awayFouls             Int?
  homeYellowCards       Int?
  awayYellowCards       Int?
  homeRedCards          Int?
  awayRedCards          Int?
  homeOffsides          Int?
  awayOffsides          Int?
  homeSaves             Int?
  awaySaves             Int?
  homePasses            Int?
  awayPasses            Int?
  homePassAccuracy      Float?
  awayPassAccuracy      Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  match                 Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("match_stats")
}

model PlayerStats {
  id          String   @id @default(cuid())
  playerId    String
  matchId     String
  goals       Int      @default(0)
  assists     Int      @default(0)
  yellowCards Int      @default(0)
  redCards    Int      @default(0)
  minutes     Int      @default(0)
  shots       Int      @default(0)
  shotsOnTarget Int    @default(0)
  passes      Int      @default(0)
  passAccuracy Float   @default(0)
  tackles     Int      @default(0)
  interceptions Int    @default(0)
  fouls       Int      @default(0)
  saves       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  player      Player   @relation(fields: [playerId], references: [id])
  match       Match    @relation(fields: [matchId], references: [id])

  @@unique([playerId, matchId])
  @@map("player_stats")
}

model Standing {
  id          String   @id @default(cuid())
  leagueId    String
  teamId      String
  position    Int
  played      Int      @default(0)
  won         Int      @default(0)
  drawn       Int      @default(0)
  lost        Int      @default(0)
  goalsFor    Int      @default(0)
  goalsAgainst Int     @default(0)
  goalDifference Int   @default(0)
  points      Int      @default(0)
  season      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  league      League   @relation(fields: [leagueId], references: [id])
  team        Team     @relation("HomeTeamStanding", fields: [teamId], references: [id])

  @@unique([leagueId, teamId, season])
  @@map("standings")
}

// =============================================================================
// Match Events and Plays
// =============================================================================

model KeyEvent {
  id          String      @id @default(cuid())
  matchId     String
  eventType   EventType
  minute      Int
  description String?
  teamId      String?
  playerId    String?
  additionalData Json?    // For extra event data
  createdAt   DateTime    @default(now())

  // Relations
  match       Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("key_events")
}

model Play {
  id          String   @id @default(cuid())
  matchId     String
  playType    PlayType
  minute      Int
  description String?
  teamId      String?
  playerId    String?
  coordinates Json?    // {x: number, y: number}
  additionalData Json? // For extra play data
  createdAt   DateTime @default(now())

  // Relations
  match       Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("plays")
}

model Lineup {
  id          String   @id @default(cuid())
  matchId     String
  teamId      String
  playerId    String
  position    String
  isSubstitute Boolean  @default(false)
  isCaptain   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  match       Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  team        Team      @relation(fields: [teamId], references: [id])
  player      Player    @relation(fields: [playerId], references: [id])

  @@unique([matchId, teamId, playerId])
  @@map("lineups")
}

// =============================================================================
// Predictions and Analytics
// =============================================================================

model Prediction {
  id              String          @id @default(cuid())
  matchId         String
  userId          String?
  modelVersion    String
  homeWinProb     Float
  drawProb        Float
  awayWinProb     Float
  predictedScore  String?         // "2-1" format
  confidence      Float
  features        Json            // Model features used
  predictionType  PredictionType  @default(MATCH_RESULT)
  isCorrect       Boolean?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  match           Match           @relation(fields: [matchId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])
  analytics       PredictionAnalytics?

  @@map("predictions")
}

model UserStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalPredictions      Int      @default(0)
  correctPredictions    Int      @default(0)
  accuracy              Float    @default(0)
  streak                Int      @default(0)
  bestStreak            Int      @default(0)
  totalPoints           Int      @default(0)
  rank                  Int?
  lastPredictionDate    DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

// =============================================================================
// Analytics and Performance Tracking
// =============================================================================

model PredictionAnalytics {
  id                    String   @id @default(cuid())
  predictionId          String   @unique
  modelVersion          String
  featureImportance     Json     // Feature importance scores
  predictionConfidence  Float
  actualOutcome         String?  // Actual match result
  predictionAccuracy    Boolean?
  processingTime        Float    // Time taken to generate prediction
  modelPerformance      Json?    // Model performance metrics
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  prediction            Prediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@map("prediction_analytics")
}

model ModelPerformance {
  id                    String   @id @default(cuid())
  modelVersion          String
  modelName             String
  totalPredictions      Int      @default(0)
  correctPredictions    Int      @default(0)
  accuracy              Float    @default(0)
  precision             Float    @default(0)
  recall                Float    @default(0)
  f1Score               Float    @default(0)
  averageConfidence     Float    @default(0)
  lastUpdated           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([modelVersion, modelName])
  @@map("model_performance")
}

model TeamAnalytics {
  id                    String   @id @default(cuid())
  teamId                String
  season                String
  totalMatches          Int      @default(0)
  wins                  Int      @default(0)
  draws                 Int      @default(0)
  losses                Int      @default(0)
  goalsScored           Int      @default(0)
  goalsConceded         Int      @default(0)
  cleanSheets           Int      @default(0)
  failedToScore         Int      @default(0)
  averageGoalsScored    Float    @default(0)
  averageGoalsConceded  Float    @default(0)
  homeForm              String[] // Last 5 home results: ["W", "D", "L", "W", "D"]
  awayForm              String[] // Last 5 away results
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  team                  Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, season])
  @@map("team_analytics")
}

model LeagueAnalytics {
  id                    String   @id @default(cuid())
  leagueId              String
  season                String
  totalMatches          Int      @default(0)
  averageGoalsPerMatch  Float    @default(0)
  homeWinPercentage     Float    @default(0)
  drawPercentage        Float    @default(0)
  awayWinPercentage     Float    @default(0)
  over25Percentage      Float    @default(0) // Percentage of matches with over 2.5 goals
  bothTeamsScorePercentage Float @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  league                League   @relation(fields: [leagueId], references: [id])

  @@unique([leagueId, season])
  @@map("league_analytics")
}

model PerformanceMetrics {
  id                    String   @id @default(cuid())
  metricType            String   // "api_response_time", "prediction_accuracy", "user_engagement"
  metricName            String
  metricValue           Float
  metricUnit            String?  // "ms", "percentage", "count"
  timestamp             DateTime @default(now())
  metadata              Json?    // Additional context

  @@map("performance_metrics")
}

// =============================================================================
// Notifications
// =============================================================================

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json?
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// =============================================================================
// Enums
// =============================================================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum MatchStatus {
  SCHEDULED
  LIVE
  FINISHED
  CANCELLED
  POSTPONED
}

enum EventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  PENALTY
  OWN_GOAL
  MISSED_PENALTY
  INJURY
  OTHER
}

enum PlayType {
  PASS
  SHOT
  TACKLE
  INTERCEPTION
  SAVE
  FOUL
  CORNER
  FREE_KICK
  PENALTY
  OTHER
}

enum PredictionType {
  MATCH_RESULT
  OVER_UNDER
  BOTH_TEAMS_SCORE
  EXACT_SCORE
  FIRST_GOAL_SCORER
}

enum NotificationType {
  MATCH_START
  PREDICTION_RESULT
  SYSTEM_UPDATE
  ACHIEVEMENT
  GENERAL
} 