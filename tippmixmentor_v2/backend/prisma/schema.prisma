// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// User Management
// =============================================================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String?
  lastName          String?
  avatar            String?
  isEmailVerified   Boolean  @default(false)
  isActive          Boolean  @default(true)
  role              UserRole @default(USER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  predictions       Prediction[]
  userStats         UserStats?
  notifications     Notification[]
  refreshTokens     RefreshToken[]
  userPreferences   UserPreferences?
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  followers         UserFollow[] @relation("UserFollowers")
  following         UserFollow[] @relation("UserFollowing")
  userProfile       UserProfile?

  @@map("users")
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  favoriteTeams         String[] // Array of team IDs
  favoriteLeagues       String[] // Array of league IDs
  notificationSettings  Json     // JSON object for notification preferences
  theme                 String   @default("light")
  language              String   @default("en")
  timezone              String   @default("UTC")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// =============================================================================
// Football Data Models
// =============================================================================

model League {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  country     String?
  flag        String?
  logo        String?
  season      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teams       Team[]
  matches     Match[]
  standings   Standing[]
  analytics   LeagueAnalytics[]

  @@map("leagues")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  shortName   String?
  code        String   @unique
  country     String?
  city        String?
  founded     Int?
  logo        String?
  venue       String?
  capacity    Int?
  leagueId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  league      League   @relation(fields: [leagueId], references: [id])
  homeMatches Match[]  @relation("HomeTeam")
  awayMatches Match[]  @relation("AwayTeam")
  players     Player[]
  standings   Standing[] @relation("HomeTeamStanding")
  analytics   TeamAnalytics[]
  lineups     Lineup[]

  @@map("teams")
}

model Player {
  id          String   @id @default(cuid())
  name        String
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  nationality String?
  position    String?
  jerseyNumber Int?
  height      Int?     // in cm
  weight      Int?     // in kg
  teamId      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  team        Team?    @relation(fields: [teamId], references: [id])
  playerStats PlayerStats[]
  lineups     Lineup[]

  @@map("players")
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  city        String?
  country     String?
  capacity    Int?
  surface     String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  matches     Match[]

  @@map("venues")
}

model Match {
  id              String      @id @default(cuid())
  homeTeamId      String
  awayTeamId      String
  leagueId        String
  venueId         String?
  season          String
  matchDate       DateTime
  status          MatchStatus @default(SCHEDULED)
  homeScore       Int?
  awayScore       Int?
  homeHalfScore   Int?
  awayHalfScore   Int?
  referee         String?
  attendance      Int?
  weather         String?
  temperature     Float?
  humidity        Float?
  windSpeed       Float?
  isLive          Boolean     @default(false)
  isFinished      Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  homeTeam        Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam        Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  league          League      @relation(fields: [leagueId], references: [id])
  venue           Venue?      @relation(fields: [venueId], references: [id])
  predictions     Prediction[]
  matchStats      MatchStats?
  keyEvents       KeyEvent[]
  plays           Play[]
  lineups         Lineup[]
  playerStats     PlayerStats[]
  posts           Post[]

  @@map("matches")
}

model MatchStats {
  id                    String   @id @default(cuid())
  matchId               String   @unique
  homePossession        Float?
  awayPossession        Float?
  homeShots             Int?
  awayShots             Int?
  homeShotsOnTarget     Int?
  awayShotsOnTarget     Int?
  homeCorners           Int?
  awayCorners           Int?
  homeFouls             Int?
  awayFouls             Int?
  homeYellowCards       Int?
  awayYellowCards       Int?
  homeRedCards          Int?
  awayRedCards          Int?
  homeOffsides          Int?
  awayOffsides          Int?
  homeSaves             Int?
  awaySaves             Int?
  homePasses            Int?
  awayPasses            Int?
  homePassAccuracy      Float?
  awayPassAccuracy      Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  match                 Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("match_stats")
}

model PlayerStats {
  id          String   @id @default(cuid())
  playerId    String
  matchId     String
  goals       Int      @default(0)
  assists     Int      @default(0)
  yellowCards Int      @default(0)
  redCards    Int      @default(0)
  minutes     Int      @default(0)
  shots       Int      @default(0)
  shotsOnTarget Int    @default(0)
  passes      Int      @default(0)
  passAccuracy Float   @default(0)
  tackles     Int      @default(0)
  interceptions Int    @default(0)
  fouls       Int      @default(0)
  saves       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  player      Player   @relation(fields: [playerId], references: [id])
  match       Match    @relation(fields: [matchId], references: [id])

  @@unique([playerId, matchId])
  @@map("player_stats")
}

model Standing {
  id          String   @id @default(cuid())
  leagueId    String
  teamId      String
  position    Int
  played      Int      @default(0)
  won         Int      @default(0)
  drawn       Int      @default(0)
  lost        Int      @default(0)
  goalsFor    Int      @default(0)
  goalsAgainst Int     @default(0)
  goalDifference Int   @default(0)
  points      Int      @default(0)
  season      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  league      League   @relation(fields: [leagueId], references: [id])
  team        Team     @relation("HomeTeamStanding", fields: [teamId], references: [id])

  @@unique([leagueId, teamId, season])
  @@map("standings")
}

// =============================================================================
// Match Events and Plays
// =============================================================================

model KeyEvent {
  id          String      @id @default(cuid())
  matchId     String
  eventType   EventType
  minute      Int
  description String?
  teamId      String?
  playerId    String?
  additionalData Json?    // For extra event data
  createdAt   DateTime    @default(now())

  // Relations
  match       Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("key_events")
}

model Play {
  id          String   @id @default(cuid())
  matchId     String
  playType    PlayType
  minute      Int
  description String?
  teamId      String?
  playerId    String?
  coordinates Json?    // {x: number, y: number}
  additionalData Json? // For extra play data
  createdAt   DateTime @default(now())

  // Relations
  match       Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("plays")
}

model Lineup {
  id          String   @id @default(cuid())
  matchId     String
  teamId      String
  playerId    String
  position    String
  isSubstitute Boolean  @default(false)
  isCaptain   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  match       Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  team        Team      @relation(fields: [teamId], references: [id])
  player      Player    @relation(fields: [playerId], references: [id])

  @@unique([matchId, teamId, playerId])
  @@map("lineups")
}

// =============================================================================
// Predictions and Analytics
// =============================================================================

model Prediction {
  id                      String          @id @default(cuid())
  matchId                 String
  userId                  String?
  modelVersion            String
  homeWinProb             Float
  drawProb                Float
  awayWinProb             Float
  predictedScore          String?         // "2-1" format
  confidence              Float
  features                Json            // Model features used
  predictionType          PredictionType  @default(MATCH_RESULT)
  insight                 String?         // AI-generated match insight
  bettingRecommendations  Json?           // AI-generated betting recommendations
  isCorrect               Boolean?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  // Relations
  match                   Match           @relation(fields: [matchId], references: [id])
  user                    User?           @relation(fields: [userId], references: [id])
  analytics               PredictionAnalytics?
  posts                   Post[]

  @@map("predictions")
}

model UserStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalPredictions      Int      @default(0)
  correctPredictions    Int      @default(0)
  accuracy              Float    @default(0)
  streak                Int      @default(0)
  bestStreak            Int      @default(0)
  totalPoints           Int      @default(0)
  rank                  Int?
  lastPredictionDate    DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

// =============================================================================
// Analytics and Performance Tracking
// =============================================================================

model PredictionAnalytics {
  id                    String   @id @default(cuid())
  predictionId          String   @unique
  modelVersion          String
  featureImportance     Json     // Feature importance scores
  predictionConfidence  Float
  actualOutcome         String?  // Actual match result
  predictionAccuracy    Boolean?
  processingTime        Float    // Time taken to generate prediction
  modelPerformance      Json?    // Model performance metrics
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  prediction            Prediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@map("prediction_analytics")
}

model ModelPerformance {
  id                    String   @id @default(cuid())
  modelVersion          String
  modelName             String
  totalPredictions      Int      @default(0)
  correctPredictions    Int      @default(0)
  accuracy              Float    @default(0)
  precision             Float    @default(0)
  recall                Float    @default(0)
  f1Score               Float    @default(0)
  averageConfidence     Float    @default(0)
  lastUpdated           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([modelVersion, modelName])
  @@map("model_performance")
}

model TeamAnalytics {
  id                    String   @id @default(cuid())
  teamId                String
  season                String
  totalMatches          Int      @default(0)
  wins                  Int      @default(0)
  draws                 Int      @default(0)
  losses                Int      @default(0)
  goalsScored           Int      @default(0)
  goalsConceded         Int      @default(0)
  cleanSheets           Int      @default(0)
  failedToScore         Int      @default(0)
  averageGoalsScored    Float    @default(0)
  averageGoalsConceded  Float    @default(0)
  homeForm              String[] // Last 5 home results: ["W", "D", "L", "W", "D"]
  awayForm              String[] // Last 5 away results
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  team                  Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, season])
  @@map("team_analytics")
}

model LeagueAnalytics {
  id                    String   @id @default(cuid())
  leagueId              String
  season                String
  totalMatches          Int      @default(0)
  averageGoalsPerMatch  Float    @default(0)
  homeWinPercentage     Float    @default(0)
  drawPercentage        Float    @default(0)
  awayWinPercentage     Float    @default(0)
  over25Percentage      Float    @default(0) // Percentage of matches with over 2.5 goals
  bothTeamsScorePercentage Float @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  league                League   @relation(fields: [leagueId], references: [id])

  @@unique([leagueId, season])
  @@map("league_analytics")
}

model PerformanceMetrics {
  id                    String   @id @default(cuid())
  metricType            String   // "api_response_time", "prediction_accuracy", "user_engagement"
  metricName            String
  metricValue           Float
  metricUnit            String?  // "ms", "percentage", "count"
  timestamp             DateTime @default(now())
  metadata              Json?    // Additional context

  @@map("performance_metrics")
}

// =============================================================================
// Model Monitoring & A/B Testing
// =============================================================================

model ModelVersion {
  id          String   @id @default(cuid())
  version     String   @unique
  name        String
  description String?
  metadata    Json?    // Model metadata (features, hyperparameters, etc.)
  status      String   @default("active") // "active", "inactive", "deprecated"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("model_versions")
}

model ABTest {
  id           String   @id @default(cuid())
  testId       String   @unique
  name         String
  description  String?
  modelA       String   // Model version A
  modelB       String   // Model version B
  trafficSplit Int      // Percentage for model B (0-100)
  startDate    DateTime
  endDate      DateTime
  metrics      String[] // Metrics to track
  status       String   @default("active") // "active", "paused", "completed"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ab_tests")
}

model ModelDriftAlert {
  id          String   @id @default(cuid())
  modelVersion String
  driftType   String   // "accuracy_drop", "confidence_drop", "prediction_bias"
  severity    String   // "low", "medium", "high", "critical"
  message     String
  metrics     Json?    // Current vs baseline metrics
  isResolved  Boolean  @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())

  @@map("model_drift_alerts")
}

// =============================================================================
// Notifications
// =============================================================================

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json?
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// =============================================================================
// Social Media Features
// =============================================================================

model Post {
  id          String   @id @default(cuid())
  userId      String
  content     String   @db.Text
  type        PostType @default(GENERAL)
  matchId     String?  // For match-related posts
  predictionId String? // For prediction-related posts
  imageUrl    String?  // Optional image attachment
  isPublic    Boolean  @default(true)
  isEdited    Boolean  @default(false)
  editedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  match       Match?   @relation(fields: [matchId], references: [id])
  prediction  Prediction? @relation(fields: [predictionId], references: [id])
  comments    Comment[]
  likes       Like[]
  hashtags    PostHashtag[]

  @@map("posts")
}

model Comment {
  id          String   @id @default(cuid())
  postId      String
  userId      String
  content     String   @db.Text
  parentId    String?  // For nested comments (replies)
  isEdited    Boolean  @default(false)
  editedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  likes       Like[]

  @@map("comments")
}

model Like {
  id          String   @id @default(cuid())
  userId      String
  postId      String?
  commentId   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model UserFollow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?  @db.Text
  location        String?
  website         String?
  socialLinks     Json?    // {twitter: string, instagram: string, etc.}
  favoriteTeam   String?
  favoritePlayer  String?
  predictionAccuracy Float? // Overall prediction accuracy
  totalPredictions Int     @default(0)
  followersCount  Int      @default(0)
  followingCount  Int      @default(0)
  postsCount      Int      @default(0)
  achievements    String[] // Array of achievement IDs
  badges          String[] // Array of badge IDs
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Hashtag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  postsCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       PostHashtag[]

  @@map("hashtags")
}

model PostHashtag {
  id          String   @id @default(cuid())
  postId      String
  hashtagId   String
  createdAt   DateTime @default(now())

  // Relations
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag     Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([postId, hashtagId])
  @@map("post_hashtags")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String?
  points      Int      @default(0)
  criteria    Json     // Achievement criteria
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("achievements")
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String?
  color       String?
  rarity      BadgeRarity @default(COMMON)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("badges")
}

// =============================================================================
// Agent Management
// =============================================================================

model Agent {
  id              String      @id @default(cuid())
  name            String
  agentType       AgentType
  status          AgentStatus @default(INACTIVE)
  config          Json?       // Agent configuration
  metadata        Json?       // Additional metadata
  version         String      @default("1.0.0")
  isActive        Boolean     @default(true)
  lastHeartbeat   DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  tasks           AgentTask[]
  events          AgentEvent[]
  insights        AgentInsight[]
  workflows       AgentWorkflow[]
  performance     AgentPerformance?

  @@map("agents")
}

model AgentTask {
  id          String      @id @default(cuid())
  agentId     String
  taskType    String
  status      TaskStatus  @default(PENDING)
  priority    TaskPriority @default(NORMAL)
  inputData   Json?
  outputData  Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  agent       Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_tasks")
}

model AgentEvent {
  id          String      @id @default(cuid())
  agentId     String
  eventType   String
  eventData   Json?
  severity    EventSeverity @default(INFO)
  timestamp   DateTime    @default(now())

  // Relations
  agent       Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_events")
}

model AgentInsight {
  id          String   @id @default(cuid())
  agentId     String
  insightType String
  content     String   @db.Text
  confidence  Float?
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_insights")
}

model AgentWorkflow {
  id          String      @id @default(cuid())
  agentId     String
  name        String
  description String?
  steps       Json        // Workflow steps configuration
  status      WorkflowStatus @default(ACTIVE)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  agent       Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_workflows")
}

model AgentPerformance {
  id                    String   @id @default(cuid())
  agentId               String   @unique
  totalTasks            Int      @default(0)
  completedTasks        Int      @default(0)
  failedTasks           Int      @default(0)
  averageResponseTime   Float    @default(0)
  successRate           Float    @default(0)
  uptime                Float    @default(0)
  lastActivity          DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  agent                 Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_performance")
}

model AgentIntegration {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String   // "prediction", "analytics", "monitoring", etc.
  config      Json     // Integration configuration
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("agent_integrations")
}

// =============================================================================
// Enums
// =============================================================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum MatchStatus {
  SCHEDULED
  LIVE
  FINISHED
  CANCELLED
  POSTPONED
}

enum EventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  PENALTY
  OWN_GOAL
  MISSED_PENALTY
  INJURY
  OTHER
}

enum PlayType {
  PASS
  SHOT
  TACKLE
  INTERCEPTION
  SAVE
  FOUL
  CORNER
  FREE_KICK
  PENALTY
  OTHER
}

enum PredictionType {
  MATCH_RESULT
  OVER_UNDER
  BOTH_TEAMS_SCORE
  EXACT_SCORE
  FIRST_GOAL_SCORER
}

enum NotificationType {
  MATCH_START
  PREDICTION_RESULT
  SYSTEM_UPDATE
  ACHIEVEMENT
  GENERAL
}

enum PostType {
  GENERAL
  PREDICTION
  MATCH_COMMENTARY
  ANALYSIS
  NEWS
  QUESTION
  POLL
}

enum BadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

// Agent Management Enums
enum AgentType {
  PREDICTION
  ANALYTICS
  MONITORING
  INSIGHT
  WORKFLOW
  CUSTOM
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  PAUSED
  ERROR
  STARTING
  STOPPING
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum EventSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum WorkflowStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
} 