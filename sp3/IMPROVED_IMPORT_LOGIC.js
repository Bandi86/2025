/**
 * JAV√çTOTT IMPORT LOGIKA - INTELLIGENS MERGE
 *
 * A jelenlegi probl√©m√°k:
 * 1. Ha egy meccs m√°r l√©tezik, a rendszer nem friss√≠ti a markets/odds adatokat
 * 2. Elvesznek a k√©s≈ëbb √©rkez≈ë, b≈ëvebb piacok √©s odds-ok
 * 3. Nincs intelligens merge strat√©gia
 *
 * Javaslat:
 * 1. Minden import eset√©n ellen≈ërizz√ºk a megl√©v≈ë markets sz√°m√°t
 * 2. Ha t√∂bb piac √©rkezik, mergelj√ºk az adatokat
 * 3. Prefer√°ljuk a frissebb/teljesebb verzi√≥kat
 */

// JELENLEGI HIB√ÅS K√ìD:
if (!matchRecord) {
  // Csak √∫j meccs eset√©n t√∂rt√©nik market import...
  matchRecord = await this.prisma.match.create({...});

  // 4. Marketek √©s odds-ok import√°l√°sa
  for (const market of match.markets) {
    // Market l√©trehoz√°s...
  }
}
// HA M√ÅR L√âTEZIK A MECCS ‚Üí SEMMI NEM T√ñRT√âNIK! ‚ùå

// JAV√çTOTT LOGIKA:
if (!matchRecord) {
  // √öj meccs l√©trehoz√°sa
  matchRecord = await this.prisma.match.create({...});
}

// MINDIG FUSSON LE A MARKET MERGE LOGIKA:
await this.mergeOrUpdateMarkets(matchRecord, match.markets);

/**
 * Intelligens market merge strat√©gia
 */
private async mergeOrUpdateMarkets(matchRecord: any, newMarkets: any[]): Promise<void> {
  // 1. Megl√©v≈ë markets lek√©r√©se
  const existingMarkets = await this.prisma.market.findMany({
    where: { matchId: matchRecord.id },
    include: { odds: true },
  });

  const existingMarketsCount = existingMarkets.length;
  const newMarketsCount = newMarkets.length;

  this.logger.log(`üîÑ Market merge: ${existingMarketsCount} megl√©v≈ë ‚Üí ${newMarketsCount} √∫j`);

  // 2. Merge strat√©gia d√∂nt√©s
  if (newMarketsCount > existingMarketsCount) {
    // T√∂bb piac √©rkezett - teljes replace
    this.logger.log(`üìà T√∂bb piac √©rkezett (${existingMarketsCount} ‚Üí ${newMarketsCount}) - teljes friss√≠t√©s`);

    // R√©gi markets t√∂rl√©se
    const marketIds = existingMarkets.map(m => m.id);
    if (marketIds.length > 0) {
      await this.prisma.odds.deleteMany({ where: { marketId: { in: marketIds } } });
      await this.prisma.market.deleteMany({ where: { matchId: matchRecord.id } });
    }

    // √öj markets l√©trehoz√°sa
    await this.createMarkets(matchRecord.id, newMarkets);

  } else if (newMarketsCount === existingMarketsCount) {
    // Azonos piacsz√°m - odds √∂sszehasonl√≠t√°s
    const existingOddsCount = existingMarkets.reduce((sum, m) => sum + m.odds.length, 0);
    const newOddsCount = newMarkets.reduce((sum, m) => sum + (m.odds1 ? 1 : 0) + (m.oddsX ? 1 : 0) + (m.odds2 ? 1 : 0), 0);

    if (newOddsCount > existingOddsCount) {
      this.logger.log(`üìä T√∂bb odds √©rkezett (${existingOddsCount} ‚Üí ${newOddsCount}) - friss√≠t√©s`);

      // R√©gi markets t√∂rl√©se √©s √∫j l√©trehoz√°sa
      const marketIds = existingMarkets.map(m => m.id);
      if (marketIds.length > 0) {
        await this.prisma.odds.deleteMany({ where: { marketId: { in: marketIds } } });
        await this.prisma.market.deleteMany({ where: { matchId: matchRecord.id } });
      }

      await this.createMarkets(matchRecord.id, newMarkets);
    } else {
      this.logger.log(`‚è≠Ô∏è  Nem kell friss√≠t√©s (${existingOddsCount} >= ${newOddsCount} odds)`);
    }

  } else {
    // Kevesebb piac √©rkezett - megtartjuk a megl√©v≈ët
    this.logger.log(`‚¨áÔ∏è  Kevesebb piac √©rkezett (${newMarketsCount} < ${existingMarketsCount}) - megtart√°s`);
  }
}

private async createMarkets(matchId: string, markets: any[]): Promise<void> {
  for (const market of markets) {
    const createdMarket = await this.prisma.market.create({
      data: {
        matchId: matchId,
        name: market.name,
        origName: market.orig_market,
      },
    });

    // Odds l√©trehoz√°sa
    if (market.odds1) {
      await this.prisma.odds.create({
        data: {
          marketId: createdMarket.id,
          type: 'odds1',
          value: parseFloat(market.odds1),
        },
      });
    }

    if (market.oddsX) {
      await this.prisma.odds.create({
        data: {
          marketId: createdMarket.id,
          type: 'oddsX',
          value: parseFloat(market.oddsX),
        },
      });
    }

    if (market.odds2) {
      await this.prisma.odds.create({
        data: {
          marketId: createdMarket.id,
          type: 'odds2',
          value: parseFloat(market.odds2),
        },
      });
    }
  }
}
