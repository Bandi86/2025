#!/usr/bin/env python3
import argparse
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from advanced_predictor import FootballPredictor
from data_provider import FootballDataProvider
from web_scraper import FootballScraper
from summer_scraper import SimpleFootballScraper
from free_football_api import FreeFootballAPI
from hybrid_data_source import HybridFootballDataSource
from betting_strategy import BettingStrategy

def main():
    parser = argparse.ArgumentParser(description='Futball meccs eredm√©ny el≈ërejelz≈ë')
    parser.add_argument('--train', action='store_true', help='Modellek tan√≠t√°sa')
    parser.add_argument('--predict', action='store_true', help='Predikci√≥ k√©sz√≠t√©se')
    parser.add_argument('--home-team', type=int, help='Hazai csapat ID')
    parser.add_argument('--away-team', type=int, help='Vend√©g csapat ID')
    parser.add_argument('--league', type=int, help='Liga ID (opcion√°lis)')
    parser.add_argument('--list-teams', action='store_true', help='Csapatok list√°z√°sa')
    parser.add_argument('--search-team', type=str, help='Csapat keres√©se n√©v alapj√°n')

    # √öj funkci√≥k a val√≥s idej≈± adatokhoz
    parser.add_argument('--fetch-upcoming', action='store_true', help='J√∂v≈ëbeli meccsek let√∂lt√©se API-b√≥l')
    parser.add_argument('--predict-upcoming', action='store_true', help='√ñsszes j√∂v≈ëbeli meccs predikci√≥ja')
    parser.add_argument('--days-ahead', type=int, default=7, help='H√°ny napra el≈ëre (alap√©rtelmezett: 7)')
    parser.add_argument('--setup-api', action='store_true', help='API kulcsok be√°ll√≠t√°si √∫tmutat√≥')

    # √öj funkci√≥ - web scraping
    parser.add_argument('--scrape-matches', action='store_true', help='Meccsek scraping-e weboldalakr√≥l')
    parser.add_argument('--predict-scraped', action='store_true', help='Scraped meccsekre predikci√≥k')

    # Ny√°ri meccsek specifikus funkci√≥
    parser.add_argument('--summer-matches', action='store_true', help='Ny√°ri meccsek √©s predikci√≥k')

    # Hibrid adatforr√°s funkci√≥ (API + scraping + mock)
    parser.add_argument('--hybrid-matches', action='store_true', help='Hibrid m√≥dszer: API + scraping + re√°lis mock')

    # Fogad√°si strat√©gia √©s ROI sz√°m√≠t√°s
    parser.add_argument('--betting-analysis', action='store_true', help='Fogad√°si strat√©gia elemz√©s hibrid adatokkal')
    parser.add_argument('--bankroll', type=float, default=1000.0, help='Kezd≈ë bankroll (alap√©rtelmezett: $1000)')

    args = parser.parse_args()

    # Adatok el√©r√©si √∫tjai
    fixtures_path = '../data/espn20242025/base_data/fixtures.csv'
    teams_path = '../data/espn20242025/base_data/teams.csv'

    # √öj funkci√≥k kezel√©se
    if args.setup_api:
        provider = FootballDataProvider()
        provider.setup_api_keys()
        return

    if args.fetch_upcoming:
        print("üîÑ J√∂v≈ëbeli meccsek let√∂lt√©se...")
        provider = FootballDataProvider()
        upcoming = provider.get_upcoming_fixtures(days_ahead=args.days_ahead)

        if not upcoming.empty:
            provider.save_fixtures(upcoming)
            print(f"‚úÖ {len(upcoming)} j√∂v≈ëbeli meccs let√∂ltve √©s elmentve!")
            print("\nP√©ld√°k a let√∂lt√∂tt meccsekb≈ël:")
            print("-" * 60)
            for _, match in upcoming.head(5).iterrows():
                print(f"üìÖ {match['date'][:10]} | {match['home_team_name']} vs {match['away_team_name']}")
        else:
            print("‚ùå Nem siker√ºlt meccseket let√∂lteni. Ellen≈ërizd az API kulcsokat!")
        return

    if args.predict_upcoming:
        print("üîÆ J√∂v≈ëbeli meccsek predikci√≥ja...")

        # Bet√∂ltj√ºk a j√∂v≈ëbeli meccseket
        upcoming_file = 'upcoming_fixtures.csv'
        if not os.path.exists(upcoming_file):
            print("‚ùå Nincs j√∂v≈ëbeli meccs adat! Futtasd el≈ësz√∂r: --fetch-upcoming")
            return

        import pandas as pd
        upcoming = pd.read_csv(upcoming_file)

        # Modell bet√∂lt√©se
        if not os.path.exists('models'):
            print("‚ùå Nincs betan√≠tott modell! Futtasd el≈ësz√∂r: --train")
            return

        predictor = FootballPredictor(fixtures_path, teams_path)
        predictor.load_data()
        predictor.load_models()

        print(f"üìä {len(upcoming)} meccs predikci√≥ja:")
        print("=" * 80)

        for _, match in upcoming.iterrows():
            try:
                # Itt kellene mappelni a k√ºls≈ë team ID-ket a bels≈ë ID-kre
                # Most egyszer≈±en megpr√≥b√°ljuk
                home_id = int(match.get('local_home_team_id', match['home_team_id']))
                away_id = int(match.get('local_away_team_id', match['away_team_id']))

                prediction = predictor.predict_match(home_id, away_id)

                print(f"\nüìÖ {match['date'][:16]}")
                print(f"üè† {match['home_team_name']} vs ‚úàÔ∏è {match['away_team_name']}")
                print(f"üéØ Predikci√≥: {prediction['predicted_result']} ({prediction['confidence']}%)")
                print(f"‚öΩ V√°rhat√≥ g√≥lok: {prediction['expected_total_goals']}")

                probs = prediction['result_probabilities']
                print(f"üìä H: {probs['home_win']}% | D: {probs['draw']}% | A: {probs['away_win']}%")
                print("-" * 80)

            except Exception as e:
                print(f"‚ùå Hiba {match['home_team_name']} vs {match['away_team_name']} predikci√≥j√°n√°l: {e}")

        return

    predictor = FootballPredictor(fixtures_path, teams_path)
    predictor.load_data()

    if args.list_teams:
        print("El√©rhet≈ë csapatok:")
        print("-" * 50)
        for _, team in predictor.teams_df.head(20).iterrows():
            print(f"{team['teamId']:4d}: {team['displayName']}")
        print("... √©s m√©g t√∂bb csapat")
        return

    if args.search_team:
        search_term = args.search_team.lower()
        matches = predictor.teams_df[
            predictor.teams_df['displayName'].str.lower().str.contains(search_term, na=False)
        ]
        print(f"Csapatok '{args.search_team}' alapj√°n:")
        print("-" * 50)
        for _, team in matches.iterrows():
            print(f"{team['teamId']:4d}: {team['displayName']}")
        return

    if args.train:
        print("Modellek tan√≠t√°sa kezd≈ëdik...")
        try:
            predictor.compute_advanced_features()
            predictor.train_models()
            predictor.save_models()
            print("‚úÖ Modellek sikeresen betan√≠tva √©s elmentve!")
        except Exception as e:
            print(f"‚ùå Hiba a tan√≠t√°s sor√°n: {e}")
            return

    if args.predict:
        if not args.home_team or not args.away_team:
            print("‚ùå Hiba: --home-team √©s --away-team argumentumok sz√ºks√©gesek!")
            print("P√©lda: python cli.py --predict --home-team 83 --away-team 86")
            return

        try:
            # Modell bet√∂lt√©se
            if os.path.exists('models'):
                predictor.load_models()
            else:
                print("‚ùå Nincs betan√≠tott modell! Futtasd el≈ësz√∂r: --train")
                return

            # Predikci√≥
            prediction = predictor.predict_match(args.home_team, args.away_team, args.league)

            # Eredm√©ny megjelen√≠t√©se
            home_name = predictor.get_team_name(args.home_team)
            away_name = predictor.get_team_name(args.away_team)

            print(f"\nüèÜ MECCS EL≈êREJELZ√âS")
            print("=" * 60)
            print(f"üè† Hazai csapat: {home_name}")
            print(f"‚úàÔ∏è  Vend√©g csapat: {away_name}")
            print("-" * 60)

            probs = prediction['result_probabilities']
            print(f"üìä EREDM√âNY VAL√ìSZ√çN≈∞S√âGEK:")
            print(f"   üè† Hazai gy≈ëzelem: {probs['home_win']}%")
            print(f"   ü§ù D√∂ntetlen:     {probs['draw']}%")
            print(f"   ‚úàÔ∏è  Vend√©g gy≈ëzelem: {probs['away_win']}%")

            print(f"\nüéØ EL≈êREJELZETT EREDM√âNY: ", end="")
            if prediction['predicted_result'] == 'H':
                print(f"üè† Hazai gy≈ëzelem")
            elif prediction['predicted_result'] == 'D':
                print(f"ü§ù D√∂ntetlen")
            else:
                print(f"‚úàÔ∏è Vend√©g gy≈ëzelem")

            print(f"\n‚öΩ V√ÅRHAT√ì G√ìLOK √ñSSZESEN: {prediction['expected_total_goals']}")
            print(f"üìà MEGB√çZHAT√ìS√ÅG: {prediction['confidence']}%")

            # Tippek
            print(f"\nüí° FOGAD√ÅSI TIPPEK:")
            max_prob = max(probs.values())
            if max_prob > 50:
                print(f"   üî• Er≈ës tip: {max_prob}% es√©llyel")
            elif max_prob > 40:
                print(f"   ‚ö° K√∂zepes tip: {max_prob}% es√©llyel")
            else:
                print(f"   ‚ö†Ô∏è  Bizonytalan meccs: max {max_prob}% es√©ly")

            if prediction['expected_total_goals'] > 2.5:
                print(f"   ‚öΩ Over 2.5 g√≥l: Val√≥sz√≠n≈± ({prediction['expected_total_goals']} v√°rhat√≥)")
            else:
                print(f"   üõ°Ô∏è  Under 2.5 g√≥l: Val√≥sz√≠n≈± ({prediction['expected_total_goals']} v√°rhat√≥)")

        except Exception as e:
            print(f"‚ùå Hiba a predikci√≥ sor√°n: {e}")
            return

    if args.fetch_upcoming:
        try:
            data_provider = FootballDataProvider()
            upcoming_matches = data_provider.fetch_upcoming_matches(args.days_ahead)

            if upcoming_matches.empty:
                print("Nincsenek k√∂zelg≈ë meccsek.")
            else:
                print(f"J√∂v≈ëbeli meccsek ({args.days_ahead} napon bel√ºl):")
                print("-" * 50)
                for _, match in upcoming_matches.iterrows():
                    home_team = predictor.get_team_name(match['homeTeam'])
                    away_team = predictor.get_team_name(match['awayTeam'])
                    print(f"{match['date']}: {home_team} vs {away_team}")
        except Exception as e:
            print(f"‚ùå Hiba a j√∂v≈ëbeli meccsek lek√©r√©se sor√°n: {e}")
            return

    if args.predict_upcoming:
        try:
            if os.path.exists('models'):
                predictor.load_models()
            else:
                print("‚ùå Nincs betan√≠tott modell! Futtasd el≈ësz√∂r: --train")
                return

            data_provider = FootballDataProvider()
            upcoming_matches = data_provider.fetch_upcoming_matches(args.days_ahead)

            if upcoming_matches.empty:
                print("Nincsenek k√∂zelg≈ë meccsek a predikci√≥hoz.")
            else:
                print(f"J√∂v≈ëbeli meccsek predikci√≥ja ({args.days_ahead} napon bel√ºl):")
                print("-" * 50)
                for _, match in upcoming_matches.iterrows():
                    prediction = predictor.predict_match(match['homeTeam'], match['awayTeam'], match.get('leagueId'))

                    home_team = predictor.get_team_name(match['homeTeam'])
                    away_team = predictor.get_team_name(match['awayTeam'])

                    print(f"\n{home_team} vs {away_team}:")
                    probs = prediction['result_probabilities']
                    print(f"   üè† Hazai gy≈ëzelem: {probs['home_win']}%")
                    print(f"   ü§ù D√∂ntetlen:     {probs['draw']}%")
                    print(f"   ‚úàÔ∏è  Vend√©g gy≈ëzelem: {probs['away_win']}%")
        except Exception as e:
            print(f"‚ùå Hiba a j√∂v≈ëbeli meccsek predikci√≥ja sor√°n: {e}")
            return

    if args.scrape_matches:
        print("üï∑Ô∏è  Web scraping j√∂v≈ëbeli meccsekhez...")
        scraper = FootballScraper()
        matches = scraper.get_upcoming_matches(days_ahead=args.days_ahead)

        if not matches.empty:
            print(f"‚úÖ {len(matches)} meccs tal√°lva web scraping-gel!")
            print("\nTal√°lt meccsek:")
            print("-" * 60)
            for _, match in matches.head(10).iterrows():
                print(f"üìÖ {match['datetime'].strftime('%Y-%m-%d %H:%M')} | {match['home_team_name']} vs {match['away_team_name']} ({match['source']})")

            # Ment√©s CSV-be
            matches.to_csv('scraped_matches.csv', index=False)
            print(f"\nüíæ Meccsek elmentve: scraped_matches.csv")
        else:
            print("‚ùå Nem tal√°ltam meccseket")
        return

    if args.predict_scraped:
        print("üîÆ Scraped meccsekre predikci√≥k k√©sz√≠t√©se...")

        # Modell bet√∂lt√©se
        predictor = FootballPredictor(fixtures_path, teams_path)
        predictor.load_data()

        if not os.path.exists('models'):
            print("‚ùå Nincs betan√≠tott modell! Futtasd el≈ësz√∂r: --train")
            return

        predictor.load_models()

        # Web scraping √©s predikci√≥k
        scraper = FootballScraper()
        predictions = scraper.get_predictions_for_scraped_matches(predictor)

        if predictions:
            print(f"\nüéØ {len(predictions)} predikci√≥ elk√©sz√ºlt!")
            print("=" * 80)

            for pred in predictions:
                match_info = pred['match_info']
                probs = pred['result_probabilities']

                print(f"\nüèÜ {match_info['home_team_name']} vs {match_info['away_team_name']}")
                print(f"üìÖ {match_info['datetime'].strftime('%Y-%m-%d %H:%M')} | {match_info['competition']} ({match_info['source']})")
                print(f"üìä üè† {probs['home_win']}% | ü§ù {probs['draw']}% | ‚úàÔ∏è {probs['away_win']}%")
                print(f"‚öΩ V√°rhat√≥ g√≥lok: {pred['expected_total_goals']}")

                if pred['predicted_result'] == 'H':
                    print(f"üéØ Tipp: Hazai gy≈ëzelem ({pred['confidence']}% biztos)")
                elif pred['predicted_result'] == 'D':
                    print(f"üéØ Tipp: D√∂ntetlen ({pred['confidence']}% biztos)")
                else:
                    print(f"üéØ Tipp: Vend√©g gy≈ëzelem ({pred['confidence']}% biztos)")
                print("-" * 60)
        else:
            print("‚ùå Nem siker√ºlt predikci√≥t k√©sz√≠teni")
        return

    if args.summer_matches:
        print("‚òÄÔ∏è Ny√°ri meccsek predikci√≥i...")

        # Modell bet√∂lt√©se
        predictor = FootballPredictor(fixtures_path, teams_path)
        predictor.load_data()

        if not os.path.exists('models'):
            print("‚ùå Nincs betan√≠tott modell! Futtasd el≈ësz√∂r: --train")
            return

        predictor.load_models()

        # Ny√°ri meccsek scraping √©s predikci√≥k
        scraper = SimpleFootballScraper()
        predictions = scraper.predict_summer_matches(predictor)

        if predictions:
            print(f"\nüéØ √ñSSZEFOGLAL√ì: {len(predictions)} ny√°ri meccs predikci√≥ja elk√©sz√ºlt!")
            print("\nüí° LEGJOBB TIPPEK:")
            print("=" * 50)

            # Top 5 legbiztosabb tipp
            sorted_preds = sorted(predictions, key=lambda x: x['confidence'], reverse=True)

            for i, pred in enumerate(sorted_preds[:5], 1):
                match_info = pred['match_info']
                probs = pred['result_probabilities']

                print(f"{i}. {match_info['home_team_name']} vs {match_info['away_team_name']}")
                print(f"   üìÖ {match_info['datetime'].strftime('%Y-%m-%d %H:%M')}")

                if pred['predicted_result'] == 'H':
                    result_text = f"üè† Hazai gy≈ëzelem ({probs['home_win']}%)"
                elif pred['predicted_result'] == 'D':
                    result_text = f"ü§ù D√∂ntetlen ({probs['draw']}%)"
                else:
                    result_text = f"‚úàÔ∏è Vend√©g gy≈ëzelem ({probs['away_win']}%)"

                print(f"   üéØ {result_text} - {pred['confidence']}% biztos")
                print()
        else:
            print("‚ùå Nem siker√ºlt predikci√≥t k√©sz√≠teni")
        return

    if args.hybrid_matches:
        print("üîÑ Hibrid adatforr√°s: API + Scraping + Re√°lis Mock...")

        # Modell bet√∂lt√©se
        predictor = FootballPredictor(fixtures_path, teams_path)
        predictor.load_data()

        if not os.path.exists('models'):
            print("‚ùå Nincs betan√≠tott modell! Futtasd el≈ësz√∂r: --train")
            return

        predictor.load_models()

        # Hibrid adatforr√°s haszn√°lata
        data_source = HybridFootballDataSource()
        upcoming_matches = data_source.get_upcoming_matches(days_ahead=args.days_ahead)

        if not upcoming_matches.empty:
            print(f"\nüìä {len(upcoming_matches)} meccs feldolgoz√°sa...")
            print("=" * 80)

            successful_predictions = 0
            total_matches = len(upcoming_matches)

            for idx, match in upcoming_matches.iterrows():
                try:
                    # Csapat ID-k keres√©se n√©v alapj√°n
                    home_team_id = predictor.find_team_id_by_name(match['home_team'])
                    away_team_id = predictor.find_team_id_by_name(match['away_team'])

                    if home_team_id and away_team_id:
                        prediction = predictor.predict_match(home_team_id, away_team_id)

                        print(f"\nüìÖ {match.get('date', match.get('time', 'TBD'))}")
                        print(f"üè† {match['home_team']} vs ‚úàÔ∏è {match['away_team']}")
                        print(f"üìä Forr√°s: {match['source']}")

                        if prediction['predicted_result'] == 'H':
                            result_text = f"üè† Hazai gy≈ëzelem"
                        elif prediction['predicted_result'] == 'D':
                            result_text = f"ü§ù D√∂ntetlen"
                        else:
                            result_text = f"‚úàÔ∏è Vend√©g gy≈ëzelem"

                        print(f"üéØ Predikci√≥: {result_text} ({prediction['confidence']}% biztos)")

                        # V√°rhat√≥ g√≥lok (a modell a total goals-t adja vissza)
                        total_goals = prediction['expected_total_goals']
                        avg_home_goals = total_goals * 0.55  # Hazai el≈ëny kb. 55%-40%
                        avg_away_goals = total_goals * 0.45

                        print(f"‚öΩ V√°rhat√≥ g√≥lok: {avg_home_goals:.1f} - {avg_away_goals:.1f} (√∂sszesen: {total_goals:.1f})")

                        # Over/Under tipp
                        if total_goals > 2.5:
                            print(f"üìà Over 2.5 g√≥l ({total_goals:.1f} v√°rhat√≥ g√≥l)")
                        else:
                            print(f"üìâ Under 2.5 g√≥l ({total_goals:.1f} v√°rhat√≥ g√≥l)")

                        print(f"üîç Liga: {match.get('league', 'N/A')}")
                        print("-" * 60)

                        successful_predictions += 1

                    else:
                        print(f"‚ùå Nem tal√°lom: {match['home_team']} vs {match['away_team']}")

                except Exception as e:
                    print(f"‚ùå Hiba {match['home_team']} vs {match['away_team']}: {e}")

            print(f"\n‚úÖ √ñsszesen {successful_predictions}/{total_matches} meccs feldolgozva")

            if successful_predictions > 0:
                print("\nüí° HASZN√ÅLATI TIPPEK:")
                print("‚Ä¢ Magasabb confidence (>60%) = megb√≠zhat√≥bb tipp")
                print("‚Ä¢ Over/Under tippek gyakran jobbak mint eredm√©ny tippek")
                print("‚Ä¢ Ismert csapatokra (Premier League, La Liga) pontosabb predikci√≥k")
                print("‚Ä¢ Kombin√°lj t√∂bb faktort a v√©gleges d√∂nt√©s el≈ëtt!")

        else:
            print("‚ùå Nem siker√ºlt meccseket tal√°lni a hibrid forr√°sb√≥l")
        return

    if args.betting_analysis:
        print("üí∞ Fogad√°si Strat√©gia Elemz√©s...")
        print(f"üí≥ Kezd≈ë bankroll: ${args.bankroll:.2f}")

        # Modell bet√∂lt√©se
        predictor = FootballPredictor(fixtures_path, teams_path)
        predictor.load_data()

        if not os.path.exists('models'):
            print("‚ùå Nincs betan√≠tott modell! Futtasd el≈ësz√∂r: --train")
            return

        predictor.load_models()

        # Fogad√°si strat√©gia inicializ√°l√°sa
        betting_strategy = BettingStrategy(starting_bankroll=args.bankroll)

        # Hibrid adatforr√°s haszn√°lata
        data_source = HybridFootballDataSource()
        upcoming_matches = data_source.get_upcoming_matches(days_ahead=args.days_ahead)

        if not upcoming_matches.empty:
            print(f"\nüìä {len(upcoming_matches)} meccs fogad√°si elemz√©se...")
            print("=" * 80)

            all_opportunities = []
            successful_analyses = 0

            for idx, match in upcoming_matches.iterrows():
                try:
                    # Csapat ID-k keres√©se
                    home_team_id = predictor.find_team_id_by_name(match['home_team'])
                    away_team_id = predictor.find_team_id_by_name(match['away_team'])

                    if home_team_id and away_team_id:
                        prediction = predictor.predict_match(home_team_id, away_team_id)

                        print(f"\nüéØ {match['home_team']} vs {match['away_team']}")
                        print(f"üìÖ {match.get('date', match.get('time', 'TBD'))} | üìä {match['source']}")

                        # Fogad√°si lehet≈ës√©gek elemz√©se
                        match_info = {
                            'home_team': match['home_team'],
                            'away_team': match['away_team']
                        }

                        opportunities = betting_strategy.evaluate_betting_opportunity(prediction)

                        if opportunities:
                            betting_strategy.print_betting_opportunities(opportunities, match_info)
                            all_opportunities.extend(opportunities)
                            successful_analyses += 1
                        else:
                            print("‚ùå Nincs √©rt√©kes fogad√°si lehet≈ës√©g")

                        print("-" * 60)

                except Exception as e:
                    print(f"‚ùå Hiba {match['home_team']} vs {match['away_team']}: {e}")

            # √ñsszefoglal√≥
            print(f"\nüìà FOGAD√ÅSI √ñSSZEFOGLAL√ì:")
            print("=" * 50)
            print(f"‚úÖ Elemzett meccsek: {successful_analyses}/{len(upcoming_matches)}")
            print(f"üéØ √ârt√©kes fogad√°si lehet≈ës√©gek: {len(all_opportunities)}")

            if all_opportunities:
                total_recommended = sum(opp['recommended_bet'] for opp in all_opportunities)
                total_potential = sum(opp['potential_profit'] for opp in all_opportunities)
                avg_edge = sum(opp['edge_percentage'] for opp in all_opportunities) / len(all_opportunities)

                print(f"üí∞ √ñsszesen aj√°nlott t√©t: ${total_recommended:.2f}")
                print(f"üéÅ √ñsszesen potenci√°lis profit: ${total_potential:.2f}")
                print(f"üìä √Åtlagos edge: {avg_edge:+.1f}%")
                print(f"üí≥ Bankroll kihaszn√°lts√°g: {(total_recommended/args.bankroll)*100:.1f}%")

                # Top 3 legjobb lehet≈ës√©g
                best_opportunities = sorted(all_opportunities, key=lambda x: x['edge_percentage'], reverse=True)[:3]

                print(f"\nüèÜ TOP 3 LEGJOBB LEHET≈êS√âG:")
                for i, opp in enumerate(best_opportunities, 1):
                    print(f"{i}. {opp['selection_name']} | Edge: {opp['edge_percentage']:+.1f}% | T√©t: ${opp['recommended_bet']:.2f}")

                print(f"\nüí° STRAT√âGIAI JAVASLATOK:")
                print("‚Ä¢ Csak pozit√≠v edge-dzsel fogadj (+)")
                print("‚Ä¢ Sz√≥rj: ne tedd az √∂sszes p√©nzt egy meccsre")
                print("‚Ä¢ Over/Under tippek gyakran stabilabbak")
                print("‚Ä¢ Magasabb confidence = alacsonyabb kock√°zat")
                print("‚Ä¢ Kelly Criterion alap√∫ t√©tm√©ret = hossz√∫ t√°v√∫ profit")

            else:
                print("‚ùå Nem tal√°ltam √©rt√©kes fogad√°si lehet≈ës√©geket")
                print("üí° Pr√≥b√°ld m√°skor, vagy √°ll√≠tsd a param√©tereket!")

        else:
            print("‚ùå Nem siker√ºlt meccseket tal√°lni")
        return

    if not any([args.train, args.predict, args.list_teams, args.search_team, args.fetch_upcoming, args.predict_upcoming, args.setup_api, args.summer_matches, args.hybrid_matches, args.betting_analysis]):
        print("Futball Predikci√≥s Rendszer üèÜ")
        print("=" * 40)
        print("Haszn√°lat:")
        print("  python cli.py --train                           # Modellek tan√≠t√°sa")
        print("  python cli.py --predict --home-team 83 --away-team 86  # Barcelona vs Real Madrid")
        print("  python cli.py --list-teams                      # Csapatok list√°z√°sa")
        print("  python cli.py --search-team 'Barcelona'         # Csapat keres√©se")
        print("  python cli.py --fetch-upcoming --days-ahead 3  # J√∂v≈ëbeli meccsek let√∂lt√©se")
        print("  python cli.py --predict-upcoming --days-ahead 3 # J√∂v≈ëbeli meccsek predikci√≥ja")
        print("  python cli.py --setup-api                      # API kulcsok be√°ll√≠t√°sa")
        print("  python cli.py --summer-matches                 # Ny√°ri meccsek (SimpleFootballScraper)")
        print("  python cli.py --hybrid-matches                 # Hibrid forr√°s (API + Scraping + Mock)")
        print("  python cli.py --betting-analysis               # Fogad√°si strat√©gia + ROI elemz√©s")
        print("\nP√©ld√°k:")
        print("  python cli.py --search-team 'Real'")
        print("  python cli.py --predict --home-team 83 --away-team 86 --league 140")
        print("  python cli.py --fetch-upcoming --days-ahead 7")
        print("  python cli.py --predict-upcoming --days-ahead 7")
        print("  python cli.py --hybrid-matches --days-ahead 3")
        print("  python cli.py --betting-analysis --bankroll 500 --days-ahead 5")

if __name__ == "__main__":
    main()
