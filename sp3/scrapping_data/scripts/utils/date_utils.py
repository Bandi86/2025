#!/usr/bin/env python3
"""
D√°tum m≈±veletek seg√©deszk√∂z√∂k
===========================

D√°tum konvert√°l√°shoz √©s manipul√°ci√≥hoz sz√ºks√©ges f√ºggv√©nyek.
"""

from datetime import datetime, date, timedelta
import pytz
from typing import Optional, List
import os

def get_today_date() -> date:
    """Mai d√°tum lek√©r√©se helyi id≈ëz√≥n√°ban."""
    return datetime.now().date()

def get_today_string() -> str:
    """
    Mai d√°tum YYYY-MM-DD form√°tumban

    Returns:
        str: Mai d√°tum
    """
    return datetime.now().strftime("%Y-%m-%d")

def get_date_string(target_date: Optional[date] = None, format_str: str = "%Y-%m-%d") -> str:
    """
    D√°tum konvert√°l√°sa sz√∂vegform√°tumba.

    Args:
        target_date: A form√°zand√≥ d√°tum (alap√©rtelmez√©s szerint a mai nap)
        format_str: A d√°tum form√°tuma

    Returns:
        str: Form√°zott d√°tum sz√∂veg
    """
    if target_date is None:
        target_date = get_today_date()
    return target_date.strftime(format_str)

def parse_date_string(date_str: str, format_str: str = "%Y-%m-%d") -> date:
    """
    D√°tum sz√∂veg elemz√©se d√°tum objektumm√°.

    Args:
        date_str: A d√°tum sz√∂veg, amit elemezni kell
        format_str: Az elemz√©shez haszn√°lt form√°tum

    Returns:
        date: Elemzett d√°tum objektum
    """
    return datetime.strptime(date_str, format_str).date()

def format_date_for_path(date_str: str) -> str:
    """
    D√°tum form√°z√°sa √∫tvonal sz√°m√°ra (YYYY/MM/DD)

    Args:
        date_str (str): D√°tum YYYY-MM-DD form√°tumban

    Returns:
        str: Form√°zott √∫tvonal
    """
    date_obj = parse_date_string(date_str)
    return os.path.join(str(date_obj.year), str(date_obj.month).zfill(2), str(date_obj.day).zfill(2))

def format_date_for_filename(date_str: str) -> str:
    """
    D√°tum form√°z√°sa f√°jln√©v sz√°m√°ra (YYYYMMDD)

    Args:
        date_str (str): D√°tum YYYY-MM-DD form√°tumban

    Returns:
        str: Form√°zott f√°jln√©v
    """
    date_obj = parse_date_string(date_str)
    return date_obj.strftime("%Y%m%d")

def is_valid_date(date_str: str) -> bool:
    """
    D√°tum valid√°l√°sa

    Args:
        date_str (str): D√°tum YYYY-MM-DD form√°tumban

    Returns:
        bool: √ârv√©nyes d√°tum
    """
    try:
        parse_date_string(date_str)
        return True
    except ValueError:
        return False

def get_date_range(start_date: date, end_date: date) -> List[date]:
    """
    D√°tum tartom√°ny gener√°l√°sa

    Args:
        start_date (date): Kezd≈ë d√°tum
        end_date (date): V√©gs≈ë d√°tum

    Returns:
        list: D√°tumok list√°ja
    """
    dates = []
    current_date = start_date
    while current_date <= end_date:
        dates.append(current_date)
        current_date += timedelta(days=1)
    return dates

def get_data_directory_path(base_path: str, target_date: Optional[date] = None) -> str:
    """
    Adatk√∂nyvt√°r √∫tvonal√°nak gener√°l√°sa egy adott d√°tumhoz.

    Args:
        base_path: Alap adatk√∂nyvt√°r √∫tvonala
        target_date: C√©l d√°tum (alap√©rtelmez√©s szerint a mai nap)

    Returns:
        str: Teljes √∫tvonal a d√°tum specifikus k√∂nyvt√°rhoz
    """
    if target_date is None:
        target_date = get_today_date()

    year = target_date.strftime("%Y")
    month = target_date.strftime("%m")
    day = target_date.strftime("%d")

    return os.path.join(base_path, "data", year, month, day, "matches")

def ensure_data_directory(base_path: str, target_date: Optional[date] = None) -> str:
    """
    Biztos√≠tja, hogy az adatk√∂nyvt√°r l√©tezik a c√©ld√°tumhoz.

    Args:
        base_path: Alap adatk√∂nyvt√°r √∫tvonala
        target_date: C√©l d√°tum (alap√©rtelmez√©s szerint a mai nap)

    Returns:
        str: A l√©trehozott k√∂nyvt√°r √∫tvonala
    """
    dir_path = get_data_directory_path(base_path, target_date)
    os.makedirs(dir_path, exist_ok=True)
    return dir_path

def convert_timezone(dt: datetime, from_tz: str, to_tz: str = "UTC") -> datetime:
    """
    D√°tum √©s id≈ë √°tkonvert√°l√°sa egyik id≈ëz√≥n√°b√≥l a m√°sikba.

    Args:
        dt: D√°tum √©s id≈ë objektum
        from_tz: Forr√°s id≈ëz√≥na neve
        to_tz: C√©l id≈ëz√≥na neve

    Returns:
        datetime: √Åtkonvert√°lt d√°tum √©s id≈ë
    """
    source_tz = pytz.timezone(from_tz)
    target_tz = pytz.timezone(to_tz)

    # Lokaliz√°l√°s, ha naiv d√°tum √©s id≈ë
    if dt.tzinfo is None:
        dt = source_tz.localize(dt)
    else:
        dt = dt.astimezone(source_tz)

    return dt.astimezone(target_tz)

def get_match_time_formats() -> List[str]:
    """
    A m√©rk≈ëz√©s adatokban haszn√°lt gyakori id≈ëform√°tumok lek√©r√©se.

    Returns:
        list: Id≈ëform√°tumok list√°ja
    """
    return [
        "%H:%M",      # 15:30
        "%H.%M",      # 15.30
        "%I:%M %p",   # 3:30 PM
        "%H:%M:%S",   # 15:30:00
    ]

def parse_match_time(time_str: str) -> Optional[datetime]:
    """
    M√©rk≈ëz√©s id≈ë sz√∂veg√©nek elemz√©se d√°tum √©s id≈ë objektumm√°.

    Args:
        time_str: Az id≈ë sz√∂veg, amit elemezni kell

    Returns:
        datetime: Elemzett d√°tum √©s id≈ë objektum vagy None, ha az elemz√©s nem siker√ºl
    """
    time_formats = get_match_time_formats()

    for fmt in time_formats:
        try:
            # Id≈ë elemz√©se √©s kombin√°l√°sa a mai d√°tummal
            time_obj = datetime.strptime(time_str, fmt).time()
            return datetime.combine(get_today_date(), time_obj)
        except ValueError:
            continue

    return None

def main():
    """D√°tum utils teszt"""
    print("üìÖ D√°tum utils teszt...")
    print(f"Mai d√°tum: {get_today_string()}")

    # TODO: Tov√°bbi tesztek
    pass

if __name__ == "__main__":
    main()
