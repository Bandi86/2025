#!/home/bandi/Documents/code/2025/sp3/.venv/bin/python3

"""
Comprehensive data pipeline validation and monitoring script.
Futtatja az √∂sszes fontosabb elemz√©st √©s gener√°l egy √°tfog√≥ jelent√©st.
"""

import os
import sys
import subprocess
import json
from datetime import datetime
from typing import Dict, Any

def run_script(script_path: str, description: str) -> Dict[str, Any]:
    """Run a validation script and capture its results"""
    print(f"\nüîÑ {description}...")

    try:
        # Run the script
        result = subprocess.run(
            ['/home/bandi/Documents/code/2025/sp3/.venv/bin/python', script_path],
            capture_output=True,
            text=True,
            cwd='/home/bandi/Documents/code/2025/sp3'
        )

        return {
            'success': result.returncode == 0,
            'stdout': result.stdout,
            'stderr': result.stderr,
            'returncode': result.returncode
        }
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'stdout': '',
            'stderr': '',
            'returncode': -1
        }

def load_report(file_path: str) -> Dict[str, Any]:
    """Load a JSON report file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        return {'error': str(e)}

def main():
    print("=== SP3 DATA PIPELINE COMPREHENSIVE VALIDATION ===")
    print(f"Id≈ëpont: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # Scripts to run
    scripts = [
        {
            'path': 'scripts/quick_db_validation.py',
            'description': 'Database integrit√°s ellen≈ërz√©s',
            'report_file': None
        },
        {
            'path': 'scripts/compare_json_vs_db.py',
            'description': 'JSON vs Database √∂sszehasonl√≠t√°s',
            'report_file': 'reports/json_vs_db_comparison.json'
        },
        {
            'path': 'scripts/analyze_weekly_duplicates.py',
            'description': 'Heteken bel√ºli duplik√°tumok elemz√©se',
            'report_file': 'reports/weekly_duplicates_analysis.json'
        }
    ]

    # Run all scripts
    results = {}
    for script in scripts:
        script_name = os.path.basename(script['path'])
        results[script_name] = run_script(script['path'], script['description'])

        if results[script_name]['success']:
            print(f"‚úÖ {script['description']} - SIKERES")
        else:
            print(f"‚ùå {script['description']} - HIBA")
            print(f"   Error: {results[script_name].get('stderr', 'Unknown error')}")

    # Load and summarize reports
    print(f"\n=== JELENT√âSEK √ñSSZEGZ√âSE ===")

    json_vs_db = {}
    weekly_dups = {}

    # JSON vs DB comparison
    try:
        json_vs_db = load_report('/home/bandi/Documents/code/2025/sp3/reports/json_vs_db_comparison.json')
        if 'summary' in json_vs_db:
            summary = json_vs_db['summary']
            print(f"\nüìä JSON vs Database:")
            print(f"   JSON meccsek: {summary.get('json_matches', 'N/A')}")
            print(f"   DB meccsek: {summary.get('db_matches', 'N/A')}")
            print(f"   Lefedetts√©g: {summary.get('data_coverage_percent', 0):.1f}%")
            print(f"   Hi√°nyz√≥ (JSON-ban): {summary.get('only_in_json', 'N/A')}")
            print(f"   Extra (DB-ben): {summary.get('only_in_db', 'N/A')}")
    except Exception as e:
        print(f"   Hiba a JSON vs DB jelent√©s olvas√°s√°n√°l: {e}")

    # Weekly duplicates analysis
    try:
        weekly_dups = load_report('/home/bandi/Documents/code/2025/sp3/reports/weekly_duplicates_analysis.json')
        if 'summary' in weekly_dups:
            summary = weekly_dups['summary']
            print(f"\nüîÑ Heteken bel√ºli duplik√°tumok:")
            print(f"   √ñsszes meccs: {summary.get('total_matches', 'N/A')}")
            print(f"   Egyedi ID-k: {summary.get('unique_match_ids', 'N/A')}")
            print(f"   Duplik√°tumok: {summary.get('duplicates_count', 'N/A')}")
            print(f"   √ârt√©kes duplik√°tumok: {summary.get('valuable_duplicates_count', 'N/A')}")
    except Exception as e:
        print(f"   Hiba a duplik√°tum jelent√©s olvas√°s√°n√°l: {e}")

    # Overall health assessment
    print(f"\n=== RENDSZER √ÅLLAPOT √âRT√âKEL√âS ===")

    successful_scripts = sum(1 for result in results.values() if result['success'])
    total_scripts = len(results)

    health_score = (successful_scripts / total_scripts) * 100 if total_scripts > 0 else 0

    if health_score == 100:
        status = "üü¢ EG√âSZS√âGES"
        message = "Minden ellen≈ërz√©s sikeres. A rendszer optim√°lisan m≈±k√∂dik."
    elif health_score >= 80:
        status = "üü° FIGYELEM"
        message = "A legt√∂bb ellen≈ërz√©s sikeres, de vannak kisebb probl√©m√°k."
    else:
        status = "üî¥ KRITIKUS"
        message = "T√∂bb ellen≈ërz√©s sikertelen. Azonnali beavatkoz√°s sz√ºks√©ges."

    print(f"√Ållapot: {status}")
    print(f"Sikeress√©gi ar√°ny: {health_score:.0f}% ({successful_scripts}/{total_scripts})")
    print(f"√úzenet: {message}")

    # Recommendations
    print(f"\n=== AJ√ÅNL√ÅSOK ===")

    if health_score == 100:
        print("‚úÖ Rendszeres monitoroz√°s folytat√°sa")
        print("‚úÖ Hetente futtatni ezt a comprehensive validation-t")
        print("‚úÖ Opcion√°lis: automatiz√°l√°s cron job-bal")
    else:
        print("‚ö†Ô∏è  Sikertelen ellen≈ërz√©sek kivizsg√°l√°sa")
        print("‚ö†Ô∏è  Log f√°jlok √°ttekint√©se")
        print("‚ö†Ô∏è  Backend √©s database kapcsolat ellen≈ërz√©se")

    # Save comprehensive report
    comprehensive_report = {
        'timestamp': datetime.now().isoformat(),
        'health_score': health_score,
        'status': status,
        'script_results': results,
        'successful_scripts': successful_scripts,
        'total_scripts': total_scripts,
        'reports_summary': {
            'json_vs_db': json_vs_db.get('summary', {}),
            'weekly_duplicates': weekly_dups.get('summary', {})
        }
    }

    report_path = '/home/bandi/Documents/code/2025/sp3/reports/comprehensive_validation_report.json'
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(comprehensive_report, f, indent=2, ensure_ascii=False, default=str)

    print(f"\nüìã √Åtfog√≥ jelent√©s mentve: {report_path}")
    print(f"\n=== VALIDATION BEFEJEZVE ===")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"Kritikus hiba: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
