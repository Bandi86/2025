generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite?_pragma=foreign_keys(on)"
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  password     String
  avatar       String?
  isAdmin      Boolean       @default(false)
  isPaid       Boolean       @default(false)
  isBanned     Boolean       @default(false)
  comments     Comment[]
  subscription Subscription?
}

model AdminPosts {
  id        String    @id @default(uuid())
  slug      String    @unique
  title     String
  content   String
  imageurl  String
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model FreeTipps {
  id        String    @id @default(uuid())
  slug      String    @unique
  title     String
  content   String
  comments  Comment[]
  imageurl  String?
  deadline  DateTime
  price     Int       @default(10000)
  prize     Int       @default(0)
  odds      Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PremiumTipps {
  id        String    @id @default(uuid())
  slug      String    @unique
  title     String
  content   String
  comments  Comment[]
  deadline  DateTime
  imageurl  String?
  price     Int       @default(0)
  prize     Int       @default(0)
  odds      Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id            String        @id @default(uuid())
  content       String
  hidden        Boolean       @default(false)
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  post          AdminPosts    @relation(fields: [postId], references: [id])
  postId        String
  freeTipp      FreeTipps?    @relation(fields: [freeTippId], references: [id])
  freeTippId    String?
  premiumTipp   PremiumTipps? @relation(fields: [premiumTippId], references: [id])
  premiumTippId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subscription {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  validUntil DateTime
}

// statistic of betting tipps free
model freeTipsStatistic {
  id             String   @id @default(uuid())
  numberOfTipps  Int      @default(0)
  goodTippNumber Int      @default(0)
  badTippNumber  Int      @default(0)
  AllBet         Int      @default(0)
  WinMoney       Int      @default(0)
  LostMoney      Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
