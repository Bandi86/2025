#!/usr/bin/env python3
"""
üöÄ TOV√ÅBBFEJLESZTETT VAL√ìS IDEJ≈∞ MECCS EL≈êREJELZ≈ê
- Jobb API integr√°ci√≥
- T√∂bb forr√°sb√≥l sz√°rmaz√≥ adatok
- Fejlettebb predikci√≥s algoritmus
- Teljesebb csapat t√∂rt√©neti adatok
"""

import requests
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
import os
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import time
import asyncio
import aiohttp
from concurrent.futures import ThreadPoolExecutor

@dataclass
class UpcomingMatch:
    """K√∂zelg≈ë meccs adatai"""
    fixture_id: int
    home_team: str
    away_team: str
    competition: str
    kickoff_time: datetime
    venue: str
    api_data: Dict
    bookmaker_odds: Optional[Dict] = None

@dataclass
class TeamHistoricalData:
    """Tov√°bbfejlesztett csapat t√∂rt√©neti adatok"""
    team_name: str
    last_50_matches: List[Dict]
    avg_goals_scored: float
    avg_goals_conceded: float
    recent_form: List[str]  # W/D/L
    home_performance: Dict
    away_performance: Dict

    # √öj fejlett statisztik√°k
    goal_difference_avg: float
    shots_on_target_avg: float
    possession_avg: float
    cards_avg: float
    corners_avg: float

    # Liga specifikus teljes√≠tm√©ny
    league_performance: Dict
    head_to_head: Dict

class EnhancedLivePredictor:
    """Tov√°bbfejlesztett val√≥s idej≈± meccs el≈ërejelz≈ë"""

    def __init__(self):
        # API kulcsok
        self.api_key = os.getenv('API_SPORTS_KEY')
        self.football_data_key = os.getenv('FOOTBALL_DATA_API_KEY')
        self.sportmonks_key = os.getenv('SPORTMONKS_API_KEY')

        # API URL-ek
        self.api_sports_url = "https://api-football-v1.p.rapidapi.com/v3"
        self.football_data_url = "https://api.football-data.org/v4"
        self.sportmonks_url = "https://api.sportmonks.com/v3"

        # Cache √©s konfigur√°ci√≥
        self.cache_dir = "data/enhanced_live_cache"
        os.makedirs(self.cache_dir, exist_ok=True)

        # T√°mogatott lig√°k √©s API ID-k
        self.league_mappings = {
            'premier_league': {
                'api_sports': 39,
                'football_data': 'PL',
                'sportmonks': 8,
                'espn': 'eng.1'
            },
            'la_liga': {
                'api_sports': 140,
                'football_data': 'PD',
                'sportmonks': 564,
                'espn': 'esp.1'
            },
            'bundesliga': {
                'api_sports': 78,
                'football_data': 'BL1',
                'sportmonks': 82,
                'espn': 'ger.1'
            },
            'serie_a': {
                'api_sports': 135,
                'football_data': 'SA',
                'sportmonks': 384,
                'espn': 'ita.1'
            },
            'ligue_1': {
                'api_sports': 61,
                'football_data': 'FL1',
                'sportmonks': 301,
                'espn': 'fra.1'
            },
            'champions_league': {
                'api_sports': 2,
                'football_data': 'CL',
                'sportmonks': 2,
                'espn': 'uefa.champions'
            },
            'mls': {
                'api_sports': 253,
                'espn': 'usa.1',
                'sportmonks': 1563
            },
            'brasileirao': {
                'api_sports': 71,
                'espn': 'bra.1',
                'sportmonks': 384
            }
        }

    async def get_next_4_hours_matches_async(self) -> List[UpcomingMatch]:
        """Aszinkron m√≥don lek√©rdezi a k√∂vetkez≈ë 4 √≥ra meccseit"""
        print("‚è∞ K√ñVETKEZ≈ê 4 √ìRA MECCSEIT KERESEM (FEJLETT M√ìDBAN)...")
        print("=" * 60)

        now = datetime.now(timezone.utc)
        end_time = now + timedelta(hours=4)

        all_matches = []

        # P√°rhuzamos API lek√©rdez√©sek
        async with aiohttp.ClientSession() as session:
            tasks = []

            if self.api_key:
                tasks.append(self._fetch_api_sports_matches_async(session, now, end_time))

            if self.football_data_key:
                tasks.append(self._fetch_football_data_matches_async(session, now, end_time))

            # Ingyenes API-k
            tasks.append(self._fetch_espn_matches_async(session, now, end_time))
            tasks.append(self._fetch_free_apis_matches_async(session, now, end_time))

            # Minden API lek√©rdez√©s p√°rhuzamosan
            results = await asyncio.gather(*tasks, return_exceptions=True)

            for result in results:
                if isinstance(result, list):
                    all_matches.extend(result)
                elif isinstance(result, Exception):
                    print(f"   ‚ö†Ô∏è API hiba: {result}")

        # Duplik√°ci√≥k elt√°vol√≠t√°sa √©s b≈ëv√≠tett adatokkal kieg√©sz√≠t√©s
        unique_matches = self._deduplicate_and_enhance_matches(all_matches)

        print(f"‚úÖ {len(unique_matches)} meccs tal√°lhat√≥ a k√∂vetkez≈ë 4 √≥r√°ban")
        return unique_matches

    async def _fetch_api_sports_matches_async(self, session: aiohttp.ClientSession,
                                            start_time: datetime, end_time: datetime) -> List[UpcomingMatch]:
        """API-Sports aszinkron lek√©rdez√©s"""
        matches = []

        print("üì° API-Sports lek√©rdez√©s (aszinkron)...")

        headers = {
            'X-RapidAPI-Key': self.api_key,
            'X-RapidAPI-Host': 'api-football-v1.p.rapidapi.com'
        }

        try:
            today = start_time.strftime('%Y-%m-%d')
            url = f"{self.api_sports_url}/fixtures"
            params = {'date': today}

            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    fixtures = data.get('response', [])

                    for fixture in fixtures:
                        kickoff_str = fixture['fixture']['date']
                        kickoff_time = datetime.fromisoformat(kickoff_str.replace('Z', '+00:00'))

                        if start_time <= kickoff_time <= end_time:
                            # Odds lek√©rdez√©se
                            odds = await self._fetch_odds_for_match(session, fixture['fixture']['id'])

                            match = UpcomingMatch(
                                fixture_id=fixture['fixture']['id'],
                                home_team=fixture['teams']['home']['name'],
                                away_team=fixture['teams']['away']['name'],
                                competition=fixture['league']['name'],
                                kickoff_time=kickoff_time,
                                venue=fixture['fixture']['venue']['name'] or 'N/A',
                                api_data=fixture,
                                bookmaker_odds=odds
                            )
                            matches.append(match)

                    print(f"   ‚úÖ {len(matches)} meccs API-Sports-b√≥l")

        except Exception as e:
            print(f"   ‚ùå API-Sports hiba: {e}")

        return matches

    async def _fetch_odds_for_match(self, session: aiohttp.ClientSession, fixture_id: int) -> Optional[Dict]:
        """Fogad√≥iroda odds lek√©rdez√©se egy meccshez"""
        if not self.api_key:
            return None

        headers = {
            'X-RapidAPI-Key': self.api_key,
            'X-RapidAPI-Host': 'api-football-v1.p.rapidapi.com'
        }

        try:
            url = f"{self.api_sports_url}/odds"
            params = {'fixture': fixture_id}

            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    odds_data = data.get('response', [])

                    if odds_data:
                        # Legjobb odds kiv√°laszt√°sa
                        best_odds = self._process_bookmaker_odds(odds_data)
                        return best_odds

        except Exception as e:
            print(f"   ‚ö†Ô∏è Odds hiba meccs {fixture_id}: {e}")

        return None

    def _process_bookmaker_odds(self, odds_data: List) -> Dict:
        """Fogad√≥iroda odds feldolgoz√°sa"""
        if not odds_data:
            return {}

        # Az els≈ë bookmaker adatait haszn√°ljuk
        bookmaker_data = odds_data[0]

        for market in bookmaker_data.get('bookmakers', [{}])[0].get('bets', []):
            if market['name'] == 'Match Winner':
                values = market['values']
                return {
                    'home_odds': float(values[0]['odd']),
                    'draw_odds': float(values[1]['odd']),
                    'away_odds': float(values[2]['odd']),
                    'bookmaker': bookmaker_data.get('bookmakers', [{}])[0].get('name', 'Unknown')
                }

        return {}

    async def _fetch_espn_matches_async(self, session: aiohttp.ClientSession,
                                      start_time: datetime, end_time: datetime) -> List[UpcomingMatch]:
        """ESPN API aszinkron lek√©rdez√©s t√∂bb lig√°b√≥l"""
        matches = []

        print("üÜì ESPN API lek√©rdez√©s (t√∂bbf√©le liga)...")

        espn_leagues = [
            ('MLS', 'https://site.api.espn.com/apis/site/v2/sports/soccer/usa.1/scoreboard'),
            ('Premier League', 'https://site.api.espn.com/apis/site/v2/sports/soccer/eng.1/scoreboard'),
            ('La Liga', 'https://site.api.espn.com/apis/site/v2/sports/soccer/esp.1/scoreboard'),
            ('Bundesliga', 'https://site.api.espn.com/apis/site/v2/sports/soccer/ger.1/scoreboard'),
            ('Serie A', 'https://site.api.espn.com/apis/site/v2/sports/soccer/ita.1/scoreboard'),
        ]

        for league_name, url in espn_leagues:
            try:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        events = data.get('events', [])

                        for event in events:
                            if event.get('status', {}).get('type', {}).get('name') == 'STATUS_SCHEDULED':
                                kickoff_str = event['date']
                                kickoff_time = datetime.fromisoformat(kickoff_str.replace('Z', '+00:00'))

                                if start_time <= kickoff_time <= end_time:
                                    competitors = event['competitions'][0]['competitors']

                                    match = UpcomingMatch(
                                        fixture_id=int(event['id']),
                                        home_team=competitors[0]['team']['displayName'],
                                        away_team=competitors[1]['team']['displayName'],
                                        competition=league_name,
                                        kickoff_time=kickoff_time,
                                        venue=event.get('competitions', [{}])[0].get('venue', {}).get('fullName', 'N/A'),
                                        api_data=event
                                    )
                                    matches.append(match)

            except Exception as e:
                print(f"   ‚ö†Ô∏è ESPN {league_name} hiba: {e}")

        print(f"   ‚úÖ {len(matches)} meccs ESPN-b≈ël")
        return matches

    async def _fetch_free_apis_matches_async(self, session: aiohttp.ClientSession,
                                           start_time: datetime, end_time: datetime) -> List[UpcomingMatch]:
        """Tov√°bbi ingyenes API-k aszinkron lek√©rdez√©se"""
        matches = []

        print("üåê Tov√°bbi ingyenes forr√°sok...")

        # Football-API.com (ingyenes napi limittel)
        try:
            url = "https://api.football-api.com/v1/fixtures"
            params = {'date': start_time.strftime('%Y-%m-%d')}

            async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    data = await response.json()

                    for fixture in data:
                        kickoff_str = fixture['date']
                        kickoff_time = datetime.fromisoformat(kickoff_str)

                        if kickoff_time.tzinfo is None:
                            kickoff_time = kickoff_time.replace(tzinfo=timezone.utc)

                        if start_time <= kickoff_time <= end_time:
                            match = UpcomingMatch(
                                fixture_id=fixture['id'],
                                home_team=fixture['homeTeam']['name'],
                                away_team=fixture['awayTeam']['name'],
                                competition=fixture['league']['name'],
                                kickoff_time=kickoff_time,
                                venue='N/A',
                                api_data=fixture
                            )
                            matches.append(match)

        except Exception as e:
            print(f"   ‚ö†Ô∏è Football-API hiba: {e}")

        print(f"   ‚úÖ {len(matches)} meccs ingyenes forr√°sokb√≥l")
        return matches

    async def _fetch_football_data_matches_async(self, session: aiohttp.ClientSession,
                                               start_time: datetime, end_time: datetime) -> List[UpcomingMatch]:
        """Football-Data.org aszinkron lek√©rdez√©s"""
        matches = []

        print("üì° Football-Data.org lek√©rdez√©s...")

        headers = {'X-Auth-Token': self.football_data_key}

        # T√∂bb liga p√°rhuzamos lek√©rdez√©se
        leagues = ['PL', 'PD', 'BL1', 'SA', 'FL1', 'CL', 'EL']

        for league_code in leagues:
            try:
                url = f"{self.football_data_url}/competitions/{league_code}/matches"
                params = {
                    'status': 'SCHEDULED',
                    'dateFrom': start_time.strftime('%Y-%m-%d'),
                    'dateTo': end_time.strftime('%Y-%m-%d')
                }

                async with session.get(url, headers=headers, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        match_data = data.get('matches', [])

                        for match in match_data:
                            kickoff_str = match['utcDate']
                            kickoff_time = datetime.fromisoformat(kickoff_str.replace('Z', '+00:00'))

                            if start_time <= kickoff_time <= end_time:
                                match_obj = UpcomingMatch(
                                    fixture_id=match['id'],
                                    home_team=match['homeTeam']['name'],
                                    away_team=match['awayTeam']['name'],
                                    competition=match['competition']['name'],
                                    kickoff_time=kickoff_time,
                                    venue='N/A',
                                    api_data=match
                                )
                                matches.append(match_obj)

            except Exception as e:
                print(f"   ‚ö†Ô∏è Football-Data {league_code} hiba: {e}")

        print(f"   ‚úÖ {len(matches)} meccs Football-Data-b√≥l")
        return matches

    def _deduplicate_and_enhance_matches(self, matches: List[UpcomingMatch]) -> List[UpcomingMatch]:
        """Duplik√°ci√≥k elt√°vol√≠t√°sa √©s meccsek b≈ëv√≠t√©se"""
        seen = {}
        unique_matches = []

        for match in matches:
            # Kulcs: csapatok √©s id≈ëpont alapj√°n
            key = f"{match.home_team.lower().replace(' ', '')}vs{match.away_team.lower().replace(' ', '')}_{match.kickoff_time.strftime('%Y%m%d_%H%M')}"

            if key not in seen:
                seen[key] = match
                unique_matches.append(match)
            else:
                # Ha van jobb adat (pl. odds), azt haszn√°ljuk
                existing = seen[key]
                if match.bookmaker_odds and not existing.bookmaker_odds:
                    seen[key] = match
                    unique_matches[unique_matches.index(existing)] = match

        return unique_matches

    async def get_enhanced_team_history_async(self, team_name: str, league_context: Optional[str] = None) -> TeamHistoricalData:
        """Fejlett csapat t√∂rt√©neti adatok aszinkron lek√©rdez√©se"""
        print(f"üìö {team_name} r√©szletes t√∂rt√©neti elemz√©se...")

        # Cache ellen≈ërz√©se
        cache_file = os.path.join(self.cache_dir, f"{team_name.replace(' ', '_')}_enhanced.json")

        if os.path.exists(cache_file):
            cache_age = time.time() - os.path.getmtime(cache_file)
            if cache_age < 1800:  # 30 perces cache
                print(f"   üíæ Fejlett cache-b≈ël bet√∂lt√©s")
                with open(cache_file, 'r') as f:
                    cached_data = json.load(f)
                return self._parse_enhanced_team_data(cached_data)

        # T√∂bbforr√°s√∫ adatgy≈±jt√©s
        async with aiohttp.ClientSession() as session:
            tasks = []

            if self.api_key:
                tasks.append(self._fetch_team_detailed_stats_async(session, team_name))

            tasks.append(self._fetch_team_recent_matches_async(session, team_name))

            results = await asyncio.gather(*tasks, return_exceptions=True)

            # Adatok √∂sszes√≠t√©se
            enhanced_data = self._combine_team_data_sources(results, team_name)

            # Cache ment√©se
            if enhanced_data:
                with open(cache_file, 'w') as f:
                    json.dump(enhanced_data, f, indent=2, default=str)

                return self._parse_enhanced_team_data(enhanced_data)

        # Fallback: tov√°bbfejlesztett minta adatok
        return self._generate_enhanced_sample_data(team_name)

    async def _fetch_team_detailed_stats_async(self, session: aiohttp.ClientSession, team_name: str) -> Dict:
        """R√©szletes csapat statisztik√°k lek√©rdez√©se"""
        if not self.api_key:
            return {}

        headers = {
            'X-RapidAPI-Key': self.api_key,
            'X-RapidAPI-Host': 'api-football-v1.p.rapidapi.com'
        }

        try:
            # Csapat keres√©se
            search_url = f"{self.api_sports_url}/teams"
            params = {'search': team_name}

            async with session.get(search_url, headers=headers, params=params) as response:
                if response.status == 200:
                    teams_data = await response.json()
                    teams = teams_data.get('response', [])

                    if teams:
                        team_id = teams[0]['team']['id']

                        # Statisztik√°k lek√©rdez√©se
                        stats_url = f"{self.api_sports_url}/teams/statistics"
                        current_year = datetime.now().year

                        # Pr√≥b√°ljuk a jelenlegi szezont
                        for league_id in [39, 140, 78, 135, 61, 253, 71]:  # F≈ëbb lig√°k
                            try:
                                stats_params = {
                                    'team': team_id,
                                    'season': current_year,
                                    'league': league_id
                                }

                                async with session.get(stats_url, headers=headers, params=stats_params) as stats_response:
                                    if stats_response.status == 200:
                                        stats_data = await stats_response.json()
                                        if stats_data.get('response'):
                                            return stats_data['response']

                            except Exception:
                                continue

        except Exception as e:
            print(f"   ‚ö†Ô∏è R√©szletes statisztik√°k hiba {team_name}: {e}")

        return {}

    async def _fetch_team_recent_matches_async(self, session: aiohttp.ClientSession, team_name: str) -> List:
        """Csapat legut√≥bbi meccsek lek√©rdez√©se"""
        # ESPN API-t haszn√°ljuk ingyenes forr√°sk√©nt
        matches = []

        try:
            # T√∂bb lig√°b√≥l pr√≥b√°lkozunk
            leagues = [
                'https://site.api.espn.com/apis/site/v2/sports/soccer/eng.1/teams',
                'https://site.api.espn.com/apis/site/v2/sports/soccer/usa.1/teams',
                'https://site.api.espn.com/apis/site/v2/sports/soccer/esp.1/teams'
            ]

            for league_url in leagues:
                async with session.get(league_url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        teams = data.get('sports', [{}])[0].get('leagues', [{}])[0].get('teams', [])

                        # Csapat keres√©se
                        for team in teams:
                            if team_name.lower() in team['team']['displayName'].lower():
                                team_id = team['team']['id']

                                # Meccsek lek√©rdez√©se
                                matches_url = f"https://site.api.espn.com/apis/site/v2/sports/soccer/teams/{team_id}/events"

                                async with session.get(matches_url) as matches_response:
                                    if matches_response.status == 200:
                                        matches_data = await matches_response.json()
                                        events = matches_data.get('events', [])

                                        # Befejezett meccsek
                                        finished_matches = [
                                            event for event in events
                                            if event.get('status', {}).get('type', {}).get('completed', False)
                                        ]

                                        return finished_matches[-50:]  # Utols√≥ 50

        except Exception as e:
            print(f"   ‚ö†Ô∏è Legut√≥bbi meccsek hiba {team_name}: {e}")

        return matches

    def _combine_team_data_sources(self, api_results: List, team_name: str) -> Dict:
        """K√ºl√∂nb√∂z≈ë forr√°sokb√≥l sz√°rmaz√≥ adatok kombin√°l√°sa"""
        combined_data = {
            'team_name': team_name,
            'detailed_stats': {},
            'recent_matches': [],
            'last_updated': datetime.now().isoformat()
        }

        for result in api_results:
            if isinstance(result, dict) and result:
                if 'fixtures' in result or 'matches' in result:
                    combined_data['detailed_stats'] = result
                elif isinstance(result, list):
                    combined_data['recent_matches'] = result

        return combined_data

    def _parse_enhanced_team_data(self, data: Dict) -> TeamHistoricalData:
        """Tov√°bbfejlesztett adatok elemz√©se"""
        team_name = data.get('team_name', 'Unknown Team')

        # Alap√©rtelmezett √©rt√©kek
        avg_goals_scored = 1.5
        avg_goals_conceded = 1.3
        recent_form = ['W', 'D', 'L', 'W', 'D'] * 2  # 10 meccs

        # Fejlett statisztik√°k alap√©rtelmez√©sei
        goal_difference_avg = 0.2
        shots_on_target_avg = 4.5
        possession_avg = 52.0
        cards_avg = 2.1
        corners_avg = 5.3

        home_performance = {
            'matches': 25, 'wins': 12, 'draws': 8, 'losses': 5, 'win_rate': 0.48
        }
        away_performance = {
            'matches': 25, 'wins': 8, 'draws': 9, 'losses': 8, 'win_rate': 0.32
        }

        league_performance = {'current_position': 10, 'points_per_game': 1.4}
        head_to_head = {'meetings': 0, 'wins': 0, 'draws': 0, 'losses': 0}

        # Ha van val√≥s adat, feldolgozzuk
        if 'detailed_stats' in data and data['detailed_stats']:
            stats = data['detailed_stats']

            # G√≥lstatisztik√°k
            if 'goals' in stats:
                goals_data = stats['goals']
                avg_goals_scored = goals_data.get('for', {}).get('average', avg_goals_scored)
                avg_goals_conceded = goals_data.get('against', {}).get('average', avg_goals_conceded)

        return TeamHistoricalData(
            team_name=team_name,
            last_50_matches=data.get('recent_matches', []),
            avg_goals_scored=avg_goals_scored,
            avg_goals_conceded=avg_goals_conceded,
            recent_form=recent_form,
            home_performance=home_performance,
            away_performance=away_performance,
            goal_difference_avg=goal_difference_avg,
            shots_on_target_avg=shots_on_target_avg,
            possession_avg=possession_avg,
            cards_avg=cards_avg,
            corners_avg=corners_avg,
            league_performance=league_performance,
            head_to_head=head_to_head
        )

    def _generate_enhanced_sample_data(self, team_name: str) -> TeamHistoricalData:
        """Tov√°bbfejlesztett minta adatok gener√°l√°sa"""
        np.random.seed(hash(team_name) % 2**32)

        return TeamHistoricalData(
            team_name=team_name,
            last_50_matches=[],
            avg_goals_scored=np.random.uniform(0.8, 2.5),
            avg_goals_conceded=np.random.uniform(0.7, 2.2),
            recent_form=np.random.choice(['W', 'D', 'L'], 10, p=[0.4, 0.3, 0.3]).tolist(),
            home_performance={
                'matches': 25,
                'wins': np.random.randint(8, 18),
                'draws': np.random.randint(4, 10),
                'losses': np.random.randint(2, 12),
                'win_rate': np.random.uniform(0.3, 0.7)
            },
            away_performance={
                'matches': 25,
                'wins': np.random.randint(5, 15),
                'draws': np.random.randint(5, 12),
                'losses': np.random.randint(3, 15),
                'win_rate': np.random.uniform(0.2, 0.6)
            },
            goal_difference_avg=np.random.uniform(-0.5, 1.0),
            shots_on_target_avg=np.random.uniform(3.0, 6.5),
            possession_avg=np.random.uniform(45.0, 65.0),
            cards_avg=np.random.uniform(1.5, 3.0),
            corners_avg=np.random.uniform(4.0, 7.5),
            league_performance={
                'current_position': np.random.randint(1, 20),
                'points_per_game': np.random.uniform(0.8, 2.3)
            },
            head_to_head={'meetings': 0, 'wins': 0, 'draws': 0, 'losses': 0}
        )

    async def predict_matches_enhanced_async(self, matches: List[UpcomingMatch]) -> List[Dict]:
        """Tov√°bbfejlesztett meccs predikci√≥k aszinkron sz√°m√≠t√°sa"""
        print(f"\nüîÆ {len(matches)} MECCS FEJLETT PREDIKCI√ìJA")
        print("=" * 60)

        predictions = []

        # P√°rhuzamos csapat adatok lek√©rdez√©se
        async def process_match(match):
            print(f"\n‚öΩ {match.home_team} vs {match.away_team}")
            print(f"   üïê {match.kickoff_time.strftime('%H:%M')} | üèüÔ∏è {match.venue}")
            print(f"   üèÜ {match.competition}")

            # Bookmaker odds megjelen√≠t√©se ha van
            if match.bookmaker_odds:
                odds = match.bookmaker_odds
                print(f"   üí∞ Odds ({odds.get('bookmaker', 'N/A')}): {odds.get('home_odds', 'N/A')} / {odds.get('draw_odds', 'N/A')} / {odds.get('away_odds', 'N/A')}")

            # Csapat adatok p√°rhuzamos lek√©rdez√©se
            home_data_task = self.get_enhanced_team_history_async(match.home_team, match.competition)
            away_data_task = self.get_enhanced_team_history_async(match.away_team, match.competition)

            home_data, away_data = await asyncio.gather(home_data_task, away_data_task)

            # Predikci√≥ sz√°m√≠t√°sa
            prediction = self._calculate_enhanced_prediction(match, home_data, away_data)
            predictions.append(prediction)

            # Eredm√©ny ki√≠r√°sa
            self._print_enhanced_prediction(prediction)

            return prediction

        # P√°rhuzamos feldolgoz√°s
        await asyncio.gather(*[process_match(match) for match in matches])

        return predictions

    def _calculate_enhanced_prediction(self, match: UpcomingMatch,
                                     home_data: TeamHistoricalData,
                                     away_data: TeamHistoricalData) -> Dict:
        """Tov√°bbfejlesztett predikci√≥ sz√°m√≠t√°sa"""

        # Alapvet≈ë er≈ëss√©gek
        home_attack_strength = home_data.avg_goals_scored * 1.15  # Hazai el≈ëny
        home_defense_strength = 2.0 - home_data.avg_goals_conceded
        away_attack_strength = away_data.avg_goals_scored * 0.85  # Vend√©g h√°tr√°ny
        away_defense_strength = 2.0 - away_data.avg_goals_conceded

        # Forma m√≥dos√≠t√≥k
        home_form_score = self._calculate_form_score(home_data.recent_form)
        away_form_score = self._calculate_form_score(away_data.recent_form)

        # Fejlett m√≥dos√≠t√≥k
        home_possession_mod = (home_data.possession_avg - 50) / 100  # -0.05 to +0.15
        away_possession_mod = (away_data.possession_avg - 50) / 100

        home_shots_mod = (home_data.shots_on_target_avg - 4.5) / 10  # -0.15 to +0.2
        away_shots_mod = (away_data.shots_on_target_avg - 4.5) / 10

        # V√©gs≈ë er≈ëss√©gek
        home_total_strength = (
            home_attack_strength * (1 + home_form_score + home_possession_mod + home_shots_mod) +
            home_defense_strength * (1 + home_form_score)
        ) / 2

        away_total_strength = (
            away_attack_strength * (1 + away_form_score + away_possession_mod + away_shots_mod) +
            away_defense_strength * (1 + away_form_score)
        ) / 2

        # Val√≥sz√≠n≈±s√©gek sz√°m√≠t√°sa
        strength_diff = home_total_strength - away_total_strength

        # Sigmoid function for probabilities
        home_base_prob = 1 / (1 + np.exp(-strength_diff))

        # Adjust for draw probability
        draw_factor = 0.25 + (0.1 * abs(strength_diff))  # T√∂bb d√∂ntetlen ha kiegyenl√≠tett

        prob_home = home_base_prob * (1 - draw_factor)
        prob_away = (1 - home_base_prob) * (1 - draw_factor)
        prob_draw = draw_factor

        # Normaliz√°l√°s
        total = prob_home + prob_draw + prob_away
        prob_home /= total
        prob_draw /= total
        prob_away /= total

        # V√°rhat√≥ g√≥lok
        expected_home = max(0.1, home_data.avg_goals_scored * (1 + home_form_score) * 1.1)
        expected_away = max(0.1, away_data.avg_goals_scored * (1 + away_form_score) * 0.9)

        # Bizalom sz√°m√≠t√°sa (t√∂bb t√©nyez≈ë alapj√°n)
        data_quality = min(len(home_data.last_50_matches) + len(away_data.last_50_matches), 100) / 100
        form_consistency = 1 - (abs(home_form_score) + abs(away_form_score)) / 2
        bookmaker_bonus = 0.2 if match.bookmaker_odds else 0

        confidence = (data_quality * 0.5 + form_consistency * 0.3 + bookmaker_bonus) * 100

        return {
            'match_id': match.fixture_id,
            'home_team': match.home_team,
            'away_team': match.away_team,
            'kickoff_time': match.kickoff_time,
            'competition': match.competition,
            'venue': match.venue,
            'prob_home': prob_home,
            'prob_draw': prob_draw,
            'prob_away': prob_away,
            'expected_goals': {
                'home': expected_home,
                'away': expected_away
            },
            'confidence': confidence,
            'analysis': {
                'home_strength': home_total_strength,
                'away_strength': away_total_strength,
                'home_form': home_form_score,
                'away_form': away_form_score,
                'strength_difference': strength_diff
            },
            'bookmaker_odds': match.bookmaker_odds,
            'enhanced_factors': {
                'home_possession': home_data.possession_avg,
                'away_possession': away_data.possession_avg,
                'home_shots_ot': home_data.shots_on_target_avg,
                'away_shots_ot': away_data.shots_on_target_avg
            }
        }

    def _calculate_form_score(self, recent_form: List[str]) -> float:
        """Forma pontsz√°m sz√°m√≠t√°sa (-0.3 to +0.3)"""
        if not recent_form:
            return 0.0

        form_values = {'W': 1.0, 'D': 0.0, 'L': -1.0}

        # S√∫lyozott √°tlag (√∫jabb meccsek nagyobb s√∫llyal)
        weighted_sum = 0
        total_weight = 0

        for i, result in enumerate(recent_form[-10:]):  # Utols√≥ 10 meccs
            weight = (i + 1) / 10  # 0.1, 0.2, ..., 1.0
            weighted_sum += form_values.get(result, 0) * weight
            total_weight += weight

        if total_weight == 0:
            return 0.0

        avg_form = weighted_sum / total_weight
        return avg_form * 0.3  # -0.3 to +0.3 scale

    def _print_enhanced_prediction(self, prediction: Dict):
        """Tov√°bbfejlesztett predikci√≥ ki√≠r√°sa"""
        print(f"   üìä Fejlett Predikci√≥:")
        print(f"      üè† {prediction['home_team']}: {prediction['prob_home']:.1%}")
        print(f"      ü§ù D√∂ntetlen: {prediction['prob_draw']:.1%}")
        print(f"      ‚úàÔ∏è {prediction['away_team']}: {prediction['prob_away']:.1%}")
        print(f"      üéØ Bizalom: {prediction['confidence']:.1f}%")
        print(f"      ‚öΩ V√°rhat√≥ g√≥lok: {prediction['expected_goals']['home']:.1f} - {prediction['expected_goals']['away']:.1f}")

        # Bookmaker √∂sszehasonl√≠t√°s
        if prediction['bookmaker_odds']:
            odds = prediction['bookmaker_odds']
            implied_home = 1 / odds['home_odds'] if odds.get('home_odds') else 0
            implied_draw = 1 / odds['draw_odds'] if odds.get('draw_odds') else 0
            implied_away = 1 / odds['away_odds'] if odds.get('away_odds') else 0

            total_implied = implied_home + implied_draw + implied_away
            if total_implied > 0:
                implied_home /= total_implied
                implied_draw /= total_implied
                implied_away /= total_implied

                print(f"      üí∞ Bookmaker vs El≈ërejelz√©s:")
                print(f"         Hazai: {implied_home:.1%} vs {prediction['prob_home']:.1%}")
                print(f"         D√∂ntetlen: {implied_draw:.1%} vs {prediction['prob_draw']:.1%}")
                print(f"         Vend√©g: {implied_away:.1%} vs {prediction['prob_away']:.1%}")

        # Fejlett elemz√©si t√©nyez≈ëk
        analysis = prediction['analysis']
        print(f"      üîç Elemz√©si t√©nyez≈ëk:")
        print(f"         Er≈ëss√©g k√ºl√∂nbs√©g: {analysis['strength_difference']:.2f}")
        print(f"         Hazai forma: {analysis['home_form']:+.2f}")
        print(f"         Vend√©g forma: {analysis['away_form']:+.2f}")

def main():
    """F≈ë futtat√°si f√ºggv√©ny"""
    predictor = EnhancedLivePredictor()

    print("üöÄ TOV√ÅBBFEJLESZTETT VAL√ìS IDEJ≈∞ MECCS EL≈êREJELZ≈ê")
    print("üìÖ", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    print("=" * 70)

    # API kulcsok ellen≈ërz√©se
    api_count = sum([
        bool(predictor.api_key),
        bool(predictor.football_data_key),
        bool(predictor.sportmonks_key)
    ])

    print(f"üîë El√©rhet≈ë API kulcsok: {api_count}/3")

    if api_count == 0:
        print("‚ö†Ô∏è FIGYELEM: Nincs fizet≈ës API kulcs be√°ll√≠tva!")
        print("üí° export API_SPORTS_KEY='your_key'")
        print("üí° export FOOTBALL_DATA_API_KEY='your_key'")
        print("üí° export SPORTMONKS_API_KEY='your_key'")

    print("üîÑ Ingyenes API-kat is haszn√°lom...")

    # Aszinkron futtat√°s
    async def run_prediction():
        # K√∂vetkez≈ë 4 √≥ra meccseit lek√©rdezi
        upcoming_matches = await predictor.get_next_4_hours_matches_async()

        if upcoming_matches:
            # Fejlett predikci√≥k k√©sz√≠t√©se
            predictions = await predictor.predict_matches_enhanced_async(upcoming_matches)

            # Fejlett √∂sszegz√©s
            print(f"\nüìã FEJLETT √ñSSZEGZ√âS")
            print("=" * 40)
            print(f"üéØ Elemzett meccsek: {len(predictions)}")
            print(f"üìä √Åtlagos bizalom: {np.mean([p['confidence'] for p in predictions]):.1f}%")

            # Legjobb fogad√°si lehet≈ës√©gek
            high_confidence = [p for p in predictions if p['confidence'] > 60]
            if high_confidence:
                print(f"üåü Nagy bizalmi szint≈± predikci√≥k: {len(high_confidence)}")

                for pred in high_confidence:
                    probs = [
                        ('Hazai', pred['prob_home']),
                        ('D√∂ntetlen', pred['prob_draw']),
                        ('Vend√©g', pred['prob_away'])
                    ]
                    best_outcome, best_prob = max(probs, key=lambda x: x[1])

                    print(f"\n   ‚≠ê {pred['home_team']} vs {pred['away_team']}")
                    print(f"      üïê {pred['kickoff_time'].strftime('%H:%M')}")
                    print(f"      üé≤ Aj√°nlott: {best_outcome} ({best_prob:.1%})")
                    print(f"      üéØ Bizalom: {pred['confidence']:.1f}%")

        else:
            print("‚ùå Nincs meccs a k√∂vetkez≈ë 4 √≥r√°ban")
            print("üí° Pr√≥b√°ld meg k√©s≈ëbb vagy √°ll√≠tsd be az API kulcsokat!")

    # Futtat√°s
    asyncio.run(run_prediction())

if __name__ == "__main__":
    main()
