#!/usr/bin/env python3
"""
üåÖ NAP        self.league_configs = {
            'premier_league': {
                'name': 'Premier League',
                'data_files': ['data/premier_league/pl2223.csv', 'data/premier_league/pl2324.csv', 'data/premier_league/pl2425.csv'],
                'teams': ['Arsenal', 'Chelsea', 'Man City', 'Liverpool', 'Man United', 'Tottenham',
                         'Newcastle', 'Brighton', 'Everton', 'Fulham', 'West Ham', 'Crystal Palace',
                         'Wolves', 'Brentford', 'Aston Villa', 'Bournemouth', 'Leicester', 'Southampton',
                         'Nott\'m Forest', 'Sheffield Utd', 'Burnley', 'Luton']
            },I ASSZISZTENS
Minden reggel automatikusan elemzi az aznapi meccseket √©s ad javaslatokat.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'core'))

try:
    from realistic_betting_system import RealisticBettingSystem
    from data_loader import load_data
except ImportError:
    print("‚ùå Hi√°nyz√≥ modulok!")
    exit(1)

class DailyBettingAssistant:
    """Napi fogad√°si asszisztens."""

    def __init__(self, league='premier_league'):
        self.system = RealisticBettingSystem()
        self.bankroll = 1000.0
        self.max_daily_risk = 0.08  # Max 8% naponta

        # Liga be√°ll√≠t√°s
        self.league = league
        self.league_configs = {
            'premier_league': {
                'name': 'Premier League',
                'data_files': ['pl2223.csv', 'pl2324.csv', 'pl2425.csv'],
                'teams': ['Arsenal', 'Chelsea', 'Man City', 'Liverpool', 'Man United', 'Tottenham',
                         'Newcastle', 'Brighton', 'Everton', 'Fulham', 'West Ham', 'Crystal Palace',
                         'Wolves', 'Brentford', 'Aston Villa', 'Bournemouth', 'Leicester', 'Southampton',
                         'Nott\'m Forest', 'Sheffield Utd', 'Burnley', 'Luton']
            },
            'mls': {
                'name': 'Major League Soccer',
                'data_files': ['data/mls/mls_2024_sample.csv'],
                'teams': ['LA Galaxy', 'LAFC', 'Seattle Sounders', 'Portland Timbers', 'Inter Miami',
                         'Atlanta United', 'New York City FC', 'New York Red Bulls', 'Chicago Fire',
                         'Columbus Crew', 'Nashville SC', 'Orlando City', 'Philadelphia Union']
            },
            'brasileirao': {
                'name': 'Brasileir√£o Serie A',
                'data_files': ['data/brasileirao/brasileirao_2024_sample.csv'],
                'teams': ['Flamengo', 'Palmeiras', 'S√£o Paulo', 'Corinthians', 'Santos', 'Gr√™mio',
                         'Internacional', 'Atletico MG', 'Botafogo', 'Vasco da Gama', 'Fluminense',
                         'Cruzeiro', 'Bahia', 'Fortaleza', 'Red Bull Bragantino', 'Athletico PR']
            },
            'j_league': {
                'name': 'J1 League',
                'data_files': ['data/j_league/j_league_2024_sample.csv'],
                'teams': ['Vissel Kobe', 'Sanfrecce Hiroshima', 'Machida Zelvia', 'Gamba Osaka',
                         'Yokohama F. Marinos', 'FC Tokyo', 'Urawa Red Diamonds', 'Kashima Antlers',
                         'Cerezo Osaka', 'Avispa Fukuoka', 'Nagoya Grampus', 'Kawasaki Frontale']
            }
        }

        # Min≈ës√©gi sz≈±r≈ëk
        self.min_edge = 0.05
        self.min_confidence = 0.4

    def load_data_and_models(self):
        """Adatok bet√∂lt√©se √©s modellek √©p√≠t√©se."""
        league_config = self.league_configs.get(self.league)
        if not league_config:
            print(f"‚ùå Ismeretlen liga: {self.league}")
            return False

        print(f"üìö {league_config['name']} m√∫ltbeli adatok elemz√©se...")

        # Adatok bet√∂lt√©se a liga konfigur√°ci√≥ja alapj√°n
        try:
            self.historical_df = load_data(league_config['data_files'])
        except Exception as e:
            print(f"‚ùå Adatok bet√∂lt√©se sikertelen: {e}")
            return False

        self.team_stats = self.system.build_team_models(self.historical_df)
        print(f"‚úÖ {league_config['name']} modellek k√©szen √°llnak!\n")
        return True

    def get_todays_matches(self):
        """Mai meccsek lek√©r√©se (CSAK val√≥di API adatok!)."""
        today = datetime.now()
        weekday = today.weekday()  # 0=H√©tf≈ë, 6=Vas√°rnap

        league_config = self.league_configs.get(self.league)
        if not league_config:
            print(f"‚ùå Ismeretlen liga: {self.league}")
            return [], weekday

        # El≈ësz√∂r pr√≥b√°ljunk val√≥di API adatokat lek√©rni
        real_matches = self._try_get_real_matches()
        if real_matches:
            print(f"‚úÖ {len(real_matches)} val√≥di m√©rk≈ëz√©s tal√°lva!")
            return real_matches, weekday

        # Ha nincs API vagy nincs m√©rk≈ëz√©s, ellen≈ërizz√ºk a szezon st√°tusz√°t
        season_status = self._check_season_status()
        if not season_status['active']:
            print(f"‚ö†Ô∏è {league_config['name']} szezon jelenleg INAKT√çV!")
            print(f"üìÖ K√∂vetkez≈ë szezon: {season_status['next_season']}")
            return [], weekday

        # Nincs val√≥di adat - NEM gener√°lunk fake meccseket!
        print(f"‚ö†Ô∏è {league_config['name']}: Nincs val√≥di m√©rk≈ëz√©s ma!")
        print(f"üí° Val√≥di adatokhoz √°ll√≠tsd be: export API_SPORTS_KEY='your_key'")
        print(f"üîó Alternat√≠va: L√°togasd meg az ESPN vagy m√°s sport oldalt")

        # Visszaadunk √ºres list√°t - nincs fake adat!
        return [], weekday

    def _try_get_real_matches(self):
        """Val√≥di API adatok lek√©r√©se."""
        try:
            # Import√°ljuk a live API client-et
            import sys
            import os
            sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'api'))
            from live_api_client import LiveAPIClient

            # API kulcs ellen≈ërz√©se
            api_key = os.getenv('API_SPORTS_KEY')
            if not api_key:
                return None

            # API kliens l√©trehoz√°sa √©s tesztel√©se
            client = LiveAPIClient(api_key)
            if not client.test_connection():
                return None

            # Mai m√©rk≈ëz√©sek lek√©r√©se
            fixtures = client.get_todays_fixtures(self.league)
            if not fixtures:
                return None

            # Konvert√°l√°s a bels≈ë form√°tumra
            converted_matches = []
            for fixture in fixtures[:6]:  # Max 6 m√©rk≈ëz√©s
                home_team = fixture['teams']['home']['name']
                away_team = fixture['teams']['away']['name']

                # Odds lek√©r√©se (ha el√©rhet≈ë)
                odds = client.get_odds(fixture['fixture']['id'])
                if odds:
                    home_odd = odds.get('home', 2.0)
                    draw_odd = odds.get('draw', 3.0)
                    away_odd = odds.get('away', 3.0)
                else:
                    # Alap√©rtelmezett odds ha nincs
                    home_odd, draw_odd, away_odd = 2.0, 3.0, 3.0

                converted_matches.append((home_team, away_team, home_odd, draw_odd, away_odd))

            return converted_matches

        except Exception as e:
            print(f"‚ö†Ô∏è API hiba: {e}")
            return None

    def _check_season_status(self):
        """Szezon st√°tusz ellen≈ërz√©se."""
        current_date = datetime.now()
        current_month = current_date.month

        season_info = {
            'premier_league': {
                'active_months': [8, 9, 10, 11, 12, 1, 2, 3, 4, 5],  # Augusztus-M√°jus
                'break_months': [6, 7],  # Ny√°ri sz√ºnet
                'next_season': '2025 Augusztus'
            },
            'mls': {
                'active_months': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11],  # Febru√°r-November
                'break_months': [12, 1],  # T√©li sz√ºnet
                'next_season': '2026 Febru√°r'
            },
            'brasileirao': {
                'active_months': [4, 5, 6, 7, 8, 9, 10, 11, 12],  # √Åprilis-December
                'break_months': [1, 2, 3],  # Ny√°ri sz√ºnet (d√©li f√©lteke)
                'next_season': '2026 √Åprilis'
            },
            'j_league': {
                'active_months': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  # Febru√°r-December
                'break_months': [1],  # T√©li sz√ºnet
                'next_season': '2026 Febru√°r'
            }
        }

        league_season = season_info.get(self.league, {})
        active_months = league_season.get('active_months', [])

        return {
            'active': current_month in active_months,
            'next_season': league_season.get('next_season', 'Ismeretlen'),
            'current_month': current_month,
            'active_months': active_months
        }

    def analyze_todays_opportunities(self):
        """Mai fogad√°si lehet≈ës√©gek elemz√©se."""
        matches, weekday = self.get_todays_matches()

        league_config = self.league_configs.get(self.league, {})
        league_name = league_config.get('name', self.league.upper())

        day_names = ["H√©tf≈ë", "Kedd", "Szerda", "Cs√ºt√∂rt√∂k", "P√©ntek", "Szombat", "Vas√°rnap"]
        today_name = day_names[weekday]

        print(f"üìÖ {today_name.upper()} - {league_name.upper()} MECCSEK ELEMZ√âSE")
        print("=" * 60)

        if not matches:
            print(f"‚ùå Ma nincsenek {league_name} meccsek.")
            print("‚úÖ Pihen≈ënap - k√©sz√ºlj fel a k√∂vetkez≈ë fordul√≥ra! üí™")
            print("üîó Ellen≈ërizd: ESPN, BBC Sport, vagy a liga hivatalos oldal√°t")
            return

        print(f"‚öΩ {len(matches)} {league_name} m√©rk≈ëz√©s ma:")
        for home, away, h_odd, d_odd, a_odd in matches:
            print(f"   {home} vs {away} ({h_odd:.2f} - {d_odd:.2f} - {a_odd:.2f})")
        print()

        # Elemz√©s minden meccsre
        opportunities = []

        for home, away, h_odd, d_odd, a_odd in matches:
            print(f"üîç {home} vs {away}")

            # Saj√°t predikci√≥
            prediction = self.system.predict_match_probabilities(home, away, self.team_stats)
            if not prediction:
                print("   ‚ùå Nincs el√©g adat az elemz√©shez")
                continue

            # Odds elemz√©s
            our_odds = {
                'home': 1 / prediction['prob_home'],
                'draw': 1 / prediction['prob_draw'],
                'away': 1 / prediction['prob_away']
            }

            bookmaker_odds = {'home': h_odd, 'draw': d_odd, 'away': a_odd}

            print(f"   üìä Saj√°t becsl√©s: {our_odds['home']:.2f} - {our_odds['draw']:.2f} - {our_odds['away']:.2f}")
            print(f"   üè™ Fogad√≥iroda:   {h_odd:.2f} - {d_odd:.2f} - {a_odd:.2f}")

            # Value bet keres√©s
            match_opportunities = []
            for outcome, our_odd in our_odds.items():
                bookmaker_odd = bookmaker_odds[outcome]
                edge = (our_odd / bookmaker_odd) - 1
                confidence = prediction['confidence']

                if edge >= self.min_edge and confidence >= self.min_confidence:
                    # Kelly stake
                    win_prob = 1 / our_odd
                    kelly_fraction = (win_prob * (bookmaker_odd - 1) - (1 - win_prob)) / (bookmaker_odd - 1)
                    kelly_stake = max(0.005, min(0.04, kelly_fraction * 0.5))

                    opportunity = {
                        'match': f"{home} vs {away}",
                        'outcome': outcome,
                        'bookmaker_odds': bookmaker_odd,
                        'edge': edge,
                        'confidence': confidence,
                        'kelly_stake': kelly_stake,
                        'expected_profit': kelly_stake * self.bankroll * edge
                    }

                    match_opportunities.append(opportunity)
                    opportunities.append(opportunity)

                    outcome_hu = {'home': 'HAZAI', 'draw': 'D√ñNTETLEN', 'away': 'VEND√âG'}[outcome]
                    print(f"   ‚úÖ {outcome_hu}: Edge {edge:.1%}, Bizalom {confidence:.1%}")

            if not match_opportunities:
                print("   ‚ùå Nincs value bet")

            print()

        # Javaslatok √∂sszegz√©se
        self.summarize_daily_recommendations(opportunities, today_name)

    def summarize_daily_recommendations(self, opportunities, day_name):
        """Napi javaslatok √∂sszegz√©se."""
        if not opportunities:
            print("üéØ MAI √ñSSZEGZ√âS")
            print("=" * 30)
            print("‚ùå Ma nincs megfelel≈ë fogad√°si lehet≈ës√©g")
            print("üí° Javaslatom: V√°rj holnapra vagy a h√©tv√©g√©re!")
            print("üí∞ Bankroll biztons√°gban: $1000.00")
            return

        # Rendez√©s edge szerint
        opportunities.sort(key=lambda x: x['edge'], reverse=True)

        print("üéØ MAI FOGAD√ÅSI JAVASLATOK")
        print("=" * 40)

        # Top lehet≈ës√©gek
        total_stake = 0
        recommended_bets = []

        print("üìä EGYEDI FOGAD√ÅSOK (Top 3):")
        for i, opp in enumerate(opportunities[:3], 1):
            stake_amount = opp['kelly_stake'] * self.bankroll
            total_stake += stake_amount
            recommended_bets.append(opp)

            outcome_hu = {'home': 'HAZAI gy≈ëzelem', 'draw': 'D√ñNTETLEN', 'away': 'VEND√âG gy≈ëzelem'}[opp['outcome']]
            print(f"{i}. {opp['match']}")
            print(f"   üéØ Tipp: {outcome_hu}")
            print(f"   üí∞ Javasolt t√©t: ${stake_amount:.2f}")
            print(f"   üé≤ Odds: {opp['bookmaker_odds']:.2f}")
            print(f"   üìà Edge: {opp['edge']:.1%} | Bizalom: {opp['confidence']:.1%}")
            print(f"   üíµ V√°rhat√≥ profit: ${opp['expected_profit']:.2f}")
            print()

        # Kombin√°ci√≥ ha van el√©g j√≥ lehet≈ës√©g
        if len(opportunities) >= 2:
            print("üé∞ KOMBIN√ÅCI√ìS JAVASLAT:")
            best_combo = opportunities[:2]  # Top 2

            combo_odds = 1.0
            combo_stake_pct = 0
            combo_matches = []

            for opp in best_combo:
                combo_odds *= opp['bookmaker_odds']
                combo_stake_pct += opp['kelly_stake']
                outcome_hu = {'home': 'H', 'draw': 'D', 'away': 'V'}[opp['outcome']]
                combo_matches.append(f"{opp['match']} ({outcome_hu})")

            combo_stake_pct = min(0.025, combo_stake_pct / 3)  # Konzervat√≠v
            combo_stake_amount = combo_stake_pct * self.bankroll
            potential_win = combo_stake_amount * combo_odds

            print(f"   üéØ Kombin√°lt tippek:")
            for match in combo_matches:
                print(f"      ‚Ä¢ {match}")
            print(f"   üí∞ Javasolt t√©t: ${combo_stake_amount:.2f}")
            print(f"   üé≤ √ñssz odds: {combo_odds:.2f}")
            print(f"   üíµ Potenci√°lis nyerem√©ny: ${potential_win:.2f}")
            print()

            total_stake += combo_stake_amount

        # Napi √∂sszegz√©s
        risk_pct = (total_stake / self.bankroll) * 100

        print("üíº NAPI √ñSSZES√çT√âS:")
        print(f"   üí∞ √ñsszes javasolt t√©t: ${total_stake:.2f}")
        print(f"   üìä Bankroll kock√°zat: {risk_pct:.1f}% (max {self.max_daily_risk*100:.0f}%)")

        if risk_pct <= self.max_daily_risk * 100:
            print("   ‚úÖ Alacsony kock√°zat - MEHET!")
        elif risk_pct <= 12:
            print("   ‚ö†Ô∏è K√∂zepes kock√°zat - Megfontolva!")
        else:
            print("   ‚ùå Magas kock√°zat - Cs√∂kkentsd a t√©teket!")

        print(f"   üè¶ Bankroll ut√°na: ${self.bankroll - total_stake:.2f}")

        # Napi tan√°csok
        print("\nüí° MAI TAN√ÅCSOK:")
        if day_name in ["Szombat", "Vas√°rnap"]:
            print("   üèüÔ∏è H√©tv√©gi nagy fordul√≥ - t√∂bb lehet≈ës√©g!")
            print("   üì∫ N√©zd meg a m√©rk≈ëz√©seket √©l≈ëben")
            print("   üîÑ Figyelj a live odds v√°ltoz√°sokra")
        elif day_name in ["Kedd", "Szerda"]:
            print("   ‚öΩ H√©t k√∂zepi meccsek - kevesebb lehet≈ës√©g")
            print("   üéØ Koncentr√°lj a legjobb value betekre")
            print("   üí∞ Konzervat√≠vabb bankroll management")
        else:
            print("   üìÖ √Åtlagos nap - standard strat√©gia")

        print("   üö´ Soha ne fogadj √©rzelmekb≈ël!")
        print("   üì± Haszn√°lj odds √∂sszehasonl√≠t√≥ oldalakat")
        print("   üìä K√∂vessed a profitod hossz√∫ t√°von")

    def run_daily_analysis(self):
        """Napi elemz√©s futtat√°sa."""
        now = datetime.now()
        print(f"üåÖ NAPI FOGAD√ÅSI ASSZISZTENS")
        print(f"üìÖ {now.strftime('%Y.%m.%d')} - {now.strftime('%A')}")
        print(f"‚è∞ {now.strftime('%H:%M')}")
        print("=" * 60)

        try:
            # Adatok bet√∂lt√©se
            self.load_data_and_models()

            # Mai elemz√©s
            self.analyze_todays_opportunities()

            print("\n" + "=" * 60)
            print("‚úÖ Elemz√©s befejezve! Sikeres fogad√°st! üçÄ")
            print("üìû Probl√©ma eset√©n: ellen≈ërizd a team_stats adatokat")

        except Exception as e:
            print(f"‚ùå Hiba t√∂rt√©nt: {e}")
            print("üîß Ellen≈ërizd az adatf√°jlokat √©s pr√≥b√°ld √∫jra!")

def main():
    """F≈ë futtat√°si f√ºggv√©ny."""
    import argparse

    parser = argparse.ArgumentParser(description='Napi fogad√°si asszisztens')
    parser.add_argument('--league', default='premier_league',
                       choices=['premier_league', 'mls', 'brasileirao', 'j_league'],
                       help='Liga v√°laszt√°s')
    args = parser.parse_args()

    assistant = DailyBettingAssistant(league=args.league)

    # Adatok bet√∂lt√©se
    if not assistant.load_data_and_models():
        print("‚ùå Nem siker√ºlt az adatok bet√∂lt√©se!")
        return

    assistant.run_daily_analysis()

if __name__ == "__main__":
    main()
