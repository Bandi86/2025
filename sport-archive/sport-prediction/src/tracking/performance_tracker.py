#!/usr/bin/env python3
"""
üìà TELJES√çTM√âNY TRACKING RENDSZER
ROI k√∂vet√©s, profit/loss sz√°m√≠t√°s, strat√©gia optimaliz√°l√°s
"""

import pandas as pd
import numpy as np
import json
import os
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Dict, List, Optional

class PerformanceTracker:
    """Teljes√≠tm√©ny k√∂vet≈ë rendszer"""

    def __init__(self, tracking_file: str = None):
        self.project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        self.tracking_file = tracking_file or os.path.join(self.project_root, 'results', 'betting_performance.json')
        self.csv_file = self.tracking_file.replace('.json', '.csv')

        # Tracking adatok bet√∂lt√©se vagy l√©trehoz√°sa
        self.performance_data = self.load_or_create_tracking_data()

        # Eredm√©ny k√∂nyvt√°r
        os.makedirs(os.path.dirname(self.tracking_file), exist_ok=True)

    def load_or_create_tracking_data(self) -> Dict:
        """Tracking adatok bet√∂lt√©se vagy alap√©rtelmezett l√©trehoz√°sa"""
        if os.path.exists(self.tracking_file):
            with open(self.tracking_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            return {
                'bets': [],
                'daily_summaries': [],
                'bankroll_history': [],
                'strategy_performance': {},
                'metadata': {
                    'created': datetime.now().isoformat(),
                    'initial_bankroll': 1000.0,
                    'current_bankroll': 1000.0,
                    'total_bets': 0,
                    'winning_bets': 0,
                    'total_staked': 0.0,
                    'total_profit': 0.0
                }
            }

    def save_tracking_data(self):
        """Tracking adatok ment√©se"""
        with open(self.tracking_file, 'w', encoding='utf-8') as f:
            json.dump(self.performance_data, f, indent=2, ensure_ascii=False)

        # CSV export is
        self.export_to_csv()

    def add_bet(self, bet_info: Dict):
        """√öj fogad√°s hozz√°ad√°sa"""
        bet = {
            'id': len(self.performance_data['bets']) + 1,
            'timestamp': datetime.now().isoformat(),
            'date': bet_info.get('date', datetime.now().strftime('%Y-%m-%d')),
            'league': bet_info.get('league', 'unknown'),
            'match': bet_info.get('match', ''),
            'bet_type': bet_info.get('bet_type', 'single'),  # single, combination
            'prediction': bet_info.get('prediction', ''),
            'odds': bet_info.get('odds', 0.0),
            'stake': bet_info.get('stake', 0.0),
            'potential_return': bet_info.get('odds', 0.0) * bet_info.get('stake', 0.0),
            'confidence': bet_info.get('confidence', 0.0),
            'edge': bet_info.get('edge', 0.0),
            'strategy': bet_info.get('strategy', 'unknown'),
            'status': 'pending',  # pending, won, lost, void
            'actual_result': None,
            'profit_loss': 0.0,
            'notes': bet_info.get('notes', '')
        }

        self.performance_data['bets'].append(bet)
        self.performance_data['metadata']['total_bets'] += 1
        self.performance_data['metadata']['total_staked'] += bet['stake']

        self.save_tracking_data()
        return bet['id']

    def update_bet_result(self, bet_id: int, result: str, actual_result: str = None):
        """Fogad√°s eredm√©ny√©nek friss√≠t√©se"""
        for bet in self.performance_data['bets']:
            if bet['id'] == bet_id:
                bet['status'] = result  # won, lost, void
                bet['actual_result'] = actual_result

                if result == 'won':
                    bet['profit_loss'] = bet['potential_return'] - bet['stake']
                    self.performance_data['metadata']['winning_bets'] += 1
                elif result == 'lost':
                    bet['profit_loss'] = -bet['stake']
                else:  # void
                    bet['profit_loss'] = 0.0

                # Bankroll friss√≠t√©se
                self.performance_data['metadata']['current_bankroll'] += bet['profit_loss']
                self.performance_data['metadata']['total_profit'] += bet['profit_loss']

                # Bankroll history
                self.performance_data['bankroll_history'].append({
                    'timestamp': datetime.now().isoformat(),
                    'bet_id': bet_id,
                    'change': bet['profit_loss'],
                    'new_balance': self.performance_data['metadata']['current_bankroll']
                })

                break

        self.save_tracking_data()

    def add_daily_summary(self, date: str = None):
        """Napi √∂sszefoglal√≥ hozz√°ad√°sa"""
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')

        # Napi fogad√°sok
        daily_bets = [bet for bet in self.performance_data['bets']
                     if bet['date'] == date]

        if not daily_bets:
            return

        # Napi statisztik√°k
        total_bets = len(daily_bets)
        total_staked = sum(bet['stake'] for bet in daily_bets)
        total_profit = sum(bet['profit_loss'] for bet in daily_bets if bet['status'] != 'pending')
        won_bets = len([bet for bet in daily_bets if bet['status'] == 'won'])

        summary = {
            'date': date,
            'total_bets': total_bets,
            'won_bets': won_bets,
            'win_rate': won_bets / total_bets if total_bets > 0 else 0,
            'total_staked': total_staked,
            'total_profit': total_profit,
            'roi': (total_profit / total_staked * 100) if total_staked > 0 else 0,
            'avg_odds': np.mean([bet['odds'] for bet in daily_bets]) if daily_bets else 0,
            'avg_confidence': np.mean([bet['confidence'] for bet in daily_bets]) if daily_bets else 0
        }

        # Megl√©v≈ë napi √∂sszefoglal√≥ friss√≠t√©se vagy √∫j hozz√°ad√°sa
        existing_summary = None
        for i, daily_sum in enumerate(self.performance_data['daily_summaries']):
            if daily_sum['date'] == date:
                existing_summary = i
                break

        if existing_summary is not None:
            self.performance_data['daily_summaries'][existing_summary] = summary
        else:
            self.performance_data['daily_summaries'].append(summary)

        self.save_tracking_data()
        return summary

    def calculate_performance_metrics(self) -> Dict:
        """Teljes√≠tm√©ny mutat√≥k sz√°m√≠t√°sa"""
        bets = self.performance_data['bets']
        finished_bets = [bet for bet in bets if bet['status'] in ['won', 'lost']]

        if not finished_bets:
            return {'error': 'Nincs befejezett fogad√°s'}

        # Alap mutat√≥k
        total_bets = len(finished_bets)
        won_bets = len([bet for bet in finished_bets if bet['status'] == 'won'])
        win_rate = won_bets / total_bets

        total_staked = sum(bet['stake'] for bet in finished_bets)
        total_profit = sum(bet['profit_loss'] for bet in finished_bets)
        roi = (total_profit / total_staked * 100) if total_staked > 0 else 0

        # √Åtlag odds √©s konfidencia
        avg_odds = np.mean([bet['odds'] for bet in finished_bets])
        avg_confidence = np.mean([bet['confidence'] for bet in finished_bets])

        # Sorozatok
        current_streak = self._calculate_current_streak(finished_bets)
        longest_winning_streak = self._calculate_longest_streak(finished_bets, 'won')
        longest_losing_streak = self._calculate_longest_streak(finished_bets, 'lost')

        # Havi/heti teljes√≠tm√©ny
        monthly_performance = self._calculate_monthly_performance(finished_bets)

        return {
            'total_bets': total_bets,
            'won_bets': won_bets,
            'lost_bets': total_bets - won_bets,
            'win_rate': round(win_rate * 100, 2),
            'total_staked': round(total_staked, 2),
            'total_profit': round(total_profit, 2),
            'roi': round(roi, 2),
            'avg_odds': round(avg_odds, 2),
            'avg_confidence': round(avg_confidence, 2),
            'current_streak': current_streak,
            'longest_winning_streak': longest_winning_streak,
            'longest_losing_streak': longest_losing_streak,
            'monthly_performance': monthly_performance,
            'bankroll_growth': self._calculate_bankroll_growth()
        }

    def _calculate_current_streak(self, bets: List[Dict]) -> Dict:
        """Jelenlegi sorozat sz√°m√≠t√°sa"""
        if not bets:
            return {'type': 'none', 'length': 0}

        # Id≈ërend szerint rendez√©s
        sorted_bets = sorted(bets, key=lambda x: x['timestamp'])

        if not sorted_bets:
            return {'type': 'none', 'length': 0}

        current_type = sorted_bets[-1]['status']
        length = 1

        for i in range(len(sorted_bets) - 2, -1, -1):
            if sorted_bets[i]['status'] == current_type:
                length += 1
            else:
                break

        return {'type': current_type, 'length': length}

    def _calculate_longest_streak(self, bets: List[Dict], streak_type: str) -> int:
        """Leghosszabb sorozat sz√°m√≠t√°sa"""
        if not bets:
            return 0

        sorted_bets = sorted(bets, key=lambda x: x['timestamp'])
        max_streak = 0
        current_streak = 0

        for bet in sorted_bets:
            if bet['status'] == streak_type:
                current_streak += 1
                max_streak = max(max_streak, current_streak)
            else:
                current_streak = 0

        return max_streak

    def _calculate_monthly_performance(self, bets: List[Dict]) -> Dict:
        """Havi teljes√≠tm√©ny sz√°m√≠t√°sa"""
        monthly_data = {}

        for bet in bets:
            month = bet['date'][:7]  # YYYY-MM

            if month not in monthly_data:
                monthly_data[month] = {
                    'bets': 0,
                    'won': 0,
                    'staked': 0.0,
                    'profit': 0.0
                }

            monthly_data[month]['bets'] += 1
            if bet['status'] == 'won':
                monthly_data[month]['won'] += 1
            monthly_data[month]['staked'] += bet['stake']
            monthly_data[month]['profit'] += bet['profit_loss']

        # ROI sz√°m√≠t√°sa
        for month, data in monthly_data.items():
            data['win_rate'] = round(data['won'] / data['bets'] * 100, 2)
            data['roi'] = round(data['profit'] / data['staked'] * 100, 2) if data['staked'] > 0 else 0

        return monthly_data

    def _calculate_bankroll_growth(self) -> Dict:
        """Bankroll n√∂veked√©s sz√°m√≠t√°sa"""
        initial = self.performance_data['metadata']['initial_bankroll']
        current = self.performance_data['metadata']['current_bankroll']

        growth_amount = current - initial
        growth_percentage = (growth_amount / initial * 100) if initial > 0 else 0

        return {
            'initial_bankroll': initial,
            'current_bankroll': round(current, 2),
            'growth_amount': round(growth_amount, 2),
            'growth_percentage': round(growth_percentage, 2)
        }

    def export_to_csv(self):
        """Adatok export√°l√°sa CSV-be"""
        # Fogad√°sok export
        bets_df = pd.DataFrame(self.performance_data['bets'])
        if not bets_df.empty:
            bets_df.to_csv(self.csv_file, index=False)

        # Napi √∂sszefoglal√≥k export
        daily_df = pd.DataFrame(self.performance_data['daily_summaries'])
        if not daily_df.empty:
            daily_csv = self.csv_file.replace('.csv', '_daily.csv')
            daily_df.to_csv(daily_csv, index=False)

    def generate_performance_report(self) -> str:
        """Teljes√≠tm√©ny jelent√©s gener√°l√°sa"""
        metrics = self.calculate_performance_metrics()

        if 'error' in metrics:
            return "‚ùå Nincs elegend≈ë adat a jelent√©s gener√°l√°s√°hoz."

        report = f"""
üìà TELJES√çTM√âNY JELENT√âS
====================================
üìÖ Gener√°lva: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üéØ √ñSSZEFOGLAL√ì:
  üìä √ñsszes fogad√°s: {metrics['total_bets']}
  ‚úÖ Nyer≈ë fogad√°sok: {metrics['won_bets']}
  ‚ùå Veszt≈ë fogad√°sok: {metrics['lost_bets']}
  üéØ Tal√°lati ar√°ny: {metrics['win_rate']}%

üí∞ P√âNZ√úGYI TELJES√çTM√âNY:
  üíµ √ñsszes t√©t: ${metrics['total_staked']}
  üìà √ñsszes profit: ${metrics['total_profit']}
  üìä ROI: {metrics['roi']}%

üìä BANKROLL KEZEL√âS:
  üè¶ Kezd≈ë bankroll: ${metrics['bankroll_growth']['initial_bankroll']}
  üíº Jelenlegi bankroll: ${metrics['bankroll_growth']['current_bankroll']}
  üìà N√∂veked√©s: ${metrics['bankroll_growth']['growth_amount']} ({metrics['bankroll_growth']['growth_percentage']}%)

üé≤ FOGAD√ÅSI STATISZTIK√ÅK:
  üéØ √Åtlag odds: {metrics['avg_odds']}
  üîí √Åtlag konfidencia: {metrics['avg_confidence']}%

üî• SOROZATOK:
  ‚û°Ô∏è Jelenlegi: {metrics['current_streak']['length']} {metrics['current_streak']['type']}
  üèÜ Leghosszabb nyer≈ë: {metrics['longest_winning_streak']}
  üíÄ Leghosszabb veszt≈ë: {metrics['longest_losing_streak']}

üìÖ HAVI TELJES√çTM√âNY:
"""

        for month, data in metrics['monthly_performance'].items():
            report += f"  {month}: {data['won']}/{data['bets']} ({data['win_rate']}%) | ROI: {data['roi']}%\n"

        return report

def create_sample_tracking_data():
    """Minta tracking adatok l√©trehoz√°sa tesztel√©shez"""
    tracker = PerformanceTracker()

    print("üî¨ Minta tracking adatok l√©trehoz√°sa...")

    # M√∫ltbeli fogad√°sok szimul√°l√°sa
    dates = pd.date_range(start='2025-06-01', end='2025-06-28', freq='D')

    for date in dates:
        date_str = date.strftime('%Y-%m-%d')

        # Napi 1-3 fogad√°s
        daily_bets = np.random.randint(0, 4)

        for i in range(daily_bets):
            # Szimul√°lt fogad√°s
            bet_info = {
                'date': date_str,
                'league': np.random.choice(['premier_league', 'mls', 'brasileirao']),
                'match': f"Team A vs Team B {i+1}",
                'bet_type': np.random.choice(['single', 'combination'], p=[0.8, 0.2]),
                'prediction': np.random.choice(['H', 'D', 'A']),
                'odds': round(np.random.uniform(1.5, 4.0), 2),
                'stake': round(np.random.uniform(10, 50), 2),
                'confidence': round(np.random.uniform(0.3, 0.9), 2),
                'edge': round(np.random.uniform(0.05, 0.3), 2),
                'strategy': np.random.choice(['value_bet', 'form_based', 'momentum'])
            }

            bet_id = tracker.add_bet(bet_info)

            # Eredm√©ny szimul√°l√°sa (70% nyer√©si ar√°ny a j√≥ edge miatt)
            if np.random.random() < 0.7:
                tracker.update_bet_result(bet_id, 'won')
            else:
                tracker.update_bet_result(bet_id, 'lost')

        # Napi √∂sszefoglal√≥
        if daily_bets > 0:
            tracker.add_daily_summary(date_str)

    print(f"‚úÖ {len(tracker.performance_data['bets'])} minta fogad√°s l√©trehozva")
    return tracker

def main():
    """F≈ëprogram"""
    print("üìà TELJES√çTM√âNY TRACKING RENDSZER")
    print("=" * 40)

    # Minta adatok l√©trehoz√°sa
    tracker = create_sample_tracking_data()

    # Teljes√≠tm√©ny jelent√©s
    report = tracker.generate_performance_report()
    print(report)

    # CSV export ellen≈ërz√©se
    print(f"\nüìÅ Adatok mentve:")
    print(f"  ‚Ä¢ JSON: {tracker.tracking_file}")
    print(f"  ‚Ä¢ CSV: {tracker.csv_file}")

    print("\nüéØ Haszn√°lat:")
    print("1. √öj fogad√°s hozz√°ad√°sa:")
    print("   tracker.add_bet(bet_info)")
    print("2. Eredm√©ny friss√≠t√©se:")
    print("   tracker.update_bet_result(bet_id, 'won')")
    print("3. Teljes√≠tm√©ny jelent√©s:")
    print("   tracker.generate_performance_report()")

if __name__ == "__main__":
    main()
