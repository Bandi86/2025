#!/usr/bin/env python3
"""
ü§ñ AUTOMATIZ√ÅL√ÅSI RENDSZER
Napi futtat√°s, cron jobbok, bot integr√°l√°s
"""

import os
import sys
import subprocess
from datetime import datetime, timedelta
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import logging

class AutomationSystem:
    """Automatiz√°l√°si rendszer"""

    def __init__(self):
        self.project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        self.venv_python = os.path.join(self.project_root, 'venv', 'bin', 'python')
        self.log_dir = os.path.join(self.project_root, 'logs')

        # Log k√∂nyvt√°r l√©trehoz√°sa
        os.makedirs(self.log_dir, exist_ok=True)

        # Logging be√°ll√≠t√°sa
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(os.path.join(self.log_dir, 'automation.log')),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def create_cron_job(self, time: str = "08:00", league: str = "premier_league"):
        """Cron job l√©trehoz√°sa napi futtat√°shoz"""
        hour, minute = time.split(':')

        # Cron script
        cron_script = f"""#!/bin/bash
# Napi fogad√°si asszisztens futtat√°sa
cd {self.project_root}
{self.venv_python} src/tools/daily_betting_assistant.py --league {league} --auto >> {self.log_dir}/daily_assistant.log 2>&1
"""

        script_path = os.path.join(self.project_root, 'scripts', 'daily_run.sh')
        os.makedirs(os.path.dirname(script_path), exist_ok=True)

        with open(script_path, 'w') as f:
            f.write(cron_script)

        # Executable jogok
        os.chmod(script_path, 0o755)

        # Crontab entry
        cron_entry = f"{minute} {hour} * * * {script_path}"

        print("üïê CRON JOB BE√ÅLL√çT√ÅS")
        print("=" * 30)
        print(f"‚è∞ Id≈ëpont: Minden nap {time}")
        print(f"‚öΩ Liga: {league}")
        print(f"üìÅ Script: {script_path}")
        print(f"üìù Crontab entry:")
        print(f"   {cron_entry}")
        print("\nüîß Manu√°lis be√°ll√≠t√°s:")
        print("   crontab -e")
        print(f"   # Majd add hozz√°: {cron_entry}")

        return script_path, cron_entry

    def setup_telegram_bot(self):
        """Telegram bot konfigur√°ci√≥"""
        bot_script = '''#!/usr/bin/env python3
"""
üì± TELEGRAM BOT - Napi fogad√°si √©rtes√≠t√©sek
"""

import os
import sys
import asyncio
from datetime import datetime
import subprocess

# Telegram bot imports (telep√≠teni kell: pip install python-telegram-bot)
try:
    from telegram import Bot
    from telegram.ext import Application, CommandHandler, ContextTypes
except ImportError:
    print("‚ùå Telegram bot library hi√°nyzik!")
    print("üì¶ Telep√≠t√©s: pip install python-telegram-bot")
    sys.exit(1)

class BettingBot:
    def __init__(self, token: str, chat_ids: list):
        self.token = token
        self.chat_ids = chat_ids
        self.bot = Bot(token=token)

    async def send_daily_tips(self):
        """Napi tippek k√ºld√©se"""
        try:
            # Daily assistant futtat√°sa
            result = subprocess.run([
                sys.executable,
                'src/tools/daily_betting_assistant.py',
                '--format', 'telegram'
            ], capture_output=True, text=True, cwd=os.path.dirname(__file__))

            if result.returncode == 0:
                message = f"üåÖ **NAPI FOGAD√ÅSI JAVASLATOK**\\n{result.stdout}"

                for chat_id in self.chat_ids:
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                print("‚úÖ Telegram √ºzenetek elk√ºldve")
            else:
                error_msg = f"‚ùå Hiba a daily assistant futtat√°s√°ban: {result.stderr}"
                print(error_msg)

        except Exception as e:
            print(f"‚ùå Telegram bot hiba: {e}")

# Bot konfigur√°ci√≥
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_IDS = os.getenv('TELEGRAM_CHAT_IDS', '').split(',')

if __name__ == "__main__":
    if not TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN k√∂rnyezeti v√°ltoz√≥ hi√°nyzik!")
        sys.exit(1)

    bot = BettingBot(TOKEN, CHAT_IDS)
    asyncio.run(bot.send_daily_tips())
'''

        bot_path = os.path.join(self.project_root, 'src', 'automation', 'telegram_bot.py')
        with open(bot_path, 'w') as f:
            f.write(bot_script)

        print("üì± TELEGRAM BOT KONFIGUR√ÅCI√ì")
        print("=" * 35)
        print("1. ü§ñ Bot l√©trehoz√°sa: @BotFather telegram-on")
        print("2. üîë Token ment√©se:")
        print("   export TELEGRAM_BOT_TOKEN='your_bot_token'")
        print("3. üí¨ Chat ID megszerz√©se:")
        print("   - K√ºldj √ºzenetet a botnak")
        print("   - https://api.telegram.org/bot<TOKEN>/getUpdates")
        print("4. üéØ Chat ID be√°ll√≠t√°sa:")
        print("   export TELEGRAM_CHAT_IDS='chat_id1,chat_id2'")
        print(f"5. ‚úÖ Bot script: {bot_path}")

        return bot_path

    def setup_email_notifications(self):
        """Email √©rtes√≠t√©sek be√°ll√≠t√°sa"""
        email_script = '''#!/usr/bin/env python3
"""
üìß EMAIL √âRTES√çT√âSEK - Napi jelent√©sek
"""

import smtplib
import os
import sys
import subprocess
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

class EmailNotifier:
    def __init__(self):
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.email = os.getenv('EMAIL_ADDRESS')
        self.password = os.getenv('EMAIL_PASSWORD')
        self.recipients = os.getenv('EMAIL_RECIPIENTS', '').split(',')

    def send_daily_report(self):
        """Napi jelent√©s k√ºld√©se"""
        try:
            # Daily assistant futtat√°sa
            result = subprocess.run([
                sys.executable,
                'src/tools/daily_betting_assistant.py',
                '--format', 'email'
            ], capture_output=True, text=True)

            if result.returncode == 0:
                # Email √∂ssze√°ll√≠t√°sa
                msg = MimeMultipart()
                msg['From'] = self.email
                msg['To'] = ', '.join(self.recipients)
                msg['Subject'] = f"üåÖ Napi Fogad√°si Javaslatok - {datetime.now().strftime('%Y-%m-%d')}"

                body = f"""
Napi fogad√°si javaslatok:

{result.stdout}

---
Automatikus jelent√©s a Sport Betting Prediction System-t≈ël
{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

                msg.attach(MIMEText(body, 'plain', 'utf-8'))

                # Email k√ºld√©se
                server = smtplib.SMTP(self.smtp_server, self.smtp_port)
                server.starttls()
                server.login(self.email, self.password)
                server.send_message(msg)
                server.quit()

                print("‚úÖ Email jelent√©s elk√ºldve")
            else:
                print(f"‚ùå Hiba a daily assistant futtat√°s√°ban: {result.stderr}")

        except Exception as e:
            print(f"‚ùå Email k√ºld√©si hiba: {e}")

if __name__ == "__main__":
    notifier = EmailNotifier()
    notifier.send_daily_report()
'''

        email_path = os.path.join(self.project_root, 'src', 'automation', 'email_notifier.py')
        with open(email_path, 'w') as f:
            f.write(email_script)

        print("üìß EMAIL √âRTES√çT√âSEK KONFIGUR√ÅCI√ì")
        print("=" * 38)
        print("1. üìÆ Gmail App Password l√©trehoz√°sa:")
        print("   - Google Account > Security > 2-Step Verification > App passwords")
        print("2. üîë K√∂rnyezeti v√°ltoz√≥k:")
        print("   export EMAIL_ADDRESS='your@gmail.com'")
        print("   export EMAIL_PASSWORD='app_password'")
        print("   export EMAIL_RECIPIENTS='recipient1@email.com,recipient2@email.com'")
        print("3. üîß SMTP be√°ll√≠t√°sok (opcion√°lis):")
        print("   export SMTP_SERVER='smtp.gmail.com'")
        print("   export SMTP_PORT='587'")
        print(f"4. ‚úÖ Email script: {email_path}")

        return email_path

    def create_monitoring_script(self):
        """Monitoring script a rendszer √°llapot√°nak k√∂vet√©s√©re"""
        monitoring_script = '''#!/usr/bin/env python3
"""
üìä RENDSZER MONITORING
Napi fut√°sok monitoroz√°sa √©s hibajelz√©sek
"""

import os
import sys
import json
import subprocess
from datetime import datetime, timedelta
import glob

class SystemMonitor:
    def __init__(self):
        self.project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        self.log_dir = os.path.join(self.project_root, 'logs')

    def check_daily_runs(self, days_back: int = 7):
        """Ut√≥bbi napok fut√°sainak ellen≈ërz√©se"""
        print(f"üìä RENDSZER √ÅLLAPOT ELLEN≈êRZ√âS (ut√≥bbi {days_back} nap)")
        print("=" * 50)

        # Log f√°jlok keres√©se
        log_files = glob.glob(os.path.join(self.log_dir, "*.log"))

        for log_file in log_files:
            print(f"\\nüìÅ {os.path.basename(log_file)}:")
            try:
                with open(log_file, 'r') as f:
                    lines = f.readlines()[-50:]  # Utols√≥ 50 sor

                success_count = sum(1 for line in lines if "‚úÖ" in line or "SUCCESS" in line)
                error_count = sum(1 for line in lines if "‚ùå" in line or "ERROR" in line)

                print(f"  ‚úÖ Sikeres fut√°sok: {success_count}")
                print(f"  ‚ùå Hib√°k: {error_count}")

                if error_count > 0:
                    print("  üö® Legut√≥bbi hib√°k:")
                    for line in lines[-10:]:
                        if "‚ùå" in line or "ERROR" in line:
                            print(f"    {line.strip()}")

            except Exception as e:
                print(f"  ‚ùå Log olvas√°si hiba: {e}")

    def check_system_health(self):
        """Rendszer eg√©szs√©g√©nek ellen≈ërz√©se"""
        print("\\nüè• RENDSZER EG√âSZS√âG:")

        # Python k√∂rnyezet
        try:
            result = subprocess.run([sys.executable, '--version'],
                                 capture_output=True, text=True)
            print(f"  üêç Python: {result.stdout.strip()}")
        except:
            print("  ‚ùå Python hiba")

        # Virtu√°lis k√∂rnyezet
        venv_python = os.path.join(self.project_root, 'venv', 'bin', 'python')
        if os.path.exists(venv_python):
            print("  ‚úÖ Virtual environment: OK")
        else:
            print("  ‚ùå Virtual environment: Hi√°nyzik")

        # Adatf√°jlok
        data_dirs = ['data/premier_league', 'data/mls', 'data/brasileirao']
        for data_dir in data_dirs:
            full_path = os.path.join(self.project_root, data_dir)
            if os.path.exists(full_path):
                csv_files = glob.glob(os.path.join(full_path, "*.csv"))
                print(f"  üìä {data_dir}: {len(csv_files)} f√°jl")
            else:
                print(f"  ‚ö†Ô∏è {data_dir}: Hi√°nyzik")

        # Eredm√©ny f√°jlok
        results_dir = os.path.join(self.project_root, 'results')
        if os.path.exists(results_dir):
            result_files = glob.glob(os.path.join(results_dir, "*"))
            print(f"  üìà Results: {len(result_files)} f√°jl")

    def generate_daily_summary(self):
        """Napi √∂sszefoglal√≥ gener√°l√°sa"""
        print("\\nüìã NAPI √ñSSZEFOGLAL√ì:")
        today = datetime.now().strftime('%Y-%m-%d')

        # Mai eredm√©nyek keres√©se
        results_pattern = os.path.join(self.project_root, 'results', f"*{today}*")
        today_results = glob.glob(results_pattern)

        print(f"  üìÖ D√°tum: {today}")
        print(f"  üìä Mai eredm√©nyek: {len(today_results)} f√°jl")

        for result_file in today_results:
            print(f"    ‚Ä¢ {os.path.basename(result_file)}")

if __name__ == "__main__":
    monitor = SystemMonitor()
    monitor.check_daily_runs()
    monitor.check_system_health()
    monitor.generate_daily_summary()
'''

        monitor_path = os.path.join(self.project_root, 'src', 'automation', 'system_monitor.py')
        with open(monitor_path, 'w') as f:
            f.write(monitoring_script)

        print("üìä MONITORING RENDSZER")
        print("=" * 25)
        print("üéØ Funkci√≥k:")
        print("  ‚Ä¢ Napi fut√°sok k√∂vet√©se")
        print("  ‚Ä¢ Hibajelz√©sek")
        print("  ‚Ä¢ Rendszer √°llapot")
        print("  ‚Ä¢ √ñsszefoglal√≥ jelent√©sek")
        print(f"‚úÖ Monitor script: {monitor_path}")

        return monitor_path

def main():
    """F≈ëprogram"""
    print("ü§ñ AUTOMATIZ√ÅL√ÅSI RENDSZER TELEP√çT√âSE")
    print("=" * 45)

    automation = AutomationSystem()

    # 1. Cron job
    print("1Ô∏è‚É£ CRON JOB BE√ÅLL√çT√ÅSA:")
    cron_script, cron_entry = automation.create_cron_job(time="08:00", league="premier_league")

    print("\n" + "="*50)

    # 2. Telegram bot
    print("2Ô∏è‚É£ TELEGRAM BOT:")
    telegram_script = automation.setup_telegram_bot()

    print("\n" + "="*50)

    # 3. Email notifications
    print("3Ô∏è‚É£ EMAIL √âRTES√çT√âSEK:")
    email_script = automation.setup_email_notifications()

    print("\n" + "="*50)

    # 4. Monitoring
    print("4Ô∏è‚É£ MONITORING RENDSZER:")
    monitor_script = automation.create_monitoring_script()

    print("\n" + "="*50)
    print("üéØ GYORS IND√çT√ÅS:")
    print("1. Cron job aktiv√°l√°sa:")
    print("   crontab -e")
    print(f"   # Add hozz√°: {cron_entry}")
    print("\n2. Telegram bot tesztel√©se:")
    print(f"   python {telegram_script}")
    print("\n3. Email √©rtes√≠t√©s tesztel√©se:")
    print(f"   python {email_script}")
    print("\n4. Monitoring futtat√°sa:")
    print(f"   python {monitor_script}")

    print("\n‚úÖ Automatiz√°l√°si rendszer telep√≠tve!")

if __name__ == "__main__":
    main()
