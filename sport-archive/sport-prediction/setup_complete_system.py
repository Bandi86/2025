#!/usr/bin/env python3
"""
üîß COMPLETE SYSTEM SETUP
Teljes rendszer telep√≠t√©s √©s konfigur√°ci√≥
"""

import os
import sys
import subprocess
import json
from datetime import datetime

class SystemSetup:
    """Teljes rendszer telep√≠t≈ë"""

    def __init__(self):
        self.project_root = os.path.dirname(__file__)
        self.venv_path = os.path.join(self.project_root, 'venv')

    def check_python_version(self):
        """Python verzi√≥ ellen≈ërz√©se"""
        print("üêç Python verzi√≥ ellen≈ërz√©se...")
        version = sys.version_info

        if version.major < 3 or (version.major == 3 and version.minor < 8):
            print(f"‚ùå Python 3.8+ sz√ºks√©ges, jelenlegi: {version.major}.{version.minor}")
            return False

        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True

    def create_virtual_environment(self):
        """Virtual environment l√©trehoz√°sa"""
        print("üì¶ Virtual environment...")

        if os.path.exists(self.venv_path):
            print("‚úÖ Virtual environment m√°r l√©tezik")
            return True

        try:
            subprocess.run([sys.executable, '-m', 'venv', 'venv'],
                          cwd=self.project_root, check=True)
            print("‚úÖ Virtual environment l√©trehozva")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Virtual environment l√©trehoz√°sa sikertelen: {e}")
            return False

    def install_dependencies(self):
        """F√ºgg≈ës√©gek telep√≠t√©se"""
        print("üì• F√ºgg≈ës√©gek telep√≠t√©se...")

        # Requirements.txt l√©trehoz√°sa ha nincs
        requirements = [
            "pandas>=1.5.0",
            "numpy>=1.21.0",
            "scikit-learn>=1.1.0",
            "requests>=2.28.0",
            "matplotlib>=3.5.0",
            "seaborn>=0.11.0",
            "python-telegram-bot>=20.0",
            "schedule>=1.2.0",
            "psutil>=5.9.0"
        ]

        requirements_path = os.path.join(self.project_root, 'requirements.txt')
        if not os.path.exists(requirements_path):
            with open(requirements_path, 'w') as f:
                f.write('\n'.join(requirements))
            print("‚úÖ requirements.txt l√©trehozva")

        # Pip upgrade
        venv_pip = os.path.join(self.venv_path, 'bin', 'pip')
        try:
            subprocess.run([venv_pip, 'install', '--upgrade', 'pip'], check=True)
            subprocess.run([venv_pip, 'install', '-r', requirements_path], check=True)
            print("‚úÖ F√ºgg≈ës√©gek telep√≠tve")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå F√ºgg≈ës√©gek telep√≠t√©se sikertelen: {e}")
            return False

    def setup_directory_structure(self):
        """K√∂nyvt√°r strukt√∫ra be√°ll√≠t√°sa"""
        print("üìÅ K√∂nyvt√°r strukt√∫ra...")

        directories = [
            'data/premier_league',
            'data/mls',
            'data/brasileirao',
            'data/j_league',
            'data/a_league',
            'results',
            'logs',
            'scripts',
            'archive',
            'docs'
        ]

        for directory in directories:
            full_path = os.path.join(self.project_root, directory)
            os.makedirs(full_path, exist_ok=True)

        print("‚úÖ K√∂nyvt√°rak l√©trehozva")
        return True

    def setup_sample_data(self):
        """Minta adatok gener√°l√°sa"""
        print("üî¨ Minta adatok gener√°l√°sa...")

        try:
            # MLS setup
            mls_setup_script = os.path.join(self.project_root, 'setup_mls.py')
            if os.path.exists(mls_setup_script):
                venv_python = os.path.join(self.venv_path, 'bin', 'python')
                subprocess.run([venv_python, mls_setup_script], check=True)

            # Multi-league setup
            multi_league_script = os.path.join(self.project_root, 'src', 'api', 'multi_league_system.py')
            if os.path.exists(multi_league_script):
                subprocess.run([venv_python, multi_league_script], check=True)

            print("‚úÖ Minta adatok gener√°lva")
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è Minta adatok gener√°l√°sa r√©szben sikertelen: {e}")
            return False

    def create_config_files(self):
        """Konfigur√°ci√≥s f√°jlok l√©trehoz√°sa"""
        print("‚öôÔ∏è Konfigur√°ci√≥s f√°jlok...")

        # Main config
        config = {
            'version': '2.0.0',
            'created': datetime.now().isoformat(),
            'leagues': {
                'premier_league': {'enabled': True, 'priority': 1},
                'mls': {'enabled': True, 'priority': 2},
                'brasileirao': {'enabled': True, 'priority': 3},
                'j_league': {'enabled': True, 'priority': 4}
            },
            'automation': {
                'enabled': False,
                'cron_jobs': False,
                'notifications': False
            },
            'api': {
                'api_sports_enabled': False,
                'rate_limit': 1000,
                'timeout': 15
            },
            'betting': {
                'default_bankroll': 1000,
                'max_daily_risk': 0.08,
                'min_edge': 0.05,
                'min_confidence': 0.4
            }
        }

        config_path = os.path.join(self.project_root, 'config.json')
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=2)

        # Environment template
        env_template = """# SPORT BETTING PREDICTION SYSTEM
# K√∂rnyezeti v√°ltoz√≥k

# API kulcsok
API_SPORTS_KEY=your_api_sports_key_here

# Telegram Bot (opcion√°lis)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHAT_ID=your_chat_id

# Email (opcion√°lis)
EMAIL_SMTP_SERVER=smtp.gmail.com
EMAIL_SMTP_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASSWORD=your_app_password

# Be√°ll√≠t√°sok
DEFAULT_LEAGUE=premier_league
LOG_LEVEL=INFO
"""

        env_path = os.path.join(self.project_root, '.env.template')
        with open(env_path, 'w') as f:
            f.write(env_template)

        print("‚úÖ Konfigur√°ci√≥s f√°jlok l√©trehozva")
        return True

    def run_initial_tests(self):
        """Kezdeti tesztek futtat√°sa"""
        print("üß™ Rendszer tesztek...")

        venv_python = os.path.join(self.venv_path, 'bin', 'python')

        # Test imports
        test_script = '''
import sys
sys.path.append("src/core")
sys.path.append("src/tools")
sys.path.append("src/api")

try:
    import pandas as pd
    import numpy as np
    from data_loader import load_data
    print("‚úÖ Core imports OK")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    sys.exit(1)

# Test basic functionality
try:
    from realistic_betting_system import RealisticBettingSystem
    system = RealisticBettingSystem()
    print("‚úÖ Betting system OK")
except Exception as e:
    print(f"‚ö†Ô∏è Betting system warning: {e}")

print("üéâ Basic tests passed!")
'''

        test_file = os.path.join(self.project_root, 'test_setup.py')
        with open(test_file, 'w') as f:
            f.write(test_script)

        try:
            result = subprocess.run([venv_python, test_file],
                                  capture_output=True, text=True,
                                  cwd=self.project_root)

            if result.returncode == 0:
                print("‚úÖ Rendszer tesztek sikeresek")
                # Clean up test file
                os.remove(test_file)
                return True
            else:
                print(f"‚ùå Tesztek sikertelenek:\n{result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå Teszt futtat√°s hiba: {e}")
            return False

    def create_usage_guide(self):
        """Haszn√°lati √∫tmutat√≥ l√©trehoz√°sa"""
        print("üìñ Haszn√°lati √∫tmutat√≥...")

        guide = """# üéØ SPORT BETTING PREDICTION SYSTEM
## Gyors Kezd√©s √ötmutat√≥

### üöÄ Alapvet≈ë haszn√°lat

#### 1. Napi javaslatok (Premier League)
```bash
python master.py --daily
```

#### 2. K√ºl√∂nb√∂z≈ë lig√°k
```bash
python master.py --daily --league mls           # MLS
python master.py --daily --league brasileirao   # Brasileir√£o
python master.py --daily --league j_league      # J1 League
```

#### 3. Live API elemz√©s (API kulccsal)
```bash
export API_SPORTS_KEY="your_key"
python master.py --live --league premier_league
```

#### 4. Automatiz√°l√°s be√°ll√≠t√°sa
```bash
python master.py --setup automation
```

### üìä Teljes√≠tm√©ny tracking
```bash
python master.py --track
```

### üîß Rendszer monitoring
```bash
python master.py --monitor
```

### üåç Multi-liga rendszer
```bash
# √ñsszes liga be√°ll√≠t√°sa
python master.py --setup multi

# T√∂bb liga napi elemz√©se
for league in premier_league mls brasileirao j_league; do
    python master.py --daily --league $league
done
```

### üì° API konfigur√°ci√≥

1. Regisztr√°lj az API-Sports-ra: https://rapidapi.com/api-sports/
2. √Åll√≠tsd be a k√∂rnyezeti v√°ltoz√≥t:
   ```bash
   export API_SPORTS_KEY="your_api_key"
   ```

### ü§ñ Automatiz√°l√°s

Az automation rendszer:
- Napi cron job-okat hoz l√©tre
- Liga-specifikus √ºtemez√©st haszn√°l
- Telegram/email √©rtes√≠t√©seket k√ºld
- Teljes√≠tm√©nyt k√∂veti

### üìÅ F√°jl strukt√∫ra

```
sport-prediction/
‚îú‚îÄ‚îÄ master.py              # F≈ë vez√©rl≈ë script
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ core/              # Alapvet≈ë modulok
‚îÇ   ‚îú‚îÄ‚îÄ tools/             # Elemz≈ë eszk√∂z√∂k
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API kliensek
‚îÇ   ‚îú‚îÄ‚îÄ automation/        # Automatiz√°l√°s
‚îÇ   ‚îî‚îÄ‚îÄ tracking/          # Teljes√≠tm√©ny k√∂vet√©s
‚îú‚îÄ‚îÄ data/                  # Liga adatok
‚îú‚îÄ‚îÄ results/               # Eredm√©nyek
‚îú‚îÄ‚îÄ logs/                  # Log f√°jlok
‚îî‚îÄ‚îÄ docs/                  # Dokument√°ci√≥
```

### üí° Tippek

- Kezdd a szimul√°ci√≥val (--daily)
- Teszteld az API kapcsolatot (--live)
- √Åll√≠tsd be az automatiz√°l√°st h√©tv√©g√©re
- K√∂vesd a teljes√≠tm√©nyt hetente
- Haszn√°lj konzervat√≠v t√©teket

### üÜò Hibaelh√°r√≠t√°s

1. **Import hib√°k**: Ellen≈ërizd a virtual environment-et
2. **API hib√°k**: Ellen≈ërizd az API kulcsot √©s kv√≥t√°t
3. **Adatok hi√°nya**: Futtasd a minta adatok gener√°l√°st
4. **Cron hib√°k**: Ellen≈ërizd a script jogosults√°gokat

Tov√°bbi seg√≠ts√©g: docs/ k√∂nyvt√°r vagy GitHub Issues.
"""

        guide_path = os.path.join(self.project_root, 'QUICK_START.md')
        with open(guide_path, 'w') as f:
            f.write(guide)

        print("‚úÖ Haszn√°lati √∫tmutat√≥ l√©trehozva: QUICK_START.md")
        return True

    def setup_complete(self):
        """Telep√≠t√©s √∂sszefoglal√°sa"""
        print("\n" + "="*60)
        print("üéâ TELEP√çT√âS BEFEJEZVE!")
        print("="*60)

        print("\n‚úÖ Telep√≠tett komponensek:")
        print("  üì¶ Virtual environment")
        print("  üêç Python f√ºgg≈ës√©gek")
        print("  üìÅ K√∂nyvt√°r strukt√∫ra")
        print("  üî¨ Minta adatok")
        print("  ‚öôÔ∏è Konfigur√°ci√≥s f√°jlok")
        print("  üìñ Haszn√°lati √∫tmutat√≥")

        print("\nüöÄ K√∂vetkez≈ë l√©p√©sek:")
        print("  1. N√©zd meg: QUICK_START.md")
        print("  2. Teszteld: python master.py --daily")
        print("  3. API be√°ll√≠t√°s: export API_SPORTS_KEY='your_key'")
        print("  4. Automatiz√°l√°s: python master.py --setup automation")

        print("\nüí° Hasznos parancsok:")
        print("  python master.py --help          # S√∫g√≥")
        print("  python master.py --daily         # Napi elemz√©s")
        print("  python master.py --live          # Live API elemz√©s")
        print("  python master.py --track         # Teljes√≠tm√©ny")

        print("\nüéØ Siker√ºlt! A rendszer haszn√°latra k√©sz.")

    def run_full_setup(self):
        """Teljes telep√≠t√©s futtat√°sa"""
        print("üîß SPORT BETTING PREDICTION SYSTEM")
        print("üöÄ Teljes rendszer telep√≠t√©se kezd≈ëdik...\n")

        steps = [
            ("Python verzi√≥", self.check_python_version),
            ("Virtual environment", self.create_virtual_environment),
            ("F√ºgg≈ës√©gek", self.install_dependencies),
            ("K√∂nyvt√°rak", self.setup_directory_structure),
            ("Minta adatok", self.setup_sample_data),
            ("Konfigur√°ci√≥k", self.create_config_files),
            ("Rendszer tesztek", self.run_initial_tests),
            ("Haszn√°lati √∫tmutat√≥", self.create_usage_guide)
        ]

        failed_steps = []

        for step_name, step_func in steps:
            print(f"\n‚è≥ {step_name}...")
            try:
                if not step_func():
                    failed_steps.append(step_name)
            except Exception as e:
                print(f"‚ùå {step_name} hiba: {e}")
                failed_steps.append(step_name)

        if failed_steps:
            print(f"\n‚ö†Ô∏è Sikertelen l√©p√©sek: {', '.join(failed_steps)}")
            print("üí° Ezek manu√°lisan is be√°ll√≠that√≥k k√©s≈ëbb.")

        self.setup_complete()

def main():
    setup = SystemSetup()
    setup.run_full_setup()

if __name__ == "__main__":
    main()
