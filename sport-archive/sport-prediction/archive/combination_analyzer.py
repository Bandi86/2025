"""
Kombin√°lt fogad√°si szimul√°tor √©s elemz≈ë
Megmutatja a kombin√°lt szelv√©nyek potenci√°lis profitj√°t
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime

class CombinationSimulator:
    """Kombin√°lt fogad√°sok szimul√°ci√≥ja √©s elemz√©se."""

    def __init__(self, initial_bankroll=100):
        self.initial_bankroll = initial_bankroll

    def simulate_combination_betting(self, combinations, stake_per_combo=1.0, max_combos=50):
        """Kombin√°lt fogad√°sok szimul√°ci√≥ja."""

        results = []
        bankroll = self.initial_bankroll
        total_stake = 0
        total_winnings = 0

        print(f"\nüé∞ KOMBIN√ÅLT FOGAD√ÅSOK SZIMUL√ÅCI√ìJA")
        print("=" * 50)
        print(f"Kezd≈ë bankroll: {self.initial_bankroll}")
        print(f"T√©t/kombin√°ci√≥: {stake_per_combo}")
        print(f"Szimul√°land√≥ kombin√°ci√≥k: {min(len(combinations), max_combos)}")

        for i, combo in enumerate(combinations[:max_combos]):
            if bankroll < stake_per_combo:
                print(f"‚ö†Ô∏è Nincs el√©g p√©nz a {i+1}. kombin√°ci√≥hoz")
                break

            stake = stake_per_combo
            total_stake += stake
            bankroll -= stake

            if combo['all_correct']:
                # Nyer≈ë kombin√°ci√≥
                winnings = stake * combo['combined_odds']
                profit = winnings - stake
                bankroll += winnings
                total_winnings += winnings

                results.append({
                    'combo_id': i+1,
                    'combo_size': combo['combo_size'],
                    'stake': stake,
                    'odds': combo['combined_odds'],
                    'probability': combo['combined_probability'],
                    'won': True,
                    'winnings': winnings,
                    'profit': profit,
                    'bankroll': bankroll
                })
            else:
                # Veszt≈ë kombin√°ci√≥
                results.append({
                    'combo_id': i+1,
                    'combo_size': combo['combo_size'],
                    'stake': stake,
                    'odds': combo['combined_odds'],
                    'probability': combo['combined_probability'],
                    'won': False,
                    'winnings': 0,
                    'profit': -stake,
                    'bankroll': bankroll
                })

        # Eredm√©nyek √∂sszes√≠t√©se
        total_profit = bankroll - self.initial_bankroll
        roi = (total_profit / total_stake * 100) if total_stake > 0 else 0
        win_rate = sum(1 for r in results if r['won']) / len(results) * 100 if results else 0

        print(f"\nüìä SZIMUL√ÅCI√ì EREDM√âNYEI:")
        print(f"   Kombin√°ci√≥k sz√°ma: {len(results)}")
        print(f"   √ñsszes t√©t: {total_stake:.2f}")
        print(f"   √ñsszes nyerem√©ny: {total_winnings:.2f}")
        print(f"   Nett√≥ profit: {total_profit:.2f}")
        print(f"   ROI: {roi:.2f}%")
        print(f"   Win rate: {win_rate:.1f}%")
        print(f"   V√©gs≈ë bankroll: {bankroll:.2f}")

        if roi > 0:
            print("   ‚úÖ Profit√°bilis kombin√°lt strat√©gia!")
        else:
            print("   ‚ùå Vesztes√©ges kombin√°lt strat√©gia")

        return results, {
            'total_profit': total_profit,
            'roi': roi,
            'win_rate': win_rate,
            'final_bankroll': bankroll,
            'combinations_tested': len(results)
        }

    def analyze_combination_patterns(self, combinations):
        """Kombin√°ci√≥s mint√°k elemz√©se."""

        print(f"\nüîç KOMBIN√ÅCI√ìS MINT√ÅK ELEMZ√âSE")
        print("=" * 50)

        # M√©ret szerinti bont√°s
        size_analysis = {}
        for combo in combinations:
            size = combo['combo_size']
            if size not in size_analysis:
                size_analysis[size] = {
                    'total': 0,
                    'successful': 0,
                    'total_odds': 0,
                    'total_prob': 0
                }

            size_analysis[size]['total'] += 1
            if combo['all_correct']:
                size_analysis[size]['successful'] += 1
            size_analysis[size]['total_odds'] += combo['combined_odds']
            size_analysis[size]['total_prob'] += combo['combined_probability']

        print("üìà M√©ret szerinti elemz√©s:")
        for size, data in sorted(size_analysis.items()):
            success_rate = (data['successful'] / data['total']) * 100
            avg_odds = data['total_odds'] / data['total']
            avg_prob = data['total_prob'] / data['total']

            print(f"   {size} meccs: {data['successful']}/{data['total']} sikeres ({success_rate:.1f}%)")
            print(f"            √Åtlag odds: {avg_odds:.2f}, √Åtlag prob: {avg_prob:.3f}")

        # Top sikeres kombin√°ci√≥k
        successful_combos = [c for c in combinations if c['all_correct']]
        if successful_combos:
            print(f"\nüèÜ TOP 5 SIKERES KOMBIN√ÅCI√ì:")
            successful_combos.sort(key=lambda x: x['combined_odds'], reverse=True)

            for i, combo in enumerate(successful_combos[:5], 1):
                print(f"   {i}. {combo['combo_size']} meccs, odds: {combo['combined_odds']:.2f}, "
                      f"prob: {combo['combined_probability']:.3f}")

        return size_analysis

    def kelly_combination_strategy(self, combinations, max_kelly_fraction=0.02):
        """Kelly krit√©rium alkalmaz√°sa kombin√°ci√≥kra."""

        print(f"\nüí∞ KELLY KOMBIN√ÅCI√ì STRAT√âGIA")
        print("=" * 50)

        bankroll = self.initial_bankroll
        results = []

        for i, combo in enumerate(combinations):
            # Kelly sz√°m√≠t√°s kombin√°ci√≥ra
            prob = combo['combined_probability']
            odds = combo['combined_odds']

            if prob > 0 and odds > 1:
                kelly_frac = (prob * (odds - 1) - (1 - prob)) / (odds - 1)
                kelly_frac = max(0, min(kelly_frac, max_kelly_fraction))  # Konzervat√≠v limit

                # Csak pozit√≠v Kelly √©rt√©k eset√©n
                if kelly_frac > 0.001:  # Min 0.1%
                    stake = bankroll * kelly_frac

                    if combo['all_correct']:
                        profit = (odds - 1) * stake
                        bankroll += profit
                    else:
                        profit = -stake
                        bankroll += profit

                    results.append({
                        'combo_id': i+1,
                        'combo_size': combo['combo_size'],
                        'kelly_fraction': kelly_frac,
                        'stake': stake,
                        'odds': odds,
                        'probability': prob,
                        'won': combo['all_correct'],
                        'profit': profit,
                        'bankroll': bankroll
                    })

        if results:
            total_profit = bankroll - self.initial_bankroll
            roi = (total_profit / self.initial_bankroll) * 100
            win_rate = sum(1 for r in results if r['won']) / len(results) * 100

            print(f"   Kelly kombin√°ci√≥k: {len(results)}")
            print(f"   Nett√≥ profit: {total_profit:.2f}")
            print(f"   ROI: {roi:.2f}%")
            print(f"   Win rate: {win_rate:.1f}%")
            print(f"   V√©gs≈ë bankroll: {bankroll:.2f}")

            return results, roi
        else:
            print("   Nincs pozit√≠v Kelly √©rt√©k≈± kombin√°ci√≥")
            return [], 0

    def monthly_combo_analysis(self, combinations, target_monthly_profit=50):
        """Havi kombin√°ci√≥s elemz√©s."""

        print(f"\nüìÖ HAVI KOMBIN√ÅCI√ìS ELEMZ√âS")
        print("=" * 50)
        print(f"C√©l havi profit: {target_monthly_profit}")

        # Felt√©telezz√ºk, hogy havonta ~76 m√©rk≈ëz√©s van (38 fordul√≥/√©v)
        monthly_games = 76
        successful_combos = [c for c in combinations if c['all_correct']]

        if not successful_combos:
            print("   Nincs sikeres kombin√°ci√≥ az elemz√©shez")
            return

        # K√ºl√∂nb√∂z≈ë t√©t strat√©gi√°k szimul√°ci√≥ja
        strategies = [
            {'name': 'Konzervat√≠v', 'stake_per_combo': 1.0, 'max_combos_per_month': 20},
            {'name': 'M√©rs√©kelt', 'stake_per_combo': 2.0, 'max_combos_per_month': 15},
            {'name': 'Agressz√≠v', 'stake_per_combo': 5.0, 'max_combos_per_month': 10},
        ]

        for strategy in strategies:
            print(f"\n   üìä {strategy['name']} strat√©gia:")

            # Sikeres kombin√°ci√≥k ar√°ny√°nak becsl√©se
            success_rate = len(successful_combos) / len(combinations)
            monthly_successful = int(strategy['max_combos_per_month'] * success_rate)

            if monthly_successful > 0:
                # √Åtlag nyerem√©ny sz√°m√≠t√°sa
                avg_odds = np.mean([c['combined_odds'] for c in successful_combos[:monthly_successful]])
                monthly_profit = (monthly_successful * strategy['stake_per_combo'] *
                                (avg_odds - 1)) - (strategy['max_combos_per_month'] - monthly_successful) * strategy['stake_per_combo']

                monthly_roi = (monthly_profit / (strategy['max_combos_per_month'] * strategy['stake_per_combo'])) * 100

                print(f"     Kombin√°ci√≥/h√≥: {strategy['max_combos_per_month']}")
                print(f"     Sikeres/h√≥: {monthly_successful}")
                print(f"     T√©t/kombin√°ci√≥: {strategy['stake_per_combo']}")
                print(f"     Havi profit: {monthly_profit:.2f}")
                print(f"     Havi ROI: {monthly_roi:.1f}%")

                if monthly_profit >= target_monthly_profit:
                    print("     ‚úÖ El√©ri a profit c√©lt!")
                else:
                    print("     ‚ùå Nem √©ri el a profit c√©lt")

def load_and_analyze_combinations():
    """Kombin√°ci√≥k bet√∂lt√©se √©s elemz√©se."""

    try:
        with open('improved_strategy_combinations.json', 'r') as f:
            combinations_data = json.load(f)

        print(f"üìÅ Bet√∂ltve: {len(combinations_data)} kombin√°ci√≥")

        simulator = CombinationSimulator()

        # Visszakonvert√°l√°s a teljes form√°tumba (demo c√©lra)
        combinations = []
        for i, data in enumerate(combinations_data):
            combinations.append({
                'combo_size': data['combo_size'],
                'combined_odds': data['combined_odds'],
                'combined_probability': data['combined_probability'],
                'expected_value': data['expected_value'],
                'all_correct': data.get('all_correct', i < len(combinations_data) * 0.1),  # 10% sikeres demo
                'min_confidence': data['min_confidence']
            })

        # Elemz√©sek futtat√°sa
        simulator.analyze_combination_patterns(combinations)
        simulator.simulate_combination_betting(combinations, stake_per_combo=2.0, max_combos=30)
        simulator.kelly_combination_strategy(combinations)
        simulator.monthly_combo_analysis(combinations)

    except FileNotFoundError:
        print("‚ùå Nincs 'improved_strategy_combinations.json' f√°jl")
        print("   Futtasd el≈ëbb az improved_main.py-t!")

if __name__ == "__main__":
    load_and_analyze_combinations()
