#!/usr/bin/env python3
"""
üöÄ STRUKTUR√ÅLT FOGAD√ÅSI ESEM√âNYEK KINYER≈ê

Specializ√°lt PDF feldolgoz√≥ amely k√©pes:
- Fogad√°si esem√©nyek felismer√©s√©re magyar form√°tumban
- Piacok csoportos√≠t√°s√°ra egy meccshez
- Nem k√≠v√°nt sport√°gak kisz≈±r√©s√©re
- Struktur√°lt meccs adatok gener√°l√°s√°ra
"""

import re
import json
import os
import pdfplumber
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass, asdict

@dataclass
class BettingMarket:
    """Fogad√°si piac"""
    market_type: str  # "1X2", "Both Teams To Score", "Over/Under", etc.
    odds: Dict[str, float]  # {"home": 1.83, "draw": 3.95, "away": 2.87}
    market_line: Optional[str] = None  # "2.5" for over/under, "+1" for handicap

@dataclass
class StructuredMatch:
    """Struktur√°lt meccs adatok"""
    home_team: str
    away_team: str
    date: Optional[str] = None
    time: Optional[str] = None
    league: Optional[str] = None
    sport: str = "football"
    markets: List[BettingMarket] = None

    def __post_init__(self):
        if self.markets is None:
            self.markets = []

class StructuredBettingExtractor:
    """Struktur√°lt fogad√°si esem√©nyek kinyer≈ë"""

    def __init__(self):
        self.matches: List[StructuredMatch] = []
        self.current_date = None
        self.current_league = None

        # Nem k√≠v√°nt sport√°gak
        self.excluded_sports = [
            "n≈ëi", "noi", "women", "female", "ladies",
            "k√©zilabda", "handball", "kos√°rlabda", "basketball",
            "j√©gkorong", "hockey", "tenisz", "tennis",
            "amerikai foci", "american football", "rugby"
        ]

        # Liga mapping
        self.league_mapping = {
            "norv√©g": "Norwegian Division",
            "finn": "Finnish League",
            "magyar": "Hungarian League",
            "premier": "Premier League",
            "bundesliga": "Bundesliga",
            "la liga": "La Liga",
            "serie a": "Serie A",
            "ligue 1": "Ligue 1"
        }

    def extract_from_pdf(self, pdf_path: str) -> List[Dict]:
        """PDF feldolgoz√°s √©s struktur√°lt adatok kinyer√©se"""
        print(f"üöÄ Struktur√°lt PDF feldolgoz√°s: {pdf_path}")

        self.matches = []

        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page_num, page in enumerate(pdf.pages):
                    print(f"üìÑ Oldal {page_num + 1} feldolgoz√°sa...")

                    # Sz√∂veg kinyer√©se
                    text = page.extract_text()
                    if text:
                        try:
                            self._process_page_text(text)
                        except Exception as page_error:
                            print(f"‚ö†Ô∏è Oldal {page_num + 1} feldolgoz√°si hiba: {page_error}")
                            # Folytatjuk a k√∂vetkez≈ë oldallal, ne √°lljon le

        except Exception as e:
            print(f"‚ùå PDF feldolgoz√°si hiba: {e}")
            # Ne t√∂r√∂lj√ºk a self.matches-t, ink√°bb visszaadjuk amit siker√ºlt feldolgozni

        # Struktur√°lt adatok visszaad√°sa
        result = [self._match_to_dict(match) for match in self.matches]
        print(f"‚úÖ {len(result)} meccs feldolgozva")

        return result

    def _process_page_text(self, text: str):
        """Oldal sz√∂veg√©nek feldolgoz√°sa (robosztusabb meccs/piac csoportos√≠t√°s)"""
        lines = text.split('\n')
        current_date = self.current_date
        current_league = self.current_league
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            # D√°tum felismer√©se
            if self._is_date_line(line):
                current_date = self._parse_date_line(line)
                self.current_date = current_date
                print(f"[DATE] {i}: {line}")
                i += 1
                continue
            # Liga felismer√©se
            if self._is_league_line(line):
                current_league = self._parse_league_line(line)
                self.current_league = current_league
                print(f"[LEAGUE] {i}: {line}")
                i += 1
                continue
            # F≈ë meccs sor felismer√©se
            if self._is_main_match_line(line):
                print(f"[MATCH] {i}: {line}")
                match_info = self._parse_main_match_line(line)
                if match_info:
                    match = StructuredMatch(
                        home_team=match_info['home_team'],
                        away_team=match_info['away_team'],
                        date=current_date,
                        time=match_info['time'],
                        league=current_league,
                        sport="football",
                        markets=[BettingMarket(
                            market_type="1X2",
                            odds={
                                "home": match_info['odds_home'],
                                "draw": match_info['odds_draw'],
                                "away": match_info['odds_away']
                            }
                        )]
                    )
                    next_i = self._collect_additional_markets(lines, i+1, match)
                    self.matches.append(match)
                    i = next_i + 1
                    continue
            # √öj: Liga/piac sor felismer√©se
            if hasattr(self, '_is_league_market_line') and self._is_league_market_line(line):
                print(f"[LEAGUE_MARKET] {i}: {line}")
                match_info = self._parse_league_market_line(line)
                if match_info:
                    # Odds dictionary l√©trehoz√°sa
                    odds_dict = match_info.get('odds_dict', {})
                    if 'value' in odds_dict:
                        # Egyszeres odds (pl. "1X2 d√∂ntetlen 2,45")
                        market_odds = {"value": odds_dict['value']}
                    elif 'option1' in odds_dict and 'option2' in odds_dict:
                        # Kett≈ës vagy h√°rmas odds
                        market_odds = odds_dict
                    else:
                        # Fallback: ha nem illeszkedik, akkor √ºres
                        market_odds = odds_dict

                    match = StructuredMatch(
                        home_team=match_info['home_team'],
                        away_team=match_info['away_team'],
                        date=current_date,
                        time=None,
                        league=current_league,
                        sport="football",
                        markets=[BettingMarket(
                            market_type=match_info['market_name'],
                            odds=market_odds
                        )]
                    )
                    self.matches.append(match)
                    print(f"‚úÖ Meccs hozz√°adva: {match.home_team} vs {match.away_team}")
                    i += 1
                    continue
            # Egy√©b sorok
            if line:
                print(f"[SKIP] {i}: {line}")
            i += 1

    def _is_date_line(self, line: str) -> bool:
        """D√°tum sor felismer√©se"""
        # "Kedd (2025. j√∫lius 1.)"
        date_patterns = [
            r'(h√©tf≈ë|kedd|szerda|cs√ºt√∂rt√∂k|p√©ntek|szombat|vas√°rnap)',
            r'\d{4}\.\s*(janu√°r|febru√°r|m√°rcius|√°prilis|m√°jus|j√∫nius|j√∫lius|augusztus|szeptember|okt√≥ber|november|december)',
            r'\(\d{4}\.\s*\w+\s*\d+\.\)'
        ]

        line_lower = line.lower()
        return any(re.search(pattern, line_lower) for pattern in date_patterns)

    def _parse_date_line(self, line: str) -> str:
        """D√°tum sor feldolgoz√°sa"""
        # Egyszer≈± d√°tum kinyer√©s - mostani implement√°ci√≥ban az aktu√°lis d√°tumot haszn√°ljuk
        return datetime.now().strftime("%Y-%m-%d")

    def _is_league_line(self, line: str) -> bool:
        """Liga sor felismer√©se"""
        line_lower = line.lower()
        return ("labdar√∫g√°s," in line_lower) or ("football" in line_lower)

    def _parse_league_line(self, line: str) -> str:
        """Liga sor feldolgoz√°sa"""
        # "Labdar√∫g√°s, Norv√©g 3., 1. csoport" -> "Norv√©g 3., 1. csoport"
        if "labdar√∫g√°s," in line.lower():
            return line.split("labdar√∫g√°s,", 1)[1].strip()
        return line.strip()

    def _should_exclude_league(self, league: str) -> bool:
        """Liga kisz≈±r√©se nem k√≠v√°nt sport√°gak alapj√°n"""
        if not league:
            return True

        league_lower = league.lower()
        return any(excluded in league_lower for excluded in self.excluded_sports)

    def _is_main_match_line(self, line: str) -> bool:
        """F≈ë meccs sor felismer√©se (1X2 odds-okkal)"""
        # "K 16:00 12470 Brann Bergen 2 - Pors Grenland 1,83 3,95 2,87"
        # Pattern: [K/m√°s] [id≈ë] [sz√°m] [csapat1] - [csapat2] [odds1] [odds2] [odds3]

        # Alapvet≈ë pattern ellen≈ërz√©s
        parts = line.split()
        if len(parts) < 7:
            return False

        # Utols√≥ 3 elem odds-nak kell lennie
        try:
            odds = parts[-3:]
            for odd in odds:
                odd_clean = odd.replace(',', '.')
                float(odd_clean)
            return True
        except ValueError:
            return False

    def _parse_main_match_line(self, line: str) -> Optional[Dict]:
        """F≈ë meccs sor feldolgoz√°sa"""
        try:
            # "K 16:00 12470 Brann Bergen 2 - Pors Grenland 1,83 3,95 2,87"
            parts = line.split()

            if len(parts) < 7:
                print(f"[DEBUG] T√∫l r√∂vid sor, kihagyva: {line}")
                return None

            # Odds kinyer√©se (utols√≥ 3 elem)
            odds_raw = parts[-3:]
            try:
                odds_home = float(odds_raw[0].replace(',', '.'))
                odds_draw = float(odds_raw[1].replace(',', '.'))
                odds_away = float(odds_raw[2].replace(',', '.'))
            except Exception as e:
                print(f"[DEBUG] Odds parse hiba: {odds_raw} | {line}")
                return None

            # Id≈ë kinyer√©se
            time = None
            if len(parts) > 1 and ':' in parts[1]:
                time = parts[1]

            # Csapat nevek kinyer√©se
            # A csapat neveket a " - " separator alapj√°n v√°lasztjuk sz√©t
            line_without_odds = ' '.join(parts[:-3])

            # Keress√ºk a " - " separatort
            if ' - ' in line_without_odds:
                team_part = line_without_odds.split(' - ')
                if len(team_part) >= 2:
                    home_part = team_part[0]
                    home_words = home_part.split()
                    if len(home_words) < 3:
                        print(f"[DEBUG] Nincs el√©g elem a home csapathoz: {home_words} | {line}")
                        return None
                    # Elt√°vol√≠tjuk az els≈ë 2-3 elemet (K, id≈ë, sz√°m)
                    home_team = ' '.join(home_words[2:]).strip()
                    away_team = team_part[1].strip()
                    if home_team and away_team:
                        return {
                            'home_team': home_team,
                            'away_team': away_team,
                            'time': time,
                            'odds_home': odds_home,
                            'odds_draw': odds_draw,
                            'odds_away': odds_away
                        }
                    else:
                        print(f"[DEBUG] √úres home vagy away team: {home_team=} {away_team=} | {line}")
                        return None
                else:
                    print(f"[DEBUG] Nincs k√©t r√©sz a ' - ' ut√°n: {team_part} | {line}")
                    return None
            else:
                print(f"[DEBUG] Nincs ' - ' separator: {line_without_odds} | {line}")
                return None

            return None

        except Exception as e:
            print(f"‚ö†Ô∏è Meccs sor feldolgoz√°si hiba: {e} | {line}")
            return None

    def _is_league_market_line(self, line: str) -> bool:
        """Liga √©s piac sor felismer√©se"""
        l = line.strip().lower()
        return ("labdar√∫g√°s" in l and " - " in l)

    def _parse_league_market_line(self, line: str) -> Optional[Dict]:
        """Liga √©s piac sor feldolgoz√°sa (1 vagy t√∂bb odds is lehet a v√©g√©n, robustabb csapatn√©v/piacn√©v kinyer√©s)"""
        try:
            # Keress√ºk a "Labdar√∫g√°s" sz√≥ hely√©t, √©s csak ut√°na dolgozzuk fel
            labda_idx = line.lower().find("labdar√∫g√°s")
            if labda_idx == -1:
                print(f"[DEBUG] Nincs 'Labdar√∫g√°s' a sorban: {line}")
                return None
            after_sport = line[labda_idx + len("labdar√∫g√°s"):].strip()
            # Odds a sor v√©g√©n (1-3 float, b√°rmi ut√°nuk)
            odds_matches = list(re.finditer(r'([0-9]+,[0-9]+)', line))
            if not odds_matches:
                print(f"[DEBUG] Nincs odds a sor v√©g√©n: {line}")
                return None
            odds = [float(m.group(1).replace(',', '.')) for m in odds_matches[-3:]]
            # Csapatok
            if ' - ' not in after_sport:
                print(f"[DEBUG] Nincs k√∂t≈ëjel a csapatsorban: {line}")
                return None
            teams_and_rest = after_sport.split(' - ', 1)
            team1 = teams_and_rest[0].strip()
            rest = teams_and_rest[1].strip()
            # Csapat2: az els≈ë sz√≥/ak√°r t√∂bb sz√≥, am√≠g nem piacn√©v vagy odds
            rest_parts = rest.split()
            team2_words = []
            for w in rest_parts:
                if re.match(r'^[0-9]+(,[0-9]+)?$', w):
                    break
                if w.lower() in ["k√©tes√©ly", "g√≥lsz√°m", "1x2", "szuper", "mindk√©t", "hendikep", "nyertes", "korai", "k√ºl√∂nbs√©g"]:
                    break
                team2_words.append(w)
            team2 = ' '.join(team2_words)
            # Piacn√©v: ami a csapat2 ut√°n van, odds el≈ëtt
            market_name_raw = rest[len(team2):].strip()
            # Piacn√©vb≈ël odds-okat √©s "nyertes" sz√≥t lev√°gjuk
            market_name = re.sub(r'[0-9]+,[0-9]+', '', market_name_raw)
            market_name = market_name.replace('nyertes', '').strip(' -.,')
            # Odds dict
            if len(odds) == 1:
                odds_dict = {"value": odds[0]}
            elif len(odds) == 2:
                odds_dict = {"option1": odds[0], "option2": odds[1]}
            elif len(odds) == 3:
                odds_dict = {"option1": odds[0], "option2": odds[1], "option3": odds[2]}
            else:
                odds_dict = {}
            print(f"[DEBUG] Kinyert: {team1=} {team2=} {market_name=} {odds_dict=}")
            return {
                'home_team': team1,
                'away_team': team2,
                'market_name': market_name,
                'odds_home': odds[0] if len(odds) > 0 else None,
                'odds_draw': odds[1] if len(odds) > 1 else None,
                'odds_away': odds[2] if len(odds) > 2 else None,
                'odds_dict': odds_dict
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Liga/piac sor feldolgoz√°si hiba: {e} | {line}")
            return None

    def _collect_additional_markets(self, lines: List[str], start_index: int, match: StructuredMatch) -> int:
        """Tov√°bbi piacok gy≈±jt√©se egy meccshez"""
        i = start_index

        while i < len(lines):
            line = lines[i].strip()

            # Ha √ºres sor vagy √∫j liga/d√°tum, akkor v√©ge
            if not line or self._is_date_line(line) or self._is_league_line(line):
                break

            # Ha √∫j f≈ë meccs sor, akkor v√©ge
            if self._is_main_match_line(line):
                return i - 1

            # Tov√°bbi piac felismer√©se ugyanahhoz a meccshez
            market = self._parse_additional_market_line(line, match)
            if market:
                match.markets.append(market)
                print(f"  üìä {market.market_type}")

            i += 1

        return i - 1

    def _parse_additional_market_line(self, line: str, match: StructuredMatch) -> Optional[BettingMarket]:
        """Tov√°bbi piac sor feldolgoz√°sa"""
        try:
            # Ellen≈ërizz√ºk, hogy tartalmazza-e a csapat neveket
            if match.home_team not in line or match.away_team not in line:
                return None

            # "K 16:00 12471 Brann Bergen 2 - Pors Grenland K√©tes√©ly (H: 1X, D: 12, V: X2) 1,25 1,16 1,56"

            # Piac t√≠pus felismer√©se
            market_type = self._identify_market_type(line)

            # Odds kinyer√©se
            parts = line.split()
            odds_values = []

            # Pr√≥b√°ljuk megtal√°lni az odds √©rt√©keket a sor v√©g√©n
            for part in reversed(parts):
                try:
                    odd = float(part.replace(',', '.'))
                    if 1.0 <= odd <= 50.0:  # Val√≥szer≈± odds tartom√°ny
                        odds_values.insert(0, odd)
                    else:
                        break
                except ValueError:
                    break

            if len(odds_values) >= 2:
                # Odds hozz√°rendel√©se a piac t√≠pus√°t√≥l f√ºgg≈ëen
                odds_dict = self._map_odds_to_market(market_type, odds_values)

                return BettingMarket(
                    market_type=market_type,
                    odds=odds_dict
                )

            return None

        except Exception as e:
            return None

    def _identify_market_type(self, line: str) -> str:
        """Piac t√≠pus azonos√≠t√°sa"""
        line_lower = line.lower()

        if "k√©tes√©ly" in line_lower or "double chance" in line_lower:
            return "Double Chance"
        elif "d√∂ntetlen" in line_lower and "visszaj√°r" in line_lower:
            return "Draw No Bet"
        elif "mindk√©t csapat szerez g√≥lt" in line_lower or "btts" in line_lower:
            return "Both Teams To Score"
        elif "g√≥lsz√°m" in line_lower or "over" in line_lower or "under" in line_lower:
            return "Over/Under"
        elif "hendikep" in line_lower or "handicap" in line_lower:
            return "Asian Handicap"
        else:
            return "Special Market"

    def _map_odds_to_market(self, market_type: str, odds_values: List[float]) -> Dict[str, float]:
        """Odds hozz√°rendel√©se a piac t√≠pus√°hoz"""
        if market_type == "Double Chance" and len(odds_values) >= 3:
            return {"1X": odds_values[0], "12": odds_values[1], "X2": odds_values[2]}
        elif market_type == "Draw No Bet" and len(odds_values) >= 2:
            return {"home": odds_values[0], "away": odds_values[1]}
        elif market_type == "Both Teams To Score" and len(odds_values) >= 2:
            return {"yes": odds_values[0], "no": odds_values[1]}
        elif market_type == "Over/Under" and len(odds_values) >= 2:
            return {"over": odds_values[0], "under": odds_values[1]}
        else:
            # √Åltal√°nos mapping
            if len(odds_values) == 2:
                return {"option1": odds_values[0], "option2": odds_values[1]}
            elif len(odds_values) == 3:
                return {"option1": odds_values[0], "option2": odds_values[1], "option3": odds_values[2]}
            else:
                return {"value": odds_values[0]}

    def _match_to_dict(self, match: StructuredMatch) -> Dict:
        """Meccs konvert√°l√°sa dictionary-be"""
        return {
            "home_team": match.home_team,
            "away_team": match.away_team,
            "date": match.date,
            "time": match.time,
            "league": match.league,
            "sport": match.sport,
            "markets": [asdict(market) for market in match.markets],
            # Kompatibilit√°s a r√©gi form√°tummal
            "home_score": None,
            "away_score": None,
            "season": "2024/25",
            "competition": match.league,
            "venue": None,
            "matchday": None
        }

def main():
    """CLI interface"""
    import argparse
    import sys

    parser = argparse.ArgumentParser(description='Struktur√°lt fogad√°si esem√©nyek kinyer≈ë')
    parser.add_argument('pdf_path', help='PDF f√°jl el√©r√©si √∫tvonala')
    parser.add_argument('--output', '-o', help='Kimeneti JSON f√°jl', required=True)
    parser.add_argument('--verbose', '-v', action='store_true', help='R√©szletes kimenet')

    args = parser.parse_args()

    # Argumentumok valid√°l√°sa
    if not os.path.exists(args.pdf_path):
        print(f"‚ùå PDF f√°jl nem tal√°lhat√≥: {args.pdf_path}")
        sys.exit(1)

    # Extrakci√≥ futtat√°sa
    extractor = StructuredBettingExtractor()
    matches = extractor.extract_from_pdf(args.pdf_path)

    # Eredm√©ny ment√©se
    try:
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(matches, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ {len(matches)} meccs mentve: {args.output}")

        if args.verbose and matches:
            print("\nüìã Els≈ë meccs p√©lda:")
            print(json.dumps(matches[0], indent=2, ensure_ascii=False))

    except Exception as e:
        print(f"‚ùå Ment√©si hiba: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
