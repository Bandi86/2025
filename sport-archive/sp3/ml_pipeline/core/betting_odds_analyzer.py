#!/usr/bin/env python3
"""
üöÄ SPORTFOGAD√ÅSI ODDS ELEMZ≈ê √âS ML RENDSZER

Ez a rendszer:
1. Sportfogad√°si PDF-ekb≈ël odds adatokat nyer ki
2. Meccs el≈ërejelz√©seket k√©sz√≠t a kinyert adatok alapj√°n
3. Value bet-eket azonos√≠t
4. Komplex statisztikai elemz√©st v√©gez
5. Automatikusan friss√ºl≈ë adatb√°zist √©p√≠t
"""

import os
import sys
import sqlite3
import pandas as pd
import numpy as np
import re
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

from advanced_football_extractor import AdvancedFootballExtractor
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
import joblib

class BettingOddsAnalyzer:
    """
    Sportfogad√°si odds elemz≈ë √©s ML rendszer
    """

    def __init__(self, pdf_folder: str = "/home/bandi/Documents/code/2025/sp3/pdf"):
        self.pdf_folder = pdf_folder
        self.db_path = "betting_analysis.db"
        self.model = None
        self.encoders = {}
        self.scaler = StandardScaler()

        # Odds adatok
        self.odds_data = []
        self.upcoming_matches = []
        self.value_bets = []

        # Adatb√°zis inicializ√°l√°sa
        self.init_betting_database()

    def init_betting_database(self):
        """Sportfogad√°si adatb√°zis l√©trehoz√°sa"""
        print("üóÉÔ∏è Sportfogad√°si adatb√°zis inicializ√°l√°sa...")

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # Odds adatok t√°bl√°ja
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS betting_odds (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                home_team TEXT NOT NULL,
                away_team TEXT NOT NULL,
                league TEXT,
                match_date TEXT,
                match_time TEXT,
                odds_home REAL,
                odds_draw REAL,
                odds_away REAL,
                over_under_2_5 REAL,
                btts_yes REAL,
                btts_no REAL,
                handicap_odds TEXT,  -- JSON
                bookmaker TEXT DEFAULT 'Tippmix',
                extracted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(home_team, away_team, match_date, bookmaker)
            )
        ''')

        # ML el≈ërejelz√©sek t√°bl√°ja
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS predictions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                home_team TEXT NOT NULL,
                away_team TEXT NOT NULL,
                predicted_result TEXT,
                confidence REAL,
                prob_home REAL,
                prob_draw REAL,
                prob_away REAL,
                odds_home REAL,
                odds_draw REAL,
                odds_away REAL,
                predicted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # Value bet-ek t√°bl√°ja
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS value_bets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                match_info TEXT,
                bet_type TEXT,
                odds REAL,
                model_probability REAL,
                value_percentage REAL,
                confidence REAL,
                recommended_stake REAL,
                identified_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        conn.commit()
        conn.close()
        print("‚úÖ Sportfogad√°si adatb√°zis inicializ√°lva")

    def run_betting_analysis(self):
        """Teljes sportfogad√°si elemz√©s"""
        print("üöÄ SPORTFOGAD√ÅSI ODDS ELEMZ√âS IND√çT√ÅSA")
        print("=" * 60)

        # 1. PDF-ek feldolgoz√°sa √©s odds kinyer√©se
        print("\n1Ô∏è‚É£ ODDS ADATOK KINYER√âSE")
        self._extract_betting_odds()

        # 2. Adatok tiszt√≠t√°sa √©s struktur√°l√°sa
        print("\n2Ô∏è‚É£ ADATOK STRUKTUR√ÅL√ÅSA")
        self._structure_odds_data()

        # 3. Statisztikai elemz√©s
        print("\n3Ô∏è‚É£ STATISZTIKAI ELEMZ√âS")
        self._statistical_analysis()

        # 4. ML modell √©p√≠t√©se (ha van t√∂rt√©nelmi adat)
        print("\n4Ô∏è‚É£ ML MODELL")
        self._build_betting_model()

        # 5. Value bet-ek azonos√≠t√°sa
        print("\n5Ô∏è‚É£ VALUE BET KERES√âS")
        self._find_value_opportunities()

        # 6. Komplex jelent√©s
        print("\n6Ô∏è‚É£ KOMPLEX JELENT√âS")
        self._generate_betting_report()

        print("\n‚úÖ SPORTFOGAD√ÅSI ELEMZ√âS BEFEJEZVE")

    def _extract_betting_odds(self):
        """Odds adatok kinyer√©se PDF-ekb≈ël"""
        pdf_files = [f for f in os.listdir(self.pdf_folder) if f.endswith('.pdf')]

        for pdf_file in pdf_files:
            pdf_path = os.path.join(self.pdf_folder, pdf_file)
            print(f"üìÑ Odds kinyer√©se: {pdf_file}")

            self._extract_odds_from_pdf(pdf_path)

        print(f"‚úÖ {len(self.odds_data)} odds adat kinyerve")

    def _extract_odds_from_pdf(self, pdf_path: str):
        """Odds kinyer√©se egy PDF-b≈ël"""
        extractor = AdvancedFootballExtractor()
        text = extractor._extract_with_pdfplumber(pdf_path)

        if not text:
            return

        # Odds pattern-ek keres√©se
        self._parse_tippmix_odds(text)

    def _parse_tippmix_odds(self, text: str):
        """Tippmix form√°tum√∫ odds-ok parse-ol√°sa"""
        lines = text.split('\n')
        current_date = None
        current_time = None

        for i, line in enumerate(lines):
            # D√°tum keres√©se
            date_match = re.search(r'(\d{4})\.?\s*(\w+)\s*(\d{1,2})\.?', line)
            if date_match:
                try:
                    year = date_match.group(1)
                    month_name = date_match.group(2)
                    day = date_match.group(3)

                    # Magyar h√≥napok konvert√°l√°sa
                    month_map = {
                        'janu√°r': '01', 'febru√°r': '02', 'm√°rcius': '03', '√°prilis': '04',
                        'm√°jus': '05', 'j√∫nius': '06', 'j√∫lius': '07', 'augusztus': '08',
                        'szeptember': '09', 'okt√≥ber': '10', 'november': '11', 'december': '12'
                    }

                    month = month_map.get(month_name.lower(), '06')  # Default j√∫nius
                    current_date = f"{year}-{month}-{day.zfill(2)}"
                except:
                    pass

            # Odds sorok keres√©se (Tippmix form√°tum)
            odds_pattern = r'P\s+(\d{1,2}:\d{2})\s+\d+\s+([^|]+?)\s+(\d+[,\.]\d+)\s+(\d+[,\.]\d+)\s+(\d+[,\.]\d+)'

            match = re.search(odds_pattern, line)
            if match:
                try:
                    time = match.group(1)
                    match_info = match.group(2).strip()
                    odds_home = float(match.group(3).replace(',', '.'))
                    odds_draw = float(match.group(4).replace(',', '.'))
                    odds_away = float(match.group(5).replace(',', '.'))

                    # Csapat nevek kinyer√©se
                    team_match = re.search(r'([^-]+)\s*-\s*([^-]+)', match_info)
                    if team_match:
                        home_team = team_match.group(1).strip()
                        away_team = team_match.group(2).strip()

                        # Liga becsl√©se
                        league = self._estimate_league_from_teams(home_team, away_team)

                        odds_data = {
                            'home_team': home_team,
                            'away_team': away_team,
                            'league': league,
                            'match_date': current_date,
                            'match_time': time,
                            'odds_home': odds_home,
                            'odds_draw': odds_draw,
                            'odds_away': odds_away
                        }

                        self.odds_data.append(odds_data)
                        print(f"   üìä {home_team} vs {away_team}: {odds_home}-{odds_draw}-{odds_away}")

                except Exception as e:
                    continue

    def _estimate_league_from_teams(self, home_team: str, away_team: str) -> str:
        """Liga becsl√©se csapat nevek alapj√°n"""
        teams = f"{home_team} {away_team}".lower()

        # Nemzetk√∂zi meccsek
        countries = ['franciaorsz√°g', 'spanyolorsz√°g', 'n√©metorsz√°g', 'olaszorsz√°g', 'anglia',
                    'hollandia', 'portug√°lia', 'braz√≠lia', 'argent√≠na', 'jap√°n']

        if any(country in teams for country in countries):
            if 'u19' in teams:
                return 'U19 Nemzetk√∂zi'
            return 'V√°logatott'

        # Lig√°k csapat nevek alapj√°n
        if any(name in teams for name in ['barcelona', 'real madrid', 'atletico', 'valencia']):
            return 'La Liga'
        elif any(name in teams for name in ['bayern', 'dortmund', 'leipzig', 'frankfurt']):
            return 'Bundesliga'
        elif any(name in teams for name in ['arsenal', 'chelsea', 'liverpool', 'city', 'united']):
            return 'Premier League'
        elif any(name in teams for name in ['ajax', 'psv', 'feyenoord']):
            return 'Eredivisie'
        elif any(name in teams for name in ['ferencv√°ros', '√∫jpest', 'mtk', 'honv√©d']):
            return 'Magyar NB I'
        else:
            return 'Egy√©b Liga'

    def _structure_odds_data(self):
        """Odds adatok struktur√°l√°sa √©s adatb√°zisba ment√©se"""
        if not self.odds_data:
            print("‚ùå Nincs odds adat a struktur√°l√°shoz")
            return

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        saved_count = 0
        for odds in self.odds_data:
            try:
                cursor.execute('''
                    INSERT OR REPLACE INTO betting_odds
                    (home_team, away_team, league, match_date, match_time,
                     odds_home, odds_draw, odds_away)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    odds['home_team'], odds['away_team'], odds['league'],
                    odds['match_date'], odds['match_time'],
                    odds['odds_home'], odds['odds_draw'], odds['odds_away']
                ))
                saved_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è Ment√©si hiba: {e}")
                continue

        conn.commit()
        conn.close()

        print(f"‚úÖ {saved_count} odds adat mentve az adatb√°zisba")

    def _statistical_analysis(self):
        """Statisztikai elemz√©s az odds adatokon"""
        conn = sqlite3.connect(self.db_path)

        # Alapstatisztik√°k
        df = pd.read_sql_query("SELECT * FROM betting_odds", conn)

        if df.empty:
            print("‚ùå Nincs adat az elemz√©shez")
            conn.close()
            return

        print("üìä Odds statisztik√°k:")
        print(f"   √ñsszes meccs: {len(df)}")
        print(f"   K√ºl√∂nb√∂z≈ë lig√°k: {df['league'].nunique()}")
        print(f"   √Åtlagos hazai odds: {df['odds_home'].mean():.2f}")
        print(f"   √Åtlagos d√∂ntetlen odds: {df['odds_draw'].mean():.2f}")
        print(f"   √Åtlagos vend√©g odds: {df['odds_away'].mean():.2f}")

        # Liga eloszl√°s
        league_stats = df['league'].value_counts()
        print(f"\nüèüÔ∏è Liga eloszl√°s:")
        for league, count in league_stats.items():
            print(f"   {league}: {count} meccs")

        # Odds eloszl√°s elemz√©se
        print(f"\nüìà Odds elemz√©s:")

        # Kedvencek (alacsony odds)
        favorites = df[df['odds_home'] < 1.5]
        print(f"   Er≈ës kedvencek (< 1.5): {len(favorites)} meccs")

        # Kiegyenl√≠tett meccsek
        balanced = df[(df['odds_home'] >= 1.8) & (df['odds_home'] <= 2.2) &
                     (df['odds_away'] >= 1.8) & (df['odds_away'] <= 2.2)]
        print(f"   Kiegyenl√≠tett meccsek: {len(balanced)} meccs")

        # Val√≥sz√≠n≈±s√©gek sz√°m√≠t√°sa
        df['prob_home'] = 1 / df['odds_home']
        df['prob_draw'] = 1 / df['odds_draw']
        df['prob_away'] = 1 / df['odds_away']
        df['total_prob'] = df['prob_home'] + df['prob_draw'] + df['prob_away']
        df['bookmaker_margin'] = ((df['total_prob'] - 1) * 100)

        print(f"   √Åtlagos bookmaker margin: {df['bookmaker_margin'].mean():.1f}%")

        conn.close()

    def _build_betting_model(self):
        """ML modell √©p√≠t√©se odds alap√∫ el≈ërejelz√©sekhez"""
        # Mivel nincs t√∂rt√©nelmi eredm√©ny√ºnk, statisztikai modellt haszn√°lunk
        print("üìä Statisztikai modell √©p√≠t√©se...")

        conn = sqlite3.connect(self.db_path)
        df = pd.read_sql_query("SELECT * FROM betting_odds", conn)
        conn.close()

        if df.empty:
            print("‚ùå Nincs adat a modellhez")
            return

        # Alapvet≈ë val√≥sz√≠n≈±s√©gek sz√°m√≠t√°sa odds-okb√≥l
        df['prob_home'] = 1 / df['odds_home']
        df['prob_draw'] = 1 / df['odds_draw']
        df['prob_away'] = 1 / df['odds_away']

        # Normaliz√°ljuk (margin elt√°vol√≠t√°sa)
        df['total_prob'] = df['prob_home'] + df['prob_draw'] + df['prob_away']
        df['norm_prob_home'] = df['prob_home'] / df['total_prob']
        df['norm_prob_draw'] = df['prob_draw'] / df['total_prob']
        df['norm_prob_away'] = df['prob_away'] / df['total_prob']

        # Liga alap√∫ korrekci√≥k
        league_adjustments = {
            'V√°logatott': {'home_boost': 0.05, 'draw_penalty': -0.02},
            'U19 Nemzetk√∂zi': {'home_boost': 0.03, 'draw_boost': 0.02},
            'Premier League': {'quality_boost': 0.02},
            'Magyar NB I': {'home_boost': 0.08}
        }

        # Modell adatok ment√©se
        model_data = {
            'type': 'statistical_odds_model',
            'average_probabilities': {
                'home': df['norm_prob_home'].mean(),
                'draw': df['norm_prob_draw'].mean(),
                'away': df['norm_prob_away'].mean()
            },
            'league_adjustments': league_adjustments,
            'created_at': datetime.now().isoformat()
        }

        with open('betting_model.json', 'w', encoding='utf-8') as f:
            json.dump(model_data, f, indent=2, ensure_ascii=False)

        print("‚úÖ Statisztikai modell l√©trehozva")

    def _find_value_opportunities(self):
        """Value bet lehet≈ës√©gek keres√©se"""
        print("üí∞ Value bet lehet≈ës√©gek keres√©se...")

        conn = sqlite3.connect(self.db_path)
        df = pd.read_sql_query("SELECT * FROM betting_odds", conn)

        if df.empty:
            print("‚ùå Nincs adat a value bet keres√©shez")
            conn.close()
            return

        value_bets = []

        for _, row in df.iterrows():
            # Egyszer≈± value sz√°m√≠t√°s: √∂sszehasonl√≠tjuk a lig√°k √°tlagos odds-aival
            expected_odds = self._calculate_expected_odds(row)

            # Value sz√°m√≠t√°s minden kimenetelre
            home_value = (expected_odds['home'] / row['odds_home']) - 1
            draw_value = (expected_odds['draw'] / row['odds_draw']) - 1
            away_value = (expected_odds['away'] / row['odds_away']) - 1

            # Value threshold (3% felett)
            threshold = 0.03

            if home_value > threshold:
                value_bets.append({
                    'match': f"{row['home_team']} vs {row['away_team']}",
                    'bet_type': 'Hazai gy≈ëzelem',
                    'odds': row['odds_home'],
                    'expected_odds': expected_odds['home'],
                    'value': home_value,
                    'league': row['league']
                })

            if draw_value > threshold:
                value_bets.append({
                    'match': f"{row['home_team']} vs {row['away_team']}",
                    'bet_type': 'D√∂ntetlen',
                    'odds': row['odds_draw'],
                    'expected_odds': expected_odds['draw'],
                    'value': draw_value,
                    'league': row['league']
                })

            if away_value > threshold:
                value_bets.append({
                    'match': f"{row['home_team']} vs {row['away_team']}",
                    'bet_type': 'Vend√©g gy≈ëzelem',
                    'odds': row['odds_away'],
                    'expected_odds': expected_odds['away'],
                    'value': away_value,
                    'league': row['league']
                })

        # Value bet-ek rendez√©se √©s ment√©se
        value_bets.sort(key=lambda x: x['value'], reverse=True)

        if value_bets:
            print(f"üíé {len(value_bets)} value bet tal√°lva:")

            cursor = conn.cursor()
            for bet in value_bets[:10]:  # Top 10
                print(f"   üí∞ {bet['match']}: {bet['bet_type']} ({bet['odds']:.2f}) - Value: {bet['value']:.1%}")

                # Adatb√°zisba ment√©s
                cursor.execute('''
                    INSERT INTO value_bets
                    (match_info, bet_type, odds, model_probability, value_percentage, confidence)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    bet['match'], bet['bet_type'], bet['odds'],
                    1/bet['expected_odds'], bet['value'] * 100, 0.7
                ))

            conn.commit()

            # JSON ment√©s
            with open('value_betting_opportunities.json', 'w', encoding='utf-8') as f:
                json.dump(value_bets, f, indent=2, ensure_ascii=False)
        else:
            print("üìù Nem tal√°lhat√≥ak jelent≈ës value bet-ek")

        conn.close()

    def _calculate_expected_odds(self, row) -> Dict[str, float]:
        """V√°rhat√≥ odds sz√°m√≠t√°sa liga √©s csapat alapj√°n"""
        # Alap√©rtelmezett val√≥sz√≠n≈±s√©gek
        base_probs = {'home': 0.45, 'draw': 0.25, 'away': 0.30}

        # Liga alap√∫ m√≥dos√≠t√°sok
        league_mods = {
            'V√°logatott': {'home': 0.05, 'draw': -0.02, 'away': -0.03},
            'U19 Nemzetk√∂zi': {'home': 0.02, 'draw': 0.03, 'away': -0.05},
            'Premier League': {'home': 0.03, 'draw': 0.02, 'away': -0.05},
            'Magyar NB I': {'home': 0.08, 'draw': -0.03, 'away': -0.05}
        }

        league = row['league']
        mods = league_mods.get(league, {'home': 0, 'draw': 0, 'away': 0})

        # M√≥dos√≠tott val√≥sz√≠n≈±s√©gek
        adj_probs = {
            'home': max(0.1, min(0.8, base_probs['home'] + mods['home'])),
            'draw': max(0.1, min(0.4, base_probs['draw'] + mods['draw'])),
            'away': max(0.1, min(0.8, base_probs['away'] + mods['away']))
        }

        # Normaliz√°l√°s
        total = sum(adj_probs.values())
        adj_probs = {k: v/total for k, v in adj_probs.items()}

        # Odds sz√°m√≠t√°sa (kis margin hozz√°ad√°sa)
        margin = 1.05
        expected_odds = {
            'home': margin / adj_probs['home'],
            'draw': margin / adj_probs['draw'],
            'away': margin / adj_probs['away']
        }

        return expected_odds

    def _generate_betting_report(self):
        """Komplex sportfogad√°si jelent√©s"""
        print("üìä Komplex sportfogad√°si jelent√©s k√©sz√≠t√©se...")

        conn = sqlite3.connect(self.db_path)

        # Adatok √∂sszegy≈±jt√©se
        odds_df = pd.read_sql_query("SELECT * FROM betting_odds", conn)
        value_bets_df = pd.read_sql_query("SELECT * FROM value_bets ORDER BY value_percentage DESC", conn)

        conn.close()

        # Jelent√©s √∂ssze√°ll√≠t√°sa
        report = f"""
üöÄ SPORTFOGAD√ÅSI ODDS ELEMZ√âS JELENT√âS
=====================================
K√©sz√≠tve: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìä √ñSSZEFOGLAL√ì STATISZTIK√ÅK
----------------------------
‚Ä¢ Elemzett meccsek sz√°ma: {len(odds_df)}
‚Ä¢ K√ºl√∂nb√∂z≈ë lig√°k: {odds_df['league'].nunique() if not odds_df.empty else 0}
‚Ä¢ Tal√°lt value bet-ek: {len(value_bets_df)}

üèüÔ∏è LIGA ELOSZL√ÅS
-----------------
"""

        if not odds_df.empty:
            league_stats = odds_df['league'].value_counts()
            for league, count in league_stats.items():
                report += f"‚Ä¢ {league}: {count} meccs\n"

            report += f"""
üìà ODDS STATISZTIK√ÅK
--------------------
‚Ä¢ √Åtlagos hazai odds: {odds_df['odds_home'].mean():.2f}
‚Ä¢ √Åtlagos d√∂ntetlen odds: {odds_df['odds_draw'].mean():.2f}
‚Ä¢ √Åtlagos vend√©g odds: {odds_df['odds_away'].mean():.2f}

üíé TOP VALUE BET-EK
-------------------
"""

            # Top 5 value bet
            for _, bet in value_bets_df.head(5).iterrows():
                report += f"‚Ä¢ {bet['match_info']}: {bet['bet_type']} ({bet['odds']:.2f}) - Value: {bet['value_percentage']:.1f}%\n"

        report += f"""
üìÅ L√âTREHOZOTT F√ÅJLOK
---------------------
‚Ä¢ betting_analysis.db - Teljes adatb√°zis
‚Ä¢ betting_model.json - Statisztikai modell
‚Ä¢ value_betting_opportunities.json - Value bet-ek
‚Ä¢ betting_report.txt - Ez a jelent√©s

‚úÖ SPORTFOGAD√ÅSI ELEMZ√âS SIKERESEN BEFEJEZVE
"""

        # Jelent√©s ment√©se
        with open('betting_report.txt', 'w', encoding='utf-8') as f:
            f.write(report)

        print(report)

def main():
    """Sportfogad√°si elemz√©s futtat√°sa"""
    analyzer = BettingOddsAnalyzer()
    analyzer.run_betting_analysis()

if __name__ == "__main__":
    main()
