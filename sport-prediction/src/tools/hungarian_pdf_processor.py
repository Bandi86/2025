#!/usr/bin/env python3
"""
üìÑ MAGYAR FOGAD√ÅSI PDF FELDOLGOZ√ì
Feldolgozza a magyar fogad√≥iroda PDF f√°jljait √©s kinyeri a meccs adatokat
"""

import PyPDF2
import pdfplumber
import re
import json
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import requests
import os

@dataclass
class MatchInfo:
    """Meccs inform√°ci√≥k a PDF-b≈ël"""
    match_id: str
    date: str
    time: str
    home_team: str
    away_team: str
    competition: str
    venue: Optional[str] = None

    # Odds adatok
    home_win_odds: Optional[float] = None
    draw_odds: Optional[float] = None
    away_win_odds: Optional[float] = None

    # Tov√°bbi fogad√°si lehet≈ës√©gek
    over_25_odds: Optional[float] = None
    under_25_odds: Optional[float] = None
    btts_yes_odds: Optional[float] = None  # Both teams to score
    btts_no_odds: Optional[float] = None

    # Sz√∂gletek
    corners_over_9_odds: Optional[float] = None
    corners_under_9_odds: Optional[float] = None

    # S√°rga lapok
    cards_over_3_odds: Optional[float] = None
    cards_under_3_odds: Optional[float] = None

class HungarianBettingPDFProcessor:
    """Magyar fogad√°si PDF feldolgoz√≥"""

    def __init__(self):
        self.pdf_cache_dir = "data/pdf_cache"
        os.makedirs(self.pdf_cache_dir, exist_ok=True)

        # Magyar csapat nevek normaliz√°l√°sa
        self.team_name_mapping = {
            # Premier League
            "Manchester City": ["Man City", "M. City", "Manchester C."],
            "Manchester United": ["Man United", "Man Utd", "Manchester U."],
            "Tottenham": ["Tottenham Hotspur", "Spurs"],
            "Newcastle": ["Newcastle United", "Newcastle Utd"],

            # La Liga
            "Athletic Bilbao": ["Athletic", "Ath. Bilbao"],
            "Real Sociedad": ["R. Sociedad", "Sociedad"],
            "Atletico Madrid": ["Atl√©tico Madrid", "Atl√©tico", "A. Madrid"],

            # Serie A
            "Juventus": ["Juve"],
            "AC Milan": ["Milan", "A.C. Milan"],
            "Inter Milan": ["Inter", "Internazionale"],

            # Bundesliga
            "Bayern Munich": ["Bayern M√ºnchen", "FC Bayern"],
            "Borussia Dortmund": ["B. Dortmund", "BVB"],
            "RB Leipzig": ["Leipzig"],

            # Magyar csapatok
            "Ferencv√°ros": ["Ferencv√°rosi TC", "FTC", "Fradi"],
            "√öjpest": ["√öjpest FC"],
            "Debrecen": ["Debreceni VSC", "DVSC"],
        }

    def download_latest_pdf(self, pdf_url: str) -> str:
        """Legfrissebb PDF let√∂lt√©se"""
        print("üìÑ PDF let√∂lt√©se...")

        try:
            response = requests.get(pdf_url, timeout=30)
            response.raise_for_status()

            # F√°jln√©v gener√°l√°sa d√°tum alapj√°n
            today = datetime.now().strftime('%Y%m%d')
            pdf_filename = f"betting_odds_{today}.pdf"
            pdf_path = os.path.join(self.pdf_cache_dir, pdf_filename)

            with open(pdf_path, 'wb') as f:
                f.write(response.content)

            print(f"‚úÖ PDF let√∂ltve: {pdf_path}")
            return pdf_path

        except Exception as e:
            print(f"‚ùå PDF let√∂lt√©si hiba: {e}")
            return None

    def extract_text_from_pdf(self, pdf_path: str) -> List[str]:
        """PDF sz√∂veg kinyer√©se"""
        print("üìñ PDF sz√∂veg feldolgoz√°sa...")

        try:
            # pdfplumber a jobb sz√∂veg felismer√©s√©rt
            with pdfplumber.open(pdf_path) as pdf:
                all_text = []

                for page_num, page in enumerate(pdf.pages):
                    print(f"   Oldal {page_num + 1}/{len(pdf.pages)}")
                    text = page.extract_text()
                    if text:
                        all_text.append(text)

                print(f"‚úÖ {len(all_text)} oldal feldolgozva")
                return all_text

        except Exception as e:
            print(f"‚ùå PDF feldolgoz√°si hiba: {e}")
            return []

    def parse_matches_from_text(self, text_pages: List[str]) -> List[MatchInfo]:
        """Meccsek kinyer√©se a sz√∂vegb≈ël"""
        print("‚öΩ Meccs adatok elemz√©se...")

        matches = []
        current_date = None
        current_competition = None

        for page_text in text_pages:
            lines = page_text.split('\n')

            for i, line in enumerate(lines):
                line = line.strip()

                # D√°tum felismer√©se (pl: "2025. j√∫nius 28., p√©ntek")
                date_match = re.search(r'(\d{4})\.\s*(\w+)\s*(\d{1,2})\.,?\s*(\w+)', line)
                if date_match:
                    current_date = self._parse_hungarian_date(date_match.groups())
                    continue

                # Bajnoks√°g felismer√©se
                competition_match = re.search(r'(Premier League|La Liga|Serie A|Bundesliga|Ligue 1|Champions League|Europa League|MLS|NB I)', line, re.IGNORECASE)
                if competition_match:
                    current_competition = competition_match.group(1)
                    continue

                # Meccs felismer√©se (pl: "15:30 Manchester City - Liverpool 2.10 3.40 3.20")
                match_pattern = r'(\d{1,2}:\d{2})\s+([^-]+)\s*-\s*([^0-9]+)\s+([\d.]+)\s+([\d.]+)\s+([\d.]+)'
                match_found = re.search(match_pattern, line)

                if match_found and current_date:
                    time_str, home_team, away_team, home_odds, draw_odds, away_odds = match_found.groups()

                    # Csapat nevek tiszt√≠t√°sa
                    home_team = self._normalize_team_name(home_team.strip())
                    away_team = self._normalize_team_name(away_team.strip())

                    # Odds-ok konvert√°l√°sa
                    try:
                        home_win_odds = float(home_odds)
                        draw_odds_val = float(draw_odds)
                        away_win_odds = float(away_odds)
                    except ValueError:
                        continue

                    # Tov√°bbi odds keres√©se a k√∂vetkez≈ë sorokban
                    additional_odds = self._extract_additional_odds(lines, i + 1, i + 5)

                    match_info = MatchInfo(
                        match_id=f"{current_date}_{home_team}_{away_team}".replace(' ', '_'),
                        date=current_date,
                        time=time_str,
                        home_team=home_team,
                        away_team=away_team,
                        competition=current_competition or "Ismeretlen",
                        home_win_odds=home_win_odds,
                        draw_odds=draw_odds_val,
                        away_win_odds=away_win_odds,
                        **additional_odds
                    )

                    matches.append(match_info)

        print(f"‚úÖ {len(matches)} meccs tal√°lva")
        return matches

    def _parse_hungarian_date(self, date_parts: Tuple[str, str, str, str]) -> str:
        """Magyar d√°tum feldolgoz√°sa"""
        year, month_name, day, weekday = date_parts

        hungarian_months = {
            'janu√°r': '01', 'febru√°r': '02', 'm√°rcius': '03', '√°prilis': '04',
            'm√°jus': '05', 'j√∫nius': '06', 'j√∫lius': '07', 'augusztus': '08',
            'szeptember': '09', 'okt√≥ber': '10', 'november': '11', 'december': '12'
        }

        month = hungarian_months.get(month_name.lower(), '01')
        day = day.zfill(2)

        return f"{year}-{month}-{day}"

    def _normalize_team_name(self, team_name: str) -> str:
        """Csapat n√©v normaliz√°l√°sa"""
        team_name = team_name.strip()

        # Keres√©s a mapping-ben
        for standard_name, variations in self.team_name_mapping.items():
            if team_name in variations or team_name == standard_name:
                return standard_name

        return team_name

    def _extract_additional_odds(self, lines: List[str], start_idx: int, end_idx: int) -> Dict:
        """Tov√°bbi odds kinyer√©se (g√≥lok, sz√∂gletek, lapok)"""
        additional_odds = {}

        for i in range(start_idx, min(end_idx, len(lines))):
            line = lines[i].strip()

            # Over/Under 2.5 g√≥lok
            over_under_match = re.search(r'(?:Over|Felett)\s*2[.,]5.*?([\d.]+).*?(?:Under|Alatt)\s*2[.,]5.*?([\d.]+)', line, re.IGNORECASE)
            if over_under_match:
                try:
                    additional_odds['over_25_odds'] = float(over_under_match.group(1))
                    additional_odds['under_25_odds'] = float(over_under_match.group(2))
                except ValueError:
                    pass

            # Both Teams to Score
            btts_match = re.search(r'(?:BTTS|Mindk√©t csapat g√≥loz).*?(?:Igen|Yes).*?([\d.]+).*?(?:Nem|No).*?([\d.]+)', line, re.IGNORECASE)
            if btts_match:
                try:
                    additional_odds['btts_yes_odds'] = float(btts_match.group(1))
                    additional_odds['btts_no_odds'] = float(btts_match.group(2))
                except ValueError:
                    pass

            # Sz√∂gletek
            corners_match = re.search(r'(?:Sz√∂gletek|Corners).*?(?:Over|Felett)\s*9.*?([\d.]+).*?(?:Under|Alatt)\s*9.*?([\d.]+)', line, re.IGNORECASE)
            if corners_match:
                try:
                    additional_odds['corners_over_9_odds'] = float(corners_match.group(1))
                    additional_odds['corners_under_9_odds'] = float(corners_match.group(2))
                except ValueError:
                    pass

            # S√°rga lapok
            cards_match = re.search(r'(?:S√°rga lapok|Yellow cards).*?(?:Over|Felett)\s*3.*?([\d.]+).*?(?:Under|Alatt)\s*3.*?([\d.]+)', line, re.IGNORECASE)
            if cards_match:
                try:
                    additional_odds['cards_over_3_odds'] = float(cards_match.group(1))
                    additional_odds['cards_under_3_odds'] = float(cards_match.group(2))
                except ValueError:
                    pass

        return additional_odds

    def save_matches_to_json(self, matches: List[MatchInfo], output_file: str = None) -> str:
        """Meccsek ment√©se JSON f√°jlba"""
        if not output_file:
            today = datetime.now().strftime('%Y%m%d')
            output_file = f"data/daily_matches_{today}.json"

        # Matches objektumok √°talak√≠t√°sa dict-t√©
        matches_dict = {
            'generated_at': datetime.now().isoformat(),
            'total_matches': len(matches),
            'matches': []
        }

        for match in matches:
            match_dict = {
                'match_id': match.match_id,
                'date': match.date,
                'time': match.time,
                'home_team': match.home_team,
                'away_team': match.away_team,
                'competition': match.competition,
                'venue': match.venue,
                'odds': {
                    'match_result': {
                        'home_win': match.home_win_odds,
                        'draw': match.draw_odds,
                        'away_win': match.away_win_odds
                    },
                    'total_goals': {
                        'over_25': match.over_25_odds,
                        'under_25': match.under_25_odds
                    },
                    'both_teams_score': {
                        'yes': match.btts_yes_odds,
                        'no': match.btts_no_odds
                    },
                    'corners': {
                        'over_9': match.corners_over_9_odds,
                        'under_9': match.corners_under_9_odds
                    },
                    'cards': {
                        'over_3': match.cards_over_3_odds,
                        'under_3': match.cards_under_3_odds
                    }
                }
            }
            matches_dict['matches'].append(match_dict)

        # JSON f√°jl ment√©se
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(matches_dict, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ Meccsek mentve: {output_file}")
        return output_file

    def filter_matches_by_date_range(self, matches: List[MatchInfo], days_ahead: int = 3) -> List[MatchInfo]:
        """Meccsek sz≈±r√©se d√°tum szerint"""
        today = datetime.now().date()
        end_date = today + timedelta(days=days_ahead)

        filtered_matches = []

        for match in matches:
            try:
                match_date = datetime.strptime(match.date, '%Y-%m-%d').date()
                if today <= match_date <= end_date:
                    filtered_matches.append(match)
            except ValueError:
                continue

        return filtered_matches

    def get_matches_by_competition(self, matches: List[MatchInfo], competition: str) -> List[MatchInfo]:
        """Meccsek sz≈±r√©se bajnoks√°g szerint"""
        return [match for match in matches if competition.lower() in match.competition.lower()]

def main():
    """Demo futtat√°s"""
    processor = HungarianBettingPDFProcessor()

    print("üìÑ MAGYAR FOGAD√ÅSI PDF FELDOLGOZ√ì")
    print("=" * 50)

    # Demo: ha lenne PDF URL
    demo_pdf_url = "https://example.com/betting_odds.pdf"

    print("üé≠ DEMO MINTA ADATOK GENER√ÅL√ÅSA...")

    # Minta adatok gener√°l√°sa tesztel√©shez
    demo_matches = [
        MatchInfo(
            match_id="2025-06-29_Manchester_City_Liverpool",
            date="2025-06-29",
            time="16:00",
            home_team="Manchester City",
            away_team="Liverpool FC",
            competition="Premier League",
            venue="Etihad Stadium",
            home_win_odds=2.10,
            draw_odds=3.40,
            away_win_odds=3.20,
            over_25_odds=1.85,
            under_25_odds=1.95,
            btts_yes_odds=1.75,
            btts_no_odds=2.05,
            corners_over_9_odds=1.90,
            corners_under_9_odds=1.90,
            cards_over_3_odds=2.10,
            cards_under_3_odds=1.70
        ),
        MatchInfo(
            match_id="2025-06-29_Real_Madrid_Barcelona",
            date="2025-06-29",
            time="20:00",
            home_team="Real Madrid",
            away_team="FC Barcelona",
            competition="La Liga",
            venue="Santiago Bernab√©u",
            home_win_odds=2.25,
            draw_odds=3.20,
            away_win_odds=3.10,
            over_25_odds=1.80,
            under_25_odds=2.00,
            btts_yes_odds=1.65,
            btts_no_odds=2.20,
            corners_over_9_odds=1.95,
            corners_under_9_odds=1.85,
            cards_over_3_odds=1.85,
            cards_under_3_odds=1.95
        ),
        MatchInfo(
            match_id="2025-06-30_Bayern_Munich_Dortmund",
            date="2025-06-30",
            time="18:30",
            home_team="Bayern Munich",
            away_team="Borussia Dortmund",
            competition="Bundesliga",
            venue="Allianz Arena",
            home_win_odds=1.95,
            draw_odds=3.60,
            away_win_odds=3.80,
            over_25_odds=1.75,
            under_25_odds=2.05,
            btts_yes_odds=1.70,
            btts_no_odds=2.10,
            corners_over_9_odds=2.00,
            corners_under_9_odds=1.80,
            cards_over_3_odds=2.20,
            cards_under_3_odds=1.60
        )
    ]

    # JSON ment√©se
    json_file = processor.save_matches_to_json(demo_matches)

    # Sz≈±r√©sek bemutat√°sa
    print(f"\nüîç SZ≈∞R√âSEK:")
    print(f"√ñsszes meccs: {len(demo_matches)}")

    # K√∂vetkez≈ë 3 nap meccsek
    upcoming_matches = processor.filter_matches_by_date_range(demo_matches, 3)
    print(f"K√∂vetkez≈ë 3 nap: {len(upcoming_matches)}")

    # Premier League meccsek
    pl_matches = processor.get_matches_by_competition(demo_matches, "Premier League")
    print(f"Premier League: {len(pl_matches)}")

    # R√©szletes meccs inform√°ci√≥k
    print(f"\n‚öΩ R√âSZLETES MECCS INFORM√ÅCI√ìK:")
    print("=" * 50)

    for match in demo_matches:
        print(f"\nüèüÔ∏è {match.home_team} vs {match.away_team}")
        print(f"   üìÖ {match.date} {match.time}")
        print(f"   üèÜ {match.competition}")
        print(f"   üí∞ 1X2: {match.home_win_odds} / {match.draw_odds} / {match.away_win_odds}")

        if match.over_25_odds:
            print(f"   ‚öΩ G√≥lok: Over 2.5 ({match.over_25_odds}) / Under 2.5 ({match.under_25_odds})")

        if match.btts_yes_odds:
            print(f"   üéØ BTTS: Igen ({match.btts_yes_odds}) / Nem ({match.btts_no_odds})")

        if match.corners_over_9_odds:
            print(f"   üìê Sz√∂gletek: Over 9 ({match.corners_over_9_odds}) / Under 9 ({match.corners_under_9_odds})")

        if match.cards_over_3_odds:
            print(f"   üü® Lapok: Over 3 ({match.cards_over_3_odds}) / Under 3 ({match.cards_under_3_odds})")

    print(f"\n‚úÖ JSON f√°jl elk√©sz√ºlt: {json_file}")
    print("üí° Most m√°r haszn√°lhatod a meccs adatokat predikci√≥khoz!")

if __name__ == "__main__":
    main()
