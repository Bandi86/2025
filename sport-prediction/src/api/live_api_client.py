#!/usr/bin/env python3
"""
üåç LIVE API CLIENT
Unified API client for all supported leagues
"""

import requests
import pandas as pd
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import time

class LiveAPIClient:
    """Egys√©ges API kliens t√∂bb lig√°hoz"""

    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv('API_SPORTS_KEY')
        self.base_url = "https://v3.football.api-sports.io"
        self.headers = {
            "X-RapidAPI-Key": self.api_key,
            "X-RapidAPI-Host": "v3.football.api-sports.io"
        }

        # Liga konfigur√°ci√≥k
        self.leagues = {
            'premier_league': {
                'id': 39,
                'name': 'Premier League',
                'country': 'England',
                'season': 2024,
                'timezone': 'Europe/London'
            },
            'mls': {
                'id': 253,
                'name': 'Major League Soccer',
                'country': 'USA',
                'season': 2024,
                'timezone': 'America/New_York'
            },
            'brasileirao': {
                'id': 71,
                'name': 'Brasileir√£o Serie A',
                'country': 'Brazil',
                'season': 2024,
                'timezone': 'America/Sao_Paulo'
            },
            'j_league': {
                'id': 98,
                'name': 'J1 League',
                'country': 'Japan',
                'season': 2024,
                'timezone': 'Asia/Tokyo'
            },
            'a_league': {
                'id': 188,
                'name': 'A-League Men',
                'country': 'Australia',
                'season': 2024,
                'timezone': 'Australia/Sydney'
            }
        }

        self.rate_limit_delay = 1  # 1 m√°sodperc v√°rakoz√°s k√©r√©sek k√∂z√∂tt

    def test_connection(self) -> bool:
        """API kapcsolat tesztel√©se"""
        try:
            response = requests.get(
                f"{self.base_url}/status",
                headers=self.headers,
                timeout=10
            )
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API kapcsolat sikeres")
                requests_info = data.get('response', {}).get('requests', {})
                print(f"üìä Napi limit: {requests_info.get('limit_day', 'N/A')}")
                print(f"üîÑ Felhaszn√°lt: {requests_info.get('current', 'N/A')}")
                return True
            else:
                print(f"‚ùå API st√°tusz hiba: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Kapcsol√≥d√°si hiba: {e}")
            return False

    def get_league_teams(self, league_key: str) -> List[Dict]:
        """Liga csapatainak lek√©r√©se"""
        if league_key not in self.leagues:
            print(f"‚ùå Ismeretlen liga: {league_key}")
            return []

        league_config = self.leagues[league_key]

        try:
            response = requests.get(
                f"{self.base_url}/teams",
                headers=self.headers,
                params={
                    'league': league_config['id'],
                    'season': league_config['season']
                },
                timeout=10
            )

            time.sleep(self.rate_limit_delay)

            if response.status_code == 200:
                data = response.json()
                teams = data.get('response', [])
                print(f"‚úÖ {league_config['name']}: {len(teams)} csapat")
                return teams
            else:
                print(f"‚ùå Csapatok lek√©r√©se sikertelen: {response.status_code}")
                return []

        except Exception as e:
            print(f"‚ùå Hiba a csapatok lek√©r√©s√©n√©l: {e}")
            return []

    def get_todays_fixtures(self, league_key: str) -> List[Dict]:
        """Mai m√©rk≈ëz√©sek lek√©r√©se"""
        if league_key not in self.leagues:
            print(f"‚ùå Ismeretlen liga: {league_key}")
            return []

        league_config = self.leagues[league_key]
        today = datetime.now().strftime('%Y-%m-%d')

        try:
            response = requests.get(
                f"{self.base_url}/fixtures",
                headers=self.headers,
                params={
                    'league': league_config['id'],
                    'season': league_config['season'],
                    'date': today
                },
                timeout=15
            )

            time.sleep(self.rate_limit_delay)

            if response.status_code == 200:
                data = response.json()
                fixtures = data.get('response', [])
                print(f"‚úÖ {league_config['name']}: {len(fixtures)} mai m√©rk≈ëz√©s")
                return fixtures
            else:
                print(f"‚ùå M√©rk≈ëz√©sek lek√©r√©se sikertelen: {response.status_code}")
                return []

        except Exception as e:
            print(f"‚ùå Hiba a m√©rk≈ëz√©sek lek√©r√©s√©n√©l: {e}")
            return []

    def get_upcoming_fixtures(self, league_key: str, days: int = 7) -> List[Dict]:
        """K√∂vetkez≈ë napok m√©rk≈ëz√©sei"""
        if league_key not in self.leagues:
            print(f"‚ùå Ismeretlen liga: {league_key}")
            return []

        league_config = self.leagues[league_key]
        today = datetime.now()
        end_date = (today + timedelta(days=days)).strftime('%Y-%m-%d')

        try:
            response = requests.get(
                f"{self.base_url}/fixtures",
                headers=self.headers,
                params={
                    'league': league_config['id'],
                    'season': league_config['season'],
                    'from': today.strftime('%Y-%m-%d'),
                    'to': end_date
                },
                timeout=15
            )

            time.sleep(self.rate_limit_delay)

            if response.status_code == 200:
                data = response.json()
                fixtures = data.get('response', [])
                print(f"‚úÖ {league_config['name']}: {len(fixtures)} k√∂zelg≈ë m√©rk≈ëz√©s")
                return fixtures
            else:
                print(f"‚ùå K√∂zelg≈ë m√©rk≈ëz√©sek lek√©r√©se sikertelen: {response.status_code}")
                return []

        except Exception as e:
            print(f"‚ùå Hiba a k√∂zelg≈ë m√©rk≈ëz√©sek lek√©r√©s√©n√©l: {e}")
            return []

    def get_odds(self, fixture_id: int) -> Dict:
        """Fogad√°si odds lek√©r√©se egy m√©rk≈ëz√©shez"""
        try:
            response = requests.get(
                f"{self.base_url}/odds",
                headers=self.headers,
                params={
                    'fixture': fixture_id,
                    'bet': 1  # 1X2 fogad√°s
                },
                timeout=15
            )

            time.sleep(self.rate_limit_delay)

            if response.status_code == 200:
                data = response.json()
                odds_data = data.get('response', [])
                if odds_data:
                    return self._process_odds(odds_data[0])
                return {}
            else:
                print(f"‚ùå Odds lek√©r√©se sikertelen: {response.status_code}")
                return {}

        except Exception as e:
            print(f"‚ùå Hiba az odds lek√©r√©s√©n√©l: {e}")
            return {}

    def _process_odds(self, odds_data: Dict) -> Dict:
        """Odds adatok feldolgoz√°sa"""
        try:
            bookmakers = odds_data.get('bookmakers', [])
            if not bookmakers:
                return {}

            # Els≈ë fogad√≥iroda adatait vessz√ºk
            first_bookmaker = bookmakers[0]
            bets = first_bookmaker.get('bets', [])

            if not bets:
                return {}

            # 1X2 fogad√°s √©rt√©kei
            values = bets[0].get('values', [])
            odds = {}

            for value in values:
                if value['value'] == 'Home':
                    odds['home'] = float(value['odd'])
                elif value['value'] == 'Draw':
                    odds['draw'] = float(value['odd'])
                elif value['value'] == 'Away':
                    odds['away'] = float(value['odd'])

            return odds

        except Exception as e:
            print(f"‚ùå Odds feldolgoz√°si hiba: {e}")
            return {}

    def get_league_standings(self, league_key: str) -> List[Dict]:
        """Liga tabella lek√©r√©se"""
        if league_key not in self.leagues:
            print(f"‚ùå Ismeretlen liga: {league_key}")
            return []

        league_config = self.leagues[league_key]

        try:
            response = requests.get(
                f"{self.base_url}/standings",
                headers=self.headers,
                params={
                    'league': league_config['id'],
                    'season': league_config['season']
                },
                timeout=15
            )

            time.sleep(self.rate_limit_delay)

            if response.status_code == 200:
                data = response.json()
                standings = data.get('response', [])
                if standings:
                    return standings[0]['league']['standings'][0]
                return []
            else:
                print(f"‚ùå Tabella lek√©r√©se sikertelen: {response.status_code}")
                return []

        except Exception as e:
            print(f"‚ùå Hiba a tabella lek√©r√©s√©n√©l: {e}")
            return []

    def download_league_data(self, league_key: str, output_dir: str = None):
        """Liga adatok let√∂lt√©se √©s ment√©se"""
        if league_key not in self.leagues:
            print(f"‚ùå Ismeretlen liga: {league_key}")
            return

        league_config = self.leagues[league_key]

        if not output_dir:
            output_dir = f"data/{league_key}/raw"

        os.makedirs(output_dir, exist_ok=True)

        print(f"üîÑ {league_config['name']} adatok let√∂lt√©se...")

        # 1. Csapatok
        print("üì• Csapatok...")
        teams = self.get_league_teams(league_key)
        if teams:
            teams_file = os.path.join(output_dir, f"teams_{datetime.now().strftime('%Y%m%d')}.json")
            with open(teams_file, 'w', encoding='utf-8') as f:
                json.dump(teams, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Csapatok mentve: {teams_file}")

        # 2. Mai m√©rk≈ëz√©sek
        print("üì• Mai m√©rk≈ëz√©sek...")
        todays_fixtures = self.get_todays_fixtures(league_key)
        if todays_fixtures:
            fixtures_file = os.path.join(output_dir, f"fixtures_today_{datetime.now().strftime('%Y%m%d')}.json")
            with open(fixtures_file, 'w', encoding='utf-8') as f:
                json.dump(todays_fixtures, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Mai m√©rk≈ëz√©sek mentve: {fixtures_file}")

        # 3. K√∂zelg≈ë m√©rk≈ëz√©sek
        print("üì• K√∂zelg≈ë m√©rk≈ëz√©sek...")
        upcoming_fixtures = self.get_upcoming_fixtures(league_key, days=14)
        if upcoming_fixtures:
            upcoming_file = os.path.join(output_dir, f"fixtures_upcoming_{datetime.now().strftime('%Y%m%d')}.json")
            with open(upcoming_file, 'w', encoding='utf-8') as f:
                json.dump(upcoming_fixtures, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ K√∂zelg≈ë m√©rk≈ëz√©sek mentve: {upcoming_file}")

        # 4. Tabella
        print("üì• Liga tabella...")
        standings = self.get_league_standings(league_key)
        if standings:
            standings_file = os.path.join(output_dir, f"standings_{datetime.now().strftime('%Y%m%d')}.json")
            with open(standings_file, 'w', encoding='utf-8') as f:
                json.dump(standings, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Tabella mentve: {standings_file}")

        print(f"üéâ {league_config['name']} adatok let√∂ltve: {output_dir}")

def main():
    """Tesztel√©s √©s dem√≥"""
    import argparse

    parser = argparse.ArgumentParser(description='Live API Client')
    parser.add_argument('--test', action='store_true', help='API kapcsolat tesztel√©se')
    parser.add_argument('--league', choices=['premier_league', 'mls', 'brasileirao', 'j_league', 'a_league'],
                       help='Liga adatok let√∂lt√©se')
    parser.add_argument('--today', action='store_true', help='Mai m√©rk≈ëz√©sek')
    parser.add_argument('--download', action='store_true', help='Teljes adatlet√∂lt√©s')

    args = parser.parse_args()

    # API kulcs ellen≈ërz√©s
    api_key = os.getenv('API_SPORTS_KEY')
    if not api_key:
        print("‚ùå Hi√°nyz√≥ API kulcs!")
        print("üí° √Åll√≠tsd be: export API_SPORTS_KEY='your_api_key'")
        return

    client = LiveAPIClient(api_key)

    if args.test:
        print("üß™ API kapcsolat tesztel√©se...")
        client.test_connection()

    if args.league:
        if args.today:
            print(f"üìÖ {args.league} mai m√©rk≈ëz√©sek...")
            fixtures = client.get_todays_fixtures(args.league)
            for fixture in fixtures[:3]:  # Els≈ë 3 m√©rk≈ëz√©s
                home = fixture['teams']['home']['name']
                away = fixture['teams']['away']['name']
                date = fixture['fixture']['date']
                print(f"   ‚öΩ {home} vs {away} ({date})")

        if args.download:
            client.download_league_data(args.league)

if __name__ == "__main__":
    main()
