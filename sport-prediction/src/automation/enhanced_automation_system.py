#!/usr/bin/env python3
"""
ü§ñ ENHANCED AUTOMATION SYSTEM
Multi-liga automatiz√°l√°s, API integr√°ci√≥, monitoring
"""

import os
import sys
import subprocess
from datetime import datetime, timedelta
import json
import logging
from typing import List, Dict

class EnhancedAutomationSystem:
    """Fejlett automatiz√°l√°si rendszer multi-liga t√°mogat√°ssal"""

    def __init__(self):
        self.project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        self.venv_python = os.path.join(self.project_root, 'venv', 'bin', 'python')
        self.log_dir = os.path.join(self.project_root, 'logs')
        self.scripts_dir = os.path.join(self.project_root, 'scripts')

        # K√∂nyvt√°rak l√©trehoz√°sa
        os.makedirs(self.log_dir, exist_ok=True)
        os.makedirs(self.scripts_dir, exist_ok=True)

        # Logging be√°ll√≠t√°sa
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(os.path.join(self.log_dir, 'automation.log')),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

        # Liga konfigur√°ci√≥k
        self.leagues = {
            'premier_league': {
                'name': 'Premier League',
                'active_days': [5, 6, 1, 2],  # Szombat, Vas√°rnap, Kedd, Szerda
                'analysis_time': '07:00',
                'priority': 1
            },
            'mls': {
                'name': 'Major League Soccer',
                'active_days': [5, 6, 2],  # Szombat, Vas√°rnap, Szerda
                'analysis_time': '06:00',  # Kor√°bban az id≈ëz√≥na miatt
                'priority': 2
            },
            'brasileirao': {
                'name': 'Brasileir√£o Serie A',
                'active_days': [6, 2, 5],  # Vas√°rnap, Szerda, Szombat
                'analysis_time': '07:30',
                'priority': 3
            },
            'j_league': {
                'name': 'J1 League',
                'active_days': [5, 6, 2],  # Szombat, Vas√°rnap, Szerda
                'analysis_time': '05:00',  # Korai id≈ëz√≥na miatt
                'priority': 4
            }
        }

    def create_multi_league_cron_jobs(self):
        """T√∂bb liga cron job-jainak l√©trehoz√°sa"""
        print("ü§ñ Multi-liga cron job-ok l√©trehoz√°sa...")

        for league_key, config in self.leagues.items():
            self._create_league_cron_job(league_key, config)

        # Master monitoring cron
        self._create_monitoring_cron_job()

        # API adatok friss√≠t√©se (naponta egyszer)
        self._create_api_refresh_cron_job()

        print("‚úÖ √ñsszes cron job l√©trehozva!")

    def _create_league_cron_job(self, league_key: str, config: Dict):
        """Egy liga cron job-j√°nak l√©trehoz√°sa"""
        hour, minute = config['analysis_time'].split(':')
        league_name = config['name']

        # Napi elemz√©s script
        daily_script = f"""#!/bin/bash
# {league_name} napi elemz√©s
cd {self.project_root}

# D√°tum √©s nap ellen≈ërz√©s
WEEKDAY=$(date +%u)
echo "$(date): {league_name} ellen≈ërz√©s - nap: $WEEKDAY"

# Akt√≠v napok: {config['active_days']}
if [[ {' '.join([str(d) for d in config['active_days']])} =~ $WEEKDAY ]]; then
    echo "$(date): {league_name} akt√≠v nap - elemz√©s ind√≠t√°sa"

    # Daily betting assistant
    {self.venv_python} src/tools/daily_betting_assistant.py --league {league_key} >> {self.log_dir}/{league_key}_daily.log 2>&1

    # Live analysis if API available
    {self.venv_python} src/tools/live_betting_analyzer.py --league {league_key} --save >> {self.log_dir}/{league_key}_live.log 2>&1

    echo "$(date): {league_name} elemz√©s befejezve"
else
    echo "$(date): {league_name} inakt√≠v nap - kihagy√°s"
fi
"""

        script_path = os.path.join(self.scripts_dir, f'daily_{league_key}.sh')
        with open(script_path, 'w') as f:
            f.write(daily_script)

        # V√©grehajthat√≥v√° t√©tel
        os.chmod(script_path, 0o755)

        # Cron bejegyz√©s
        cron_entry = f"{minute} {hour} * * * {script_path}"

        print(f"‚úÖ {league_name} cron job: {cron_entry}")
        self._add_to_crontab(cron_entry, f"{league_key}_daily")

    def _create_monitoring_cron_job(self):
        """Monitoring cron job l√©trehoz√°sa"""
        monitoring_script = f"""#!/bin/bash
# Rendszer monitoring
cd {self.project_root}

echo "$(date): Monitoring futtat√°sa"

# Performance tracking
{self.venv_python} src/tracking/performance_tracker.py --auto >> {self.log_dir}/monitoring.log 2>&1

# System health check
{self.venv_python} src/automation/system_monitor.py >> {self.log_dir}/monitoring.log 2>&1

echo "$(date): Monitoring befejezve"
"""

        script_path = os.path.join(self.scripts_dir, 'monitoring.sh')
        with open(script_path, 'w') as f:
            f.write(monitoring_script)

        os.chmod(script_path, 0o755)

        # Naponta h√°romszor futtat√°s
        cron_entries = [
            f"0 9 * * * {script_path}",   # Reggel 9
            f"0 15 * * * {script_path}",  # D√©lut√°n 3
            f"0 21 * * * {script_path}"   # Este 9
        ]

        for entry in cron_entries:
            self._add_to_crontab(entry, "monitoring")

    def _create_api_refresh_cron_job(self):
        """API adatok friss√≠t√©se cron job"""
        api_script = f"""#!/bin/bash
# API adatok friss√≠t√©se
cd {self.project_root}

echo "$(date): API adatok friss√≠t√©se kezd√©s"

# √ñsszes akt√≠v liga friss√≠t√©se
for league in premier_league mls brasileirao j_league; do
    echo "$(date): $league API adatok..."
    {self.venv_python} src/api/live_api_client.py --league $league --download >> {self.log_dir}/api_refresh.log 2>&1
    sleep 30  # Rate limiting
done

echo "$(date): API friss√≠t√©s befejezve"
"""

        script_path = os.path.join(self.scripts_dir, 'api_refresh.sh')
        with open(script_path, 'w') as f:
            f.write(api_script)

        os.chmod(script_path, 0o755)

        # Naponta egyszer hajnalban
        cron_entry = f"0 4 * * * {script_path}"
        self._add_to_crontab(cron_entry, "api_refresh")

    def _add_to_crontab(self, cron_entry: str, job_name: str):
        """Cron bejegyz√©s hozz√°ad√°sa"""
        try:
            # Jelenlegi crontab
            result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
            current_crontab = result.stdout if result.returncode == 0 else ""

            # Ellen≈ërizz√ºk, hogy m√°r l√©tezik-e
            if job_name in current_crontab:
                print(f"‚ö†Ô∏è {job_name} m√°r l√©tezik a crontab-ban")
                return

            # √öj bejegyz√©s hozz√°ad√°sa
            new_crontab = current_crontab + f"# Sport Betting - {job_name}\n{cron_entry}\n"

            # Crontab friss√≠t√©se
            process = subprocess.Popen(['crontab', '-'], stdin=subprocess.PIPE, text=True)
            process.communicate(new_crontab)

            if process.returncode == 0:
                print(f"‚úÖ {job_name} cron job hozz√°adva")
            else:
                print(f"‚ùå {job_name} cron job hozz√°ad√°sa sikertelen")

        except Exception as e:
            print(f"‚ùå Crontab hiba ({job_name}): {e}")

    def create_league_schedule(self) -> Dict:
        """Liga √ºtemterv l√©trehoz√°sa"""
        schedule = {}
        today = datetime.now()

        for i in range(7):  # K√∂vetkez≈ë 7 nap
            date = today + timedelta(days=i)
            weekday = date.weekday()  # 0=H√©tf≈ë, 6=Vas√°rnap
            date_str = date.strftime('%Y-%m-%d')

            active_leagues = []
            for league_key, config in self.leagues.items():
                if weekday in config['active_days']:
                    active_leagues.append({
                        'league': league_key,
                        'name': config['name'],
                        'analysis_time': config['analysis_time'],
                        'priority': config['priority']
                    })

            # Priorit√°s szerint rendez√©s
            active_leagues.sort(key=lambda x: x['priority'])

            schedule[date_str] = {
                'date': date_str,
                'weekday': weekday,
                'weekday_name': date.strftime('%A'),
                'active_leagues': active_leagues
            }

        return schedule

    def show_schedule(self):
        """√útemterv megjelen√≠t√©se"""
        schedule = self.create_league_schedule()

        print("\nüìÖ MULTI-LIGA √úTEMTERV")
        print("=" * 60)

        for date_str, day_info in schedule.items():
            print(f"\nüìÜ {day_info['weekday_name']} ({date_str})")

            if not day_info['active_leagues']:
                print("   üò¥ Nincs akt√≠v liga")
            else:
                for league in day_info['active_leagues']:
                    print(f"   ‚öΩ {league['name']} - {league['analysis_time']}")

    def run_manual_analysis(self, league: str = None):
        """Manu√°lis elemz√©s futtat√°sa"""
        if league:
            leagues = [league] if league in self.leagues else []
        else:
            # √ñsszes akt√≠v liga mai napra
            today_weekday = datetime.now().weekday()
            leagues = [
                league_key for league_key, config in self.leagues.items()
                if today_weekday in config['active_days']
            ]

        if not leagues:
            print("‚ùå Nincs akt√≠v liga ma.")
            return

        print(f"üîÑ Manu√°lis elemz√©s futtat√°sa: {', '.join(leagues)}")

        for league_key in leagues:
            league_name = self.leagues[league_key]['name']
            print(f"\n‚öΩ {league_name} elemz√©s...")

            try:
                # Daily betting assistant
                cmd = f"{self.venv_python} src/tools/daily_betting_assistant.py --league {league_key}"
                subprocess.run(cmd, shell=True, cwd=self.project_root)

                # Live analysis
                cmd = f"{self.venv_python} src/tools/live_betting_analyzer.py --league {league_key} --save"
                subprocess.run(cmd, shell=True, cwd=self.project_root)

                print(f"‚úÖ {league_name} elemz√©s befejezve")

            except Exception as e:
                print(f"‚ùå {league_name} elemz√©s hiba: {e}")

    def cleanup_old_logs(self, days: int = 30):
        """R√©gi log f√°jlok t√∂rl√©se"""
        print(f"üßπ {days} napn√°l r√©gebbi log f√°jlok t√∂rl√©se...")

        cutoff_date = datetime.now() - timedelta(days=days)
        deleted_count = 0

        for filename in os.listdir(self.log_dir):
            file_path = os.path.join(self.log_dir, filename)

            if os.path.isfile(file_path):
                file_time = datetime.fromtimestamp(os.path.getmtime(file_path))

                if file_time < cutoff_date:
                    os.remove(file_path)
                    deleted_count += 1
                    print(f"üóëÔ∏è T√∂r√∂lve: {filename}")

        print(f"‚úÖ {deleted_count} log f√°jl t√∂r√∂lve")

    def get_system_status(self) -> Dict:
        """Rendszer st√°tusz lek√©r√©se"""
        status = {
            'timestamp': datetime.now().isoformat(),
            'leagues': {},
            'cron_jobs': self._check_cron_jobs(),
            'logs': self._get_log_info(),
            'api_status': self._check_api_status()
        }

        # Liga st√°tuszok
        for league_key, config in self.leagues.items():
            today_weekday = datetime.now().weekday()
            is_active_today = today_weekday in config['active_days']

            status['leagues'][league_key] = {
                'name': config['name'],
                'active_today': is_active_today,
                'next_analysis': config['analysis_time'] if is_active_today else 'N/A',
                'priority': config['priority']
            }

        return status

    def _check_cron_jobs(self) -> Dict:
        """Cron job-ok ellen≈ërz√©se"""
        try:
            result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
            if result.returncode == 0:
                crontab_content = result.stdout
                job_count = len([line for line in crontab_content.split('\n')
                               if 'Sport Betting' in line])
                return {'status': 'OK', 'job_count': job_count}
            else:
                return {'status': 'ERROR', 'message': 'Crontab nem el√©rhet≈ë'}
        except Exception as e:
            return {'status': 'ERROR', 'message': str(e)}

    def _get_log_info(self) -> Dict:
        """Log inform√°ci√≥k"""
        log_files = [f for f in os.listdir(self.log_dir) if f.endswith('.log')]
        total_size = sum(os.path.getsize(os.path.join(self.log_dir, f))
                        for f in log_files)

        return {
            'file_count': len(log_files),
            'total_size_mb': round(total_size / (1024*1024), 2),
            'directory': self.log_dir
        }

    def _check_api_status(self) -> Dict:
        """API st√°tusz ellen≈ërz√©se"""
        try:
            # Egyszer≈± import teszt
            sys.path.append(os.path.join(self.project_root, 'src', 'api'))
            from live_api_client import LiveAPIClient

            api_key = os.getenv('API_SPORTS_KEY')
            if api_key:
                client = LiveAPIClient(api_key)
                if client.test_connection():
                    return {'status': 'OK', 'api_key': 'Configured'}
                else:
                    return {'status': 'ERROR', 'message': 'API connection failed'}
            else:
                return {'status': 'WARNING', 'message': 'No API key configured'}

        except Exception as e:
            return {'status': 'ERROR', 'message': str(e)}

def main():
    """F≈ë futtat√°si f√ºggv√©ny"""
    import argparse

    parser = argparse.ArgumentParser(description='Enhanced Automation System')
    parser.add_argument('--setup', action='store_true', help='Cron job-ok telep√≠t√©se')
    parser.add_argument('--schedule', action='store_true', help='√útemterv megjelen√≠t√©se')
    parser.add_argument('--run', choices=['all'] + list(['premier_league', 'mls', 'brasileirao', 'j_league']),
                       help='Manu√°lis elemz√©s futtat√°sa')
    parser.add_argument('--status', action='store_true', help='Rendszer st√°tusz')
    parser.add_argument('--cleanup', type=int, default=30, help='Log cleanup (napok)')

    args = parser.parse_args()

    automation = EnhancedAutomationSystem()

    if args.setup:
        automation.create_multi_league_cron_jobs()
    elif args.schedule:
        automation.show_schedule()
    elif args.run:
        league = None if args.run == 'all' else args.run
        automation.run_manual_analysis(league)
    elif args.status:
        status = automation.get_system_status()
        print("\nüîç RENDSZER ST√ÅTUSZ")
        print("=" * 50)
        print(json.dumps(status, indent=2, ensure_ascii=False))
    else:
        automation.cleanup_old_logs(args.cleanup)
        print("\nüí° Haszn√°lat:")
        print("  --setup     Automatiz√°l√°s telep√≠t√©se")
        print("  --schedule  Heti √ºtemterv")
        print("  --run all   √ñsszes akt√≠v liga futtat√°sa")
        print("  --status    Rendszer st√°tusz")

if __name__ == "__main__":
    main()
