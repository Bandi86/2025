#!/usr/bin/env python3
"""
Adatb√°zis l√©trehoz√°s szkript
V√©grehajtja a database_schema.sql f√°jlt √©s l√©trehozza a f≈ëadatb√°zist
"""

import sqlite3
import os
from pathlib import Path

def create_database():
    """L√©trehozza az adatb√°zist a s√©ma alapj√°n"""

    # √ötvonalak
    project_root = Path(__file__).parent
    schema_file = project_root / 'database_schema.sql'
    db_file = project_root / 'data' / 'football_database.db'

    print(f"üî® Adatb√°zis l√©trehoz√°sa: {db_file}")
    print(f"üìã S√©ma f√°jl: {schema_file}")

    # Ellen≈ërizz√ºk, hogy l√©tezik-e a s√©ma f√°jl
    if not schema_file.exists():
        print(f"‚ùå Hiba: Nem tal√°lhat√≥ a s√©ma f√°jl: {schema_file}")
        return False

    # Data k√∂nyvt√°r l√©trehoz√°sa ha nem l√©tezik
    db_file.parent.mkdir(exist_ok=True)

    # Ha m√°r l√©tezik az adatb√°zis, k√©sz√≠ts√ºnk r√≥la biztons√°gi m√°solatot
    if db_file.exists():
        backup_file = db_file.with_suffix('.backup.db')
        print(f"üîÑ Biztons√°gi m√°solat: {backup_file}")
        import shutil
        shutil.copy2(db_file, backup_file)

    try:
        # S√©ma beolvas√°sa
        with open(schema_file, 'r', encoding='utf-8') as f:
            schema_sql = f.read()

        # Adatb√°zis l√©trehoz√°sa
        conn = sqlite3.connect(str(db_file))

        # S√©ma v√©grehajt√°sa
        print("üìù S√©ma v√©grehajt√°sa...")
        conn.executescript(schema_sql)

        # Ellen≈ërizz√ºk a l√©trehozott t√°bl√°kat
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
        tables = [row[0] for row in cursor.fetchall()]

        print(f"‚úÖ Sikeresen l√©trehozott t√°bl√°k ({len(tables)} db):")
        for table in tables:
            cursor = conn.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"   - {table}: {count} rekord")

        # View-k ellen≈ërz√©se
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='view' ORDER BY name;")
        views = [row[0] for row in cursor.fetchall()]

        if views:
            print(f"üîç L√©trehozott view-k ({len(views)} db):")
            for view in views:
                print(f"   - {view}")

        # Trigger-ek ellen≈ërz√©se
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='trigger' ORDER BY name;")
        triggers = [row[0] for row in cursor.fetchall()]

        if triggers:
            print(f"‚ö° L√©trehozott trigger-ek ({len(triggers)} db):")
            for trigger in triggers:
                print(f"   - {trigger}")

        # Adatmin≈ës√©gi metrik√°k ellen≈ërz√©se
        cursor = conn.execute("SELECT metric_name, metric_value, metric_target FROM data_quality_metrics")
        metrics = cursor.fetchall()

        print(f"üìä Alap√©rtelmezett metrik√°k ({len(metrics)} db):")
        for metric_name, metric_value, metric_target in metrics:
            print(f"   - {metric_name}: {metric_value} (c√©l: {metric_target})")

        conn.close()

        print(f"\nüéâ Adatb√°zis sikeresen l√©trehozva: {db_file}")
        print(f"üìÇ F√°jl m√©ret: {db_file.stat().st_size / 1024:.1f} KB")

        return True

    except Exception as e:
        print(f"‚ùå Hiba az adatb√°zis l√©trehoz√°sakor: {e}")
        return False

if __name__ == "__main__":
    success = create_database()
    exit(0 if success else 1)
