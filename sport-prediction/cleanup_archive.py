#!/usr/bin/env python3
"""
Cleanup Script - T√∂rli a felesleges r√©gi f√°jlokat a sikeres reorganiz√°ci√≥ ut√°n

Ez a szkript:
1. Ellen≈ërzi, hogy a reorganiz√°ci√≥ sikeres volt-e
2. Biztons√°gosan t√∂rli a r√©gi organized mapp√°t
3. √Åtnevezi a reorganized mapp√°t organized-ra
4. T√∂rli a felesleges ideiglenes f√°jlokat
"""

import os
import shutil
import json
from pathlib import Path
from datetime import datetime

class ArchiveCleanup:
    """PDF archive tiszt√≠t√°sa"""

    def __init__(self, base_dir: str):
        self.base_dir = Path(base_dir)
        self.archive_dir = self.base_dir / "data" / "szerencsemix_archive"
        self.organized_dir = self.archive_dir / "organized"
        self.reorganized_dir = self.archive_dir / "reorganized"
        self.backup_dir = self.archive_dir / "backup_original"

    def check_reorganization_complete(self) -> bool:
        """Ellen≈ërzi, hogy a reorganiz√°ci√≥ sikeres volt-e"""
        if not self.reorganized_dir.exists():
            print("‚ùå A reorganized mappa nem l√©tezik!")
            return False

        # Reorganized f√°jlok sz√°ma
        reorganized_count = 0
        for root, dirs, files in os.walk(self.reorganized_dir):
            for file in files:
                if file.lower().endswith('.pdf'):
                    reorganized_count += 1

        # Eredeti f√°jlok sz√°ma
        original_count = 0
        if self.organized_dir.exists():
            for root, dirs, files in os.walk(self.organized_dir):
                for file in files:
                    if file.lower().endswith('.pdf'):
                        original_count += 1

        print(f"üìä Reorganized: {reorganized_count} f√°jl")
        print(f"üìä Original: {original_count} f√°jl")

        # Legal√°bb 95% sikeress√©gi ar√°ny kell
        if reorganized_count >= original_count * 0.95:
            print("‚úÖ Reorganiz√°ci√≥ sikeresnek tekinthet≈ë")
            return True
        else:
            print("‚ùå Reorganiz√°ci√≥ nem teljes, nem biztons√°gos a t√∂rl√©s")
            return False

    def create_backup(self) -> bool:
        """Biztons√°gi m√°solat k√©sz√≠t√©se az eredeti organized mapp√°r√≥l"""
        try:
            if self.organized_dir.exists() and not self.backup_dir.exists():
                print("üíæ Biztons√°gi m√°solat k√©sz√≠t√©se...")
                shutil.copytree(self.organized_dir, self.backup_dir)
                print(f"‚úÖ Backup l√©trehozva: {self.backup_dir}")
                return True
            elif self.backup_dir.exists():
                print("üìÅ Backup m√°r l√©tezik")
                return True
            else:
                print("‚ùå Nincs mit backup-olni")
                return False
        except Exception as e:
            print(f"‚ùå Backup hiba: {e}")
            return False

    def cleanup_old_organized(self):
        """R√©gi organized mappa t√∂rl√©se"""
        try:
            if self.organized_dir.exists():
                print("üóëÔ∏è  R√©gi organized mappa t√∂rl√©se...")
                shutil.rmtree(self.organized_dir)
                print("‚úÖ R√©gi organized mappa t√∂r√∂lve")
            else:
                print("üìÅ R√©gi organized mappa m√°r nem l√©tezik")
        except Exception as e:
            print(f"‚ùå T√∂rl√©si hiba: {e}")
            raise

    def rename_reorganized_to_organized(self):
        """Reorganized mappa √°tnevez√©se organized-ra"""
        try:
            if self.reorganized_dir.exists():
                print("üìù Reorganized -> organized √°tnevez√©s...")
                self.reorganized_dir.rename(self.organized_dir)
                print("‚úÖ √Åtnevez√©s sikeres")
            else:
                print("‚ùå Reorganized mappa nem l√©tezik")
        except Exception as e:
            print(f"‚ùå √Åtnevez√©si hiba: {e}")
            raise

    def cleanup_temp_files(self):
        """Ideiglenes f√°jlok t√∂rl√©se"""
        temp_files = [
            "/tmp/original_files.txt",
            "/tmp/reorganized_files.txt"
        ]

        for temp_file in temp_files:
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                    print(f"üóëÔ∏è  T√∂r√∂lve: {temp_file}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Nem siker√ºlt t√∂r√∂lni {temp_file}: {e}")

    def update_statistics(self):
        """Friss√≠ti a statisztik√°kat"""
        try:
            # √öj statisztik√°k
            final_count = 0
            year_dist = {}
            month_dist = {}

            for root, dirs, files in os.walk(self.organized_dir):
                for file in files:
                    if file.lower().endswith('.pdf'):
                        final_count += 1

                        # √âv √©s h√≥nap kinyer√©se az √∫tvonalb√≥l
                        path_parts = Path(root).parts
                        if len(path_parts) >= 2:
                            year = path_parts[-2]  # pl. "2024"
                            month = path_parts[-1]  # pl. "06-J√∫nius"

                            if year.isdigit():
                                year_dist[int(year)] = year_dist.get(int(year), 0) + 1

                            if '-' in month:
                                month_num = int(month.split('-')[0])
                                month_dist[month_num] = month_dist.get(month_num, 0) + 1

            # Cleanup report ment√©se
            cleanup_report = {
                "cleanup_date": datetime.now().isoformat(),
                "final_file_count": final_count,
                "year_distribution": year_dist,
                "month_distribution": month_dist,
                "cleanup_completed": True,
                "backup_location": str(self.backup_dir),
                "status": "success"
            }

            report_file = self.archive_dir / "cleanup_report.json"
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(cleanup_report, f, indent=2, ensure_ascii=False)

            print(f"üìä Cleanup report mentve: {report_file}")
            print(f"üìÅ V√©gs≈ë f√°jlsz√°m: {final_count}")

        except Exception as e:
            print(f"‚ö†Ô∏è  Statisztika friss√≠t√©si hiba: {e}")

    def perform_cleanup(self, force: bool = False):
        """Teljes cleanup v√©grehajt√°sa"""
        print("üßπ PDF Archive Cleanup")
        print("=" * 50)

        # 1. Ellen≈ërz√©s
        if not force and not self.check_reorganization_complete():
            print("‚ùå Cleanup megszak√≠tva - reorganiz√°ci√≥ nem teljes")
            return False

        try:
            # 2. Backup
            if not self.create_backup():
                print("‚ùå Cleanup megszak√≠tva - backup nem siker√ºlt")
                return False

            # 3. R√©gi mappa t√∂rl√©se
            self.cleanup_old_organized()

            # 4. √öj mappa √°tnevez√©se
            self.rename_reorganized_to_organized()

            # 5. Temp f√°jlok t√∂rl√©se
            self.cleanup_temp_files()

            # 6. Statisztik√°k friss√≠t√©se
            self.update_statistics()

            print("\n" + "=" * 50)
            print("‚úÖ CLEANUP SIKERES!")
            print(f"üìÅ √öj organized mappa: {self.organized_dir}")
            print(f"üíæ Backup helye: {self.backup_dir}")
            print("üéâ Az arch√≠vum most m√°r tiszta √©s rendezett!")

            return True

        except Exception as e:
            print(f"\n‚ùå CLEANUP HIBA: {e}")
            print("üí° A backup biztons√°gban van, k√©zi helyre√°ll√≠t√°s sz√ºks√©ges")
            return False

def main():
    """Main function"""
    cleanup = ArchiveCleanup('/home/bandi/Documents/code/2025/sport-prediction')

    print("Szeretn√©d v√©grehajtani a cleanup-ot? (y/N)")
    print("Ez t√∂rli a r√©gi organized mapp√°t √©s √°tnevezi a reorganized-ot!")
    print("(Biztons√°gi m√°solat k√©sz√ºl)")

    answer = input().strip().lower()

    if answer in ['y', 'yes']:
        success = cleanup.perform_cleanup()
        if not success:
            print("\nüí° Ha m√©gis folytatni szeretn√©d (force mode):")
            print("python cleanup_archive.py --force")
    else:
        print("Cleanup megszak√≠tva.")

if __name__ == "__main__":
    main()
