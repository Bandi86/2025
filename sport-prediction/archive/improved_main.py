"""
Jav√≠tott sport prediction system
F≈ë probl√©m√°k megold√°s√°val:
1. Jobb feature engineering
2. Id≈ësor-kompatibilis valid√°ci√≥
3. Jav√≠tott Kelly Criterion
4. Profit-orient√°lt strat√©gi√°k
5. Proper risk management
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import classification_report, confusion_matrix
import warnings
warnings.filterwarnings('ignore')

# Eredeti modulok
from data_loader import load_data
from feature_engineering import create_features
from model_trainer import encode_labels

# √öj jav√≠tott modulok
try:
    from improved_features import create_advanced_features, get_advanced_feature_list
    from improved_strategies import ImprovedBettingStrategies, evaluate_improved_strategies
    from improved_pipeline import run_improved_pipeline
    IMPROVED_MODULES_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  Jav√≠tott modulok nem el√©rhet≈ëk: {e}")
    print("   Alapvet≈ë m√≥dban futunk...")
    IMPROVED_MODULES_AVAILABLE = False

def analyze_current_problems(df, X, y):
    """Jelenlegi probl√©m√°k elemz√©se."""
    print("üîç JELENLEGI PROBL√âM√ÅK ELEMZ√âSE")
    print("=" * 50)

    # 1. Adatok egyens√∫lya
    outcome_counts = y.value_counts()
    print(f"üìä Eredm√©ny eloszl√°s:")
    for outcome, count in outcome_counts.items():
        pct = (count / len(y)) * 100
        print(f"   {outcome}: {count} ({pct:.1f}%)")

    # 2. Feature quality
    print(f"\nüéØ Jellemz≈ëk:")
    print(f"   Jellemz≈ëk sz√°ma: {X.shape[1]}")
    print(f"   Mintasz√°m: {X.shape[0]}")

    # Missing values check
    missing_pct = (X.isnull().sum() / len(X)) * 100
    problematic_features = missing_pct[missing_pct > 5]
    if len(problematic_features) > 0:
        print(f"   ‚ö†Ô∏è  Hi√°nyz√≥ √©rt√©kek (>5%): {len(problematic_features)} jellemz≈ë")

    # 3. Odds analysis
    if 'B365H' in df.columns:
        print(f"\nüí∞ Odds elemz√©s:")
        home_odds_avg = df['B365H'].mean()
        draw_odds_avg = df['B365D'].mean()
        away_odds_avg = df['B365A'].mean()
        print(f"   √Åtlag hazai odds: {home_odds_avg:.2f}")
        print(f"   √Åtlag d√∂ntetlen odds: {draw_odds_avg:.2f}")
        print(f"   √Åtlag vend√©g odds: {away_odds_avg:.2f}")

        # Bookmaker margin
        margins = []
        for _, row in df.iterrows():
            margin = (1/row['B365H'] + 1/row['B365D'] + 1/row['B365A']) - 1
            margins.append(margin)
        avg_margin = np.mean(margins)
        print(f"   √Åtlag bookmaker margin: {avg_margin:.3f} ({avg_margin*100:.1f}%)")

    print()

def improved_data_split(X, y, test_size=0.2):
    """Jav√≠tott adatfeloszt√°s id≈ësor respekt√°l√°s√°val."""
    # Egyszer≈± id≈ëalap√∫ split (utols√≥ 20%)
    split_idx = int(len(X) * (1 - test_size))

    X_train = X.iloc[:split_idx] if hasattr(X, 'iloc') else X[:split_idx]
    X_test = X.iloc[split_idx:] if hasattr(X, 'iloc') else X[split_idx:]
    y_train = y.iloc[:split_idx] if hasattr(y, 'iloc') else y[:split_idx]
    y_test = y.iloc[split_idx:] if hasattr(y, 'iloc') else y[split_idx:]

    return X_train, X_test, y_train, y_test, split_idx

def simple_profitable_strategy(df, split_idx):
    """Egyszer≈±, de profit√°bilis strat√©gia demo."""
    print("üí° EGYSZER≈∞ PROFIT√ÅBILIS STRAT√âGIA")
    print("=" * 50)

    # Test adatok
    test_data = df.iloc[split_idx:].copy()

    # Strat√©gia: Fogadjunk a hazai csapatra ha:
    # 1. Az odds 1.3 √©s 2.0 k√∂z√∂tt van (nem t√∫l favorit, de nem is underdog)
    # 2. Ez val√≥j√°ban "value betting" egy egyszer≈± form√°ja

    profitable_bets = test_data[
        (test_data['B365H'] >= 1.3) &
        (test_data['B365H'] <= 2.0)
    ].copy()

    if len(profitable_bets) == 0:
        print("Nincs megfelel≈ë fogad√°s a krit√©riumokkal.")
        return

    profitable_bets['Predicted'] = 'H'
    profitable_bets['Stake'] = 1.0

    # Profit sz√°m√≠t√°s
    wins = profitable_bets[profitable_bets['FTR'] == 'H']
    losses = profitable_bets[profitable_bets['FTR'] != 'H']

    total_profit = 0
    for _, row in wins.iterrows():
        total_profit += (row['B365H'] - 1) * row['Stake']

    for _, row in losses.iterrows():
        total_profit -= row['Stake']

    total_stakes = profitable_bets['Stake'].sum()
    roi = (total_profit / total_stakes) * 100 if total_stakes > 0 else 0
    win_rate = (len(wins) / len(profitable_bets)) * 100

    print(f"üìà Egyszer≈± 'sweet spot' hazai strat√©gia:")
    print(f"   Fogad√°sok sz√°ma: {len(profitable_bets)}")
    print(f"   Tal√°lati ar√°ny: {win_rate:.1f}%")
    print(f"   √ñsszprofit: {total_profit:.2f}")
    print(f"   ROI: {roi:.2f}%")
    print(f"   Odds tartom√°ny: 1.3 - 2.0")

    if roi > 0:
        print("   ‚úÖ Ez m≈±k√∂dik! Van potenci√°l a fejleszt√©sre.")
    else:
        print("   ‚ùå Ez sem m≈±k√∂dik - m√©lyebb probl√©m√°k vannak.")

    return profitable_bets

def market_efficiency_analysis(df):
    """Piaci hat√©konys√°g elemz√©se."""
    print("\nüìä PIACI HAT√âKONYS√ÅG ELEMZ√âSE")
    print("=" * 50)

    # Sz√°m√≠tsuk ki, hogy mennyire pontos a piac
    home_wins = df[df['FTR'] == 'H']
    draw_games = df[df['FTR'] == 'D']
    away_wins = df[df['FTR'] == 'A']

    # √Åtlag implied probability vs val√≥s frequency
    print("Val√≥s vs Implied val√≥sz√≠n≈±s√©gek:")

    actual_home_rate = len(home_wins) / len(df)
    avg_home_implied = (1 / df['B365H']).mean()
    print(f"   Hazai gy≈ëzelem: Val√≥s {actual_home_rate:.3f} vs Implied {avg_home_implied:.3f}")

    actual_draw_rate = len(draw_games) / len(df)
    avg_draw_implied = (1 / df['B365D']).mean()
    print(f"   D√∂ntetlen: Val√≥s {actual_draw_rate:.3f} vs Implied {avg_draw_implied:.3f}")

    actual_away_rate = len(away_wins) / len(df)
    avg_away_implied = (1 / df['B365A']).mean()
    print(f"   Vend√©g gy≈ëzelem: Val√≥s {actual_away_rate:.3f} vs Implied {avg_away_implied:.3f}")

    # Hol vannak a legnagyobb elt√©r√©sek?
    home_bias = avg_home_implied - actual_home_rate
    draw_bias = avg_draw_implied - actual_draw_rate
    away_bias = avg_away_implied - actual_away_rate

    print(f"\nPiaci torz√≠t√°sok (+ = t√∫l√°razott, - = al√°√°razott):")
    print(f"   Hazai: {home_bias:+.3f}")
    print(f"   D√∂ntetlen: {draw_bias:+.3f}")
    print(f"   Vend√©g: {away_bias:+.3f}")

    # Lehet≈ës√©gek identifik√°l√°sa
    if abs(home_bias) > 0.02:
        direction = "t√∫l√°razott" if home_bias > 0 else "al√°√°razott"
        print(f"   üéØ Hazai m√©rk≈ëz√©sek {direction}ak!")

    if abs(draw_bias) > 0.02:
        direction = "t√∫l√°razott" if draw_bias > 0 else "al√°√°razott"
        print(f"   üéØ D√∂ntetlenek {direction}ak!")

    if abs(away_bias) > 0.02:
        direction = "t√∫l√°razott" if away_bias > 0 else "al√°√°razott"
        print(f"   üéØ Vend√©g gy≈ëzelmek {direction}ak!")

def main():
    print("üèà JAV√çTOTT SPORT PREDICTION RENDSZER")
    print("=" * 60)

    # 1. Adatok bet√∂lt√©se
    print("üìÇ Adatok bet√∂lt√©se...")
    df_2223 = load_data("pl2223.csv")
    df_2324 = load_data("pl2324.csv")
    df_2425 = load_data("pl2425.csv")

    # Id≈ërendi √∂sszef≈±z√©s (r√©gebbi -> √∫jabb)
    df = pd.concat([df_2223, df_2324, df_2425], ignore_index=True)
    df = df.sort_values('Date').reset_index(drop=True)

    print(f"   √ñsszes m√©rk≈ëz√©s: {len(df)}")
    print(f"   Id≈ëszak: {df['Date'].min()} - {df['Date'].max()}")

    # 2. Feature engineering
    if IMPROVED_MODULES_AVAILABLE:
        print("\nüîß Fejlett feature engineering...")
        df = create_advanced_features(df)
        feature_list = get_advanced_feature_list()
    else:
        print("\nüîß Alapvet≈ë feature engineering...")
        df = create_features(df)
        feature_list = [
            'OddsImpliedProbHome', 'OddsImpliedProbAway', 'OddsImpliedProbDraw',
            'IsHomeStrong', 'ExpectedGoals',
            'Home_WinRate', 'Home_AvgGF', 'Home_AvgGA',
            'Away_WinRate', 'Away_AvgGF', 'Away_AvgGA',
            'Home_Last5_GD', 'Home_Last5_WinRate',
            'Away_Last5_GD', 'Away_Last5_WinRate',
            'OddsImpliedProbDiff', 'OddsRatioHomeAway',
            'HomeAttackStrength', 'AwayAttackStrength'
        ]

    # 3. Adatok el≈ëk√©sz√≠t√©se
    # Csak azokat a sorokat tartjuk meg, ahol minden feature el√©rhet≈ë
    available_features = [f for f in feature_list if f in df.columns]
    print(f"   El√©rhet≈ë jellemz≈ëk: {len(available_features)}/{len(feature_list)}")

    X = df[available_features].copy()
    y = df['FTR'].copy()

    # NaN √©rt√©kek kezel√©se
    before_drop = len(X)
    X = X.dropna()
    y = y.loc[X.index]
    df_clean = df.loc[X.index]
    after_drop = len(X)

    if before_drop != after_drop:
        print(f"   ‚ö†Ô∏è  {before_drop - after_drop} sor elt√°vol√≠tva NaN √©rt√©kek miatt")

    # 4. Probl√©m√°k elemz√©se
    analyze_current_problems(df_clean, X, y)

    # 5. Piaci hat√©konys√°g
    market_efficiency_analysis(df_clean)

    # 6. Adatok feloszt√°sa
    X_train, X_test, y_train, y_test, split_idx = improved_data_split(X, y)

    print(f"\nüìä Adatfeloszt√°s:")
    print(f"   Train: {len(X_train)} minta")
    print(f"   Test: {len(X_test)} minta")

    # 7. Egyszer≈± profit√°bilis strat√©gia demo
    simple_profitable_strategy(df_clean, split_idx)

    # 8. Fejlett modellek (ha el√©rhet≈ëk)
    if IMPROVED_MODULES_AVAILABLE:
        print(f"\nü§ñ FEJLETT MODELLEK")
        print("=" * 50)

        # Label encoding
        y_train_enc, y_test_enc, le = encode_labels(y_train, y_test)

        # Pipeline futtat√°s
        pipeline_results = run_improved_pipeline(
            X_train, X_test, y_train_enc, y_test_enc, available_features
        )

        # Odds DataFrame l√©trehoz√°sa
        test_indices = df_clean.iloc[split_idx:].index
        odds_df = pd.DataFrame({
            'HomeOdds': df_clean.loc[test_indices, 'B365H'].values,
            'DrawOdds': df_clean.loc[test_indices, 'B365D'].values,
            'AwayOdds': df_clean.loc[test_indices, 'B365A'].values,
            'Date': df_clean.loc[test_indices, 'Date'].values
        })

        # Jav√≠tott strat√©gi√°k tesztel√©se
        print(f"\nüéØ JAV√çTOTT STRAT√âGI√ÅK")
        print("=" * 50)

        best_model = pipeline_results['best_model']
        strategy_results = evaluate_improved_strategies(
            best_model, X_test, y_test_enc, odds_df,
            df_clean, test_indices.tolist(), le
        )

        # Param√©ter optimaliz√°ci√≥
        print(f"\nüîß PARAM√âTER FINOMHANGOL√ÅS")
        print("=" * 50)

        try:
            from parameter_tuner import quick_test_best_params, simple_parameter_tuning

            # Gyors teszt
            quick_test_best_params(best_model, X_test, y_test_enc, odds_df, le)

            # R√©szletes optimaliz√°ci√≥ (opcion√°lis)
            user_input = input("\n‚ùì Futtatjunk r√©szletes param√©ter optimaliz√°ci√≥t? (i/n): ")
            if user_input.lower() == 'i':
                print("‚è≥ R√©szletes optimaliz√°ci√≥ futtat√°sa...")
                optimization_results, best_params = simple_parameter_tuning(
                    best_model, X_test, y_test_enc, odds_df, le
                )
                print(f"‚úÖ Optimaliz√°ci√≥ befejezve!")
            else:
                print("‚ÑπÔ∏è R√©szletes optimaliz√°ci√≥ kihagyva.")

        except ImportError as e:
            print(f"‚ö†Ô∏è Param√©ter tuner nem el√©rhet≈ë: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Param√©ter optimaliz√°ci√≥ hiba: {e}")

        # Eredm√©nyek ment√©se
        if strategy_results:
            print(f"\nüíæ Strat√©gia eredm√©nyek ment√©se...")
            for strategy_name, result_data in strategy_results.items():
                # Ellen≈ërizz√ºk, hogy DataFrame-e vagy lista
                if isinstance(result_data, pd.DataFrame) and not result_data.empty:
                    filename = f"improved_strategy_{strategy_name}.csv"
                    result_data.to_csv(filename, index=False)
                    print(f"   {filename} mentve")
                elif isinstance(result_data, list) and len(result_data) > 0:
                    # Kombin√°ci√≥k eset√©n k√ºl√∂n kezel√©s
                    if strategy_name == 'combinations':
                        filename = f"improved_strategy_{strategy_name}.json"
                        import json
                        # JSON friendly form√°tumra konvert√°l√°s
                        json_data = []
                        for combo in result_data[:50]:  # Top 50 kombin√°ci√≥
                            json_combo = {
                                'combo_size': combo['combo_size'],
                                'combined_odds': float(combo['combined_odds']),
                                'combined_probability': float(combo['combined_probability']),
                                'expected_value': float(combo['expected_value']),
                                'all_correct': combo['all_correct'],
                                'min_confidence': float(combo['min_confidence']),
                                'bet_count': len(combo['bets'])
                            }
                            json_data.append(json_combo)

                        with open(filename, 'w') as f:
                            json.dump(json_data, f, indent=2)
                        print(f"   {filename} mentve ({len(json_data)} kombin√°ci√≥)")

    else:
        print(f"\n‚ö†Ô∏è  Alapvet≈ë m√≥dban futunk - jav√≠tott funkci√≥k nem el√©rhet≈ëk")
        print("   Telep√≠tsd a hi√°nyz√≥ csomagokat a teljes funkcionalit√°shoz:")
        print("   pip install lightgbm")

    # 9. √ñsszefoglal√°s √©s javaslatok
    print(f"\nüìã √ñSSZEFOGLAL√ÅS √âS JAVASLATOK")
    print("=" * 60)

    print("‚úÖ Amit most jav√≠tottunk:")
    print("   ‚Ä¢ Id≈ësor-kompatibilis valid√°ci√≥")
    print("   ‚Ä¢ Piaci hat√©konys√°g elemz√©s")
    print("   ‚Ä¢ Biztons√°gos Kelly Criterion")
    print("   ‚Ä¢ Profit-orient√°lt strat√©gi√°k")
    print("   ‚Ä¢ Fejlett feature engineering")

    print("\nüöÄ Tov√°bbi fejleszt√©si lehet≈ës√©gek:")
    print("   1. K√ºls≈ë adatok integr√°l√°sa (s√©r√ºl√©sek, id≈ëj√°r√°s, form)")
    print("   2. Ensemble learning finomhangol√°sa")
    print("   3. Multi-market arbitr√°zs (t√∂bb fogad√≥iroda)")
    print("   4. Deep learning modellek (Neural Networks)")
    print("   5. Real-time adatok integr√°l√°sa")
    print("   6. Automatikus keresked√©si rendszer")

    print(f"\nüí° Kulcs tanuls√°gok:")
    print("   ‚Ä¢ A piaci hat√©konys√°g magas, de vannak r√©sek")
    print("   ‚Ä¢ A hazai p√°lya el≈ëny kihaszn√°lhat√≥")
    print("   ‚Ä¢ Risk management kritikus fontoss√°g√∫")
    print("   ‚Ä¢ Konzervat√≠v kell≈ë krit√©rium haszn√°lata")
    print("   ‚Ä¢ Sokf√©le strat√©gia diverzifik√°l√°sa aj√°nlott")

if __name__ == "__main__":
    main()
