import { Controller, Get, Post, Query, Body } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';
import { DbDebuggerService, DataIntegrityReport } from './db-debugger.service';

@ApiTags('Database Debugger')
@Controller('db-debugger')
export class DbDebuggerController {
  constructor(private readonly dbDebuggerService: DbDebuggerService) {}

  @Get('integrity-check')
  @ApiOperation({ 
    summary: 'Teljes adatb√°zis integrit√°s ellen≈ërz√©s',
    description: '√Åtfog√≥ ellen≈ërz√©s az adatb√°zis √°llapot√°r√≥l, hi√°nyz√≥ adatokr√≥l √©s hib√°kr√≥l'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Integrit√°s jelent√©s sikeresen gener√°lva',
    type: Object
  })
  async runIntegrityCheck(): Promise<DataIntegrityReport> {
    return this.dbDebuggerService.runFullIntegrityCheck();
  }

  @Get('stats')
  @ApiOperation({ 
    summary: 'Adatb√°zis statisztik√°k',
    description: '√Åltal√°nos statisztik√°k az adatb√°zis tartalm√°r√≥l'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Statisztik√°k sikeresen lek√©rve'
  })
  async getDatabaseStats() {
    return this.dbDebuggerService.getDatabaseStats();
  }

  @Post('check-date-range')
  @ApiOperation({ 
    summary: 'Adott id≈ëszak meccsinek ellen≈ërz√©se',
    description: 'Ellen≈ërzi egy megadott id≈ëszak meccseit hi√°nyz√≥ adatok√©rt'
  })
  @ApiQuery({ name: 'startDate', description: 'Kezd≈ë d√°tum (YYYY-MM-DD)', example: '2025-01-01' })
  @ApiQuery({ name: 'endDate', description: 'Befejez≈ë d√°tum (YYYY-MM-DD)', example: '2025-01-31' })
  @ApiResponse({ 
    status: 200, 
    description: 'Id≈ëszak ellen≈ërz√©s befejezve'
  })
  async checkDateRange(
    @Body() body: { startDate: string; endDate: string }
  ) {
    const startDate = new Date(body.startDate);
    const endDate = new Date(body.endDate);
    
    const issues = await this.dbDebuggerService.checkMatchesByDateRange(startDate, endDate);
    
    return {
      period: {
        startDate: body.startDate,
        endDate: body.endDate,
      },
      issuesFound: issues.length,
      issues,
    };
  }

  @Get('health')
  @ApiOperation({ 
    summary: 'Adatb√°zis eg√©szs√©g gyors ellen≈ërz√©s',
    description: 'Gyors √°ttekint√©s az adatb√°zis √°llapot√°r√≥l'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Eg√©szs√©g ellen≈ërz√©s befejezve'
  })
  async getHealthCheck() {
    const stats = await this.dbDebuggerService.getDatabaseStats();
    
    const healthScore = Math.round(
      (stats.matches.oddsCompleteness + stats.matches.resultCompleteness) / 2
    );

    let status: 'EXCELLENT' | 'GOOD' | 'WARNING' | 'CRITICAL';
    
    if (healthScore >= 90) status = 'EXCELLENT';
    else if (healthScore >= 75) status = 'GOOD';
    else if (healthScore >= 50) status = 'WARNING';
    else status = 'CRITICAL';

    return {
      status,
      healthScore,
      summary: {
        totalMatches: stats.matches.total,
        dataCompleteness: {
          odds: `${stats.matches.oddsCompleteness}%`,
          results: `${stats.matches.resultCompleteness}%`,
        },
      },
      recommendation: this.getHealthRecommendation(status, stats),
    };
  }

  private getHealthRecommendation(
    status: string, 
    stats: any
  ): string {
    switch (status) {
      case 'EXCELLENT':
        return 'Az adatb√°zis kiv√°l√≥ √°llapotban van! üéâ';
      case 'GOOD':
        return 'Az adatb√°zis j√≥ √°llapotban van, kisebb hi√°nyoss√°gok lehetnek.';
      case 'WARNING':
        return 'Figyelem: Jelent≈ës adathi√°nyok vannak. Futtasd le a data ingestion folyamatokat.';
      case 'CRITICAL':
        return 'KRITIKUS: S√∫lyos adathi√°nyok! Azonnali beavatkoz√°s sz√ºks√©ges.';
      default:
        return 'Ismeretlen √°llapot.';
    }
  }
}