#!/usr/bin/env node

import { AutomatedScraper } from './scraper/automatedScraper.js';
import { logger } from './utils/logger.js';
import { CONFIG } from './config/index.js';

/**
 * F≈ë alkalmaz√°s ind√≠t√°sa
 */
async function main() {
  logger.info('üéØ BettingMentor Automatiz√°lt Flashscore Scraper');
  logger.info('================================================');
  
  // Konfigur√°ci√≥ logol√°sa
  logger.info('‚öôÔ∏è  Konfigur√°ci√≥:');
  logger.info(`   - Meccsek k√∂z√∂tti k√©sleltet√©s: ${CONFIG.DELAY_BETWEEN_MATCHES}ms`);
  logger.info(`   - Lig√°k k√∂z√∂tti k√©sleltet√©s: ${CONFIG.DELAY_BETWEEN_LEAGUES}ms`);
  logger.info(`   - Orsz√°gok k√∂z√∂tti k√©sleltet√©s: ${CONFIG.DELAY_BETWEEN_COUNTRIES}ms`);
  logger.info(`   - Kimeneti form√°tum: ${CONFIG.FILE_FORMAT.toUpperCase()}`);
  logger.info(`   - C√©lorsz√°gok: ${CONFIG.TARGET_LEAGUES.length} orsz√°g`);
  
  const scraper = new AutomatedScraper();
  
  // Graceful shutdown kezel√©se
  process.on('SIGINT', async () => {
    logger.info('\nüõë SIGINT signal fogadva, scraper le√°ll√≠t√°sa...');
    await scraper.stop();
    process.exit(0);
  });
  
  process.on('SIGTERM', async () => {
    logger.info('\nüõë SIGTERM signal fogadva, scraper le√°ll√≠t√°sa...');
    await scraper.stop();
    process.exit(0);
  });
  
  // Hibakezel√©s
  process.on('unhandledRejection', (reason, promise) => {
    logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  });
  
  process.on('uncaughtException', (error) => {
    logger.error('Uncaught Exception:', error);
    process.exit(1);
  });
  
  try {
    // Scraping ind√≠t√°sa
    await scraper.start();
    logger.info('üéâ Scraping sikeresen befejezve!');
    
  } catch (error) {
    logger.error('üí• Kritikus hiba a scraping sor√°n:', error);
    process.exit(1);
  }
}

// Alkalmaz√°s ind√≠t√°sa
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    logger.error('Hiba a main f√ºggv√©nyben:', error);
    process.exit(1);
  });
}