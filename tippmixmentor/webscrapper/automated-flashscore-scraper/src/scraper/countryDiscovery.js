import { logger } from '../utils/logger.js';
import { CONFIG } from '../config/index.js';
import { openPageAndNavigate } from './browser.js';

/**
 * Tiszta √©s egyszer≈± orsz√°g felfedez√©s
 */
export class CountryDiscovery {
  constructor(browser) {
    this.browser = browser;
  }

  /**
   * B≈ëv√≠tett orsz√°glista t√∂bb r√©gi√≥b√≥l
   */
  getKnownCountries() {
    return [
      // Eur√≥pa - Nyugat
      { name: 'england', displayName: 'Anglia', region: 'Nyugat-Eur√≥pa', flag: 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø' },
      { name: 'spain', displayName: 'Spanyolorsz√°g', region: 'Nyugat-Eur√≥pa', flag: 'üá™üá∏' },
      { name: 'germany', displayName: 'N√©metorsz√°g', region: 'Nyugat-Eur√≥pa', flag: 'üá©üá™' },
      { name: 'italy', displayName: 'Olaszorsz√°g', region: 'Nyugat-Eur√≥pa', flag: 'üáÆüáπ' },
      { name: 'france', displayName: 'Franciaorsz√°g', region: 'Nyugat-Eur√≥pa', flag: 'üá´üá∑' },
      { name: 'netherlands', displayName: 'Hollandia', region: 'Nyugat-Eur√≥pa', flag: 'üá≥üá±' },
      { name: 'portugal', displayName: 'Portug√°lia', region: 'Nyugat-Eur√≥pa', flag: 'üáµüáπ' },
      { name: 'belgium', displayName: 'Belgium', region: 'Nyugat-Eur√≥pa', flag: 'üáßüá™' },
      { name: 'austria', displayName: 'Ausztria', region: 'Nyugat-Eur√≥pa', flag: 'üá¶üáπ' },
      { name: 'switzerland', displayName: 'Sv√°jc', region: 'Nyugat-Eur√≥pa', flag: 'üá®üá≠' },
      
      // Eur√≥pa - K√∂z√©p/Kelet
      { name: 'hungary', displayName: 'Magyarorsz√°g', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá≠üá∫' },
      { name: 'czech-republic', displayName: 'Csehorsz√°g', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá®üáø' },
      { name: 'poland', displayName: 'Lengyelorsz√°g', region: 'K√∂z√©p-Eur√≥pa', flag: 'üáµüá±' },
      { name: 'slovakia', displayName: 'Szlov√°kia', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá∏üá∞' },
      { name: 'slovenia', displayName: 'Szlov√©nia', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá∏üáÆ' },
      { name: 'croatia', displayName: 'Horv√°torsz√°g', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá≠üá∑' },
      { name: 'serbia', displayName: 'Szerbia', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá∑üá∏' },
      { name: 'romania', displayName: 'Rom√°nia', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá∑üá¥' },
      { name: 'bulgaria', displayName: 'Bulg√°ria', region: 'K√∂z√©p-Eur√≥pa', flag: 'üáßüá¨' },
      { name: 'ukraine', displayName: 'Ukrajna', region: 'K√∂z√©p-Eur√≥pa', flag: 'üá∫üá¶' },
      
      // Eur√≥pa - √âszak
      { name: 'norway', displayName: 'Norv√©gia', region: '√âszak-Eur√≥pa', flag: 'üá≥üá¥' },
      { name: 'sweden', displayName: 'Sv√©dorsz√°g', region: '√âszak-Eur√≥pa', flag: 'üá∏üá™' },
      { name: 'denmark', displayName: 'D√°nia', region: '√âszak-Eur√≥pa', flag: 'üá©üá∞' },
      { name: 'finland', displayName: 'Finnorsz√°g', region: '√âszak-Eur√≥pa', flag: 'üá´üáÆ' },
      { name: 'iceland', displayName: 'Izland', region: '√âszak-Eur√≥pa', flag: 'üáÆüá∏' },
      
      // Brit-szigetek
      { name: 'scotland', displayName: 'Sk√≥cia', region: 'Brit-szigetek', flag: 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø' },
      { name: 'wales', displayName: 'Wales', region: 'Brit-szigetek', flag: 'üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø' },
      { name: 'ireland', displayName: '√çrorsz√°g', region: 'Brit-szigetek', flag: 'üáÆüá™' },
      { name: 'northern-ireland', displayName: '√âszak-√çrorsz√°g', region: 'Brit-szigetek', flag: 'üá¨üáß' },
      
      // Mediterr√°n
      { name: 'greece', displayName: 'G√∂r√∂gorsz√°g', region: 'Mediterr√°n', flag: 'üá¨üá∑' },
      { name: 'turkey', displayName: 'T√∂r√∂korsz√°g', region: 'Mediterr√°n', flag: 'üáπüá∑' },
      { name: 'cyprus', displayName: 'Ciprus', region: 'Mediterr√°n', flag: 'üá®üáæ' },
      { name: 'malta', displayName: 'M√°lta', region: 'Mediterr√°n', flag: 'üá≤üáπ' },
      
      // Amerika - √âszak
      { name: 'usa', displayName: 'USA', region: '√âszak-Amerika', flag: 'üá∫üá∏' },
      { name: 'canada', displayName: 'Kanada', region: '√âszak-Amerika', flag: 'üá®üá¶' },
      { name: 'mexico', displayName: 'Mexik√≥', region: '√âszak-Amerika', flag: 'üá≤üáΩ' },
      
      // Amerika - D√©l
      { name: 'brazil', displayName: 'Braz√≠lia', region: 'D√©l-Amerika', flag: 'üáßüá∑' },
      { name: 'argentina', displayName: 'Argent√≠na', region: 'D√©l-Amerika', flag: 'üá¶üá∑' },
      { name: 'chile', displayName: 'Chile', region: 'D√©l-Amerika', flag: 'üá®üá±' },
      { name: 'colombia', displayName: 'Kolumbia', region: 'D√©l-Amerika', flag: 'üá®üá¥' },
      { name: 'uruguay', displayName: 'Uruguay', region: 'D√©l-Amerika', flag: 'üá∫üáæ' },
      { name: 'peru', displayName: 'Peru', region: 'D√©l-Amerika', flag: 'üáµüá™' },
      { name: 'ecuador', displayName: 'Ecuador', region: 'D√©l-Amerika', flag: 'üá™üá®' },
      { name: 'venezuela', displayName: 'Venezuela', region: 'D√©l-Amerika', flag: 'üáªüá™' },
      { name: 'bolivia', displayName: 'Bol√≠via', region: 'D√©l-Amerika', flag: 'üáßüá¥' },
      { name: 'paraguay', displayName: 'Paraguay', region: 'D√©l-Amerika', flag: 'üáµüáæ' },
      
      // √Åzsia
      { name: 'japan', displayName: 'Jap√°n', region: '√Åzsia', flag: 'üáØüáµ' },
      { name: 'south-korea', displayName: 'D√©l-Korea', region: '√Åzsia', flag: 'üá∞üá∑' },
      { name: 'china', displayName: 'K√≠na', region: '√Åzsia', flag: 'üá®üá≥' },
      { name: 'india', displayName: 'India', region: '√Åzsia', flag: 'üáÆüá≥' },
      { name: 'thailand', displayName: 'Thaif√∂ld', region: '√Åzsia', flag: 'üáπüá≠' },
      { name: 'malaysia', displayName: 'Malajzia', region: '√Åzsia', flag: 'üá≤üáæ' },
      { name: 'singapore', displayName: 'Szingap√∫r', region: '√Åzsia', flag: 'üá∏üá¨' },
      { name: 'indonesia', displayName: 'Indon√©zia', region: '√Åzsia', flag: 'üáÆüá©' },
      
      // √ìce√°nia
      { name: 'australia', displayName: 'Ausztr√°lia', region: '√ìce√°nia', flag: 'üá¶üá∫' },
      { name: 'new-zealand', displayName: '√öj-Z√©land', region: '√ìce√°nia', flag: 'üá≥üáø' },
      
      // Afrika
      { name: 'south-africa', displayName: 'D√©l-Afrika', region: 'Afrika', flag: 'üáøüá¶' },
      { name: 'egypt', displayName: 'Egyiptom', region: 'Afrika', flag: 'üá™üá¨' },
      { name: 'morocco', displayName: 'Marokk√≥', region: 'Afrika', flag: 'üá≤üá¶' },
      { name: 'tunisia', displayName: 'Tun√©zia', region: 'Afrika', flag: 'üáπüá≥' },
      { name: 'algeria', displayName: 'Alg√©ria', region: 'Afrika', flag: 'üá©üáø' },
      { name: 'nigeria', displayName: 'Nig√©ria', region: 'Afrika', flag: 'üá≥üá¨' },
      { name: 'ghana', displayName: 'Gh√°na', region: 'Afrika', flag: 'üá¨üá≠' },
      
      // K√∂zel-Kelet
      { name: 'israel', displayName: 'Izrael', region: 'K√∂zel-Kelet', flag: 'üáÆüá±' },
      { name: 'saudi-arabia', displayName: 'Sza√∫d-Ar√°bia', region: 'K√∂zel-Kelet', flag: 'üá∏üá¶' },
      { name: 'uae', displayName: 'Egyes√ºlt Arab Emir√°tusok', region: 'K√∂zel-Kelet', flag: 'üá¶üá™' },
      { name: 'qatar', displayName: 'Katar', region: 'K√∂zel-Kelet', flag: 'üá∂üá¶' }
    ];
  }

  /**
   * Ellen≈ërzi, hogy egy orsz√°g el√©rhet≈ë-e a Flashscore-on
   */
  async testCountryAvailability(country) {
    try {
      const testUrl = `${CONFIG.BASE_URL}/football/${country.name}/`;
      const page = await openPageAndNavigate(this.browser, testUrl);
      
      // V√°rjunk egy kicsit, hogy az oldal bet√∂lt≈ëdj√∂n
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Ellen≈ërizz√ºk, hogy van-e tartalom az oldalon
      const hasContent = await page.evaluate(() => {
        // Keress√ºnk liga linkeket vagy meccs adatokat
        const leagueLinks = document.querySelectorAll('a[href*="/football/"]');
        const matchElements = document.querySelectorAll('[class*="match"], [class*="event"], [class*="league"]');
        const titleElement = document.querySelector('title');
        
        // Ellen≈ërizz√ºk, hogy nem 404 oldal-e
        const is404 = titleElement && titleElement.textContent.includes('404');
        
        return !is404 && (leagueLinks.length > 3 || matchElements.length > 0);
      });
      
      await page.close();
      
      return hasContent;
      
    } catch (error) {
      logger.debug(`Hiba ${country.name} tesztel√©se sor√°n: ${error.message}`);
      return false;
    }
  }

  /**
   * Felfedezi az el√©rhet≈ë orsz√°gokat
   */
  async discoverAvailableCountries() {
    logger.info('üåç El√©rhet≈ë orsz√°gok felfedez√©se...');
    
    const knownCountries = this.getKnownCountries();
    const availableCountries = [];
    
    // Tesztelj√ºk az √∂sszes orsz√°got
    const countriesToTest = knownCountries;
    
    for (const country of countriesToTest) {
      logger.info(`üîç Tesztel√©s: ${country.displayName} (${country.name})`);
      
      const isAvailable = await this.testCountryAvailability(country);
      
      if (isAvailable) {
        const countryWithUrl = {
          ...country,
          url: `${CONFIG.BASE_URL}/football/${country.name}/`
        };
        availableCountries.push(countryWithUrl);
        logger.info(`‚úÖ ${country.displayName} - el√©rhet≈ë`);
      } else {
        logger.info(`‚ùå ${country.displayName} - nem el√©rhet≈ë vagy nincs tartalom`);
      }
    }
    
    // Ha nem tal√°ltunk semmit, adjunk vissza egy alap√©rtelmezett list√°t
    if (availableCountries.length === 0) {
      logger.info('üîÑ Alap√©rtelmezett orsz√°glista haszn√°lata...');
      const defaultCountries = [
        { name: 'hungary', displayName: 'Magyarorsz√°g', url: `${CONFIG.BASE_URL}/football/hungary/` },
        { name: 'england', displayName: 'Anglia', url: `${CONFIG.BASE_URL}/football/england/` },
        { name: 'germany', displayName: 'N√©metorsz√°g', url: `${CONFIG.BASE_URL}/football/germany/` },
        { name: 'spain', displayName: 'Spanyolorsz√°g', url: `${CONFIG.BASE_URL}/football/spain/` },
        { name: 'czech-republic', displayName: 'Csehorsz√°g', url: `${CONFIG.BASE_URL}/football/czech-republic/` }
      ];
      
      return defaultCountries;
    }
    
    logger.info(`‚úÖ ${availableCountries.length} orsz√°g sikeresen felfedezve:`);
    availableCountries.forEach(country => {
      logger.info(`   - ${country.displayName} (${country.name})`);
    });
    
    return availableCountries;
  }

  /**
   * Egy orsz√°g lig√°inak felfedez√©se
   */
  async discoverCountryLeagues(countryName) {
    logger.info(`üèÜ ${countryName} lig√°inak felfedez√©se...`);
    
    try {
      const url = `${CONFIG.BASE_URL}/football/${countryName}/`;
      const page = await openPageAndNavigate(this.browser, url);
      
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const leagues = await page.evaluate((countryName) => {
        const results = [];
        
        // Pr√≥b√°ljunk k√ºl√∂nb√∂z≈ë szelektorokat
        const selectors = [
          'a[href*="/football/"]',
          'a[href*="/' + countryName + '/"]',
          '.leagues a',
          '.tournament a',
          '.competition a',
          '[class*="league"] a',
          '[class*="tournament"] a',
          '[class*="competition"] a'
        ];
        
        selectors.forEach(selector => {
          try {
            const links = document.querySelectorAll(selector);
            
            links.forEach(link => {
              const href = link.getAttribute('href');
              const text = link.textContent?.trim();
              
              if (href && text && text.length > 2) {
                // Ellen≈ërizz√ºk, hogy a link az adott orsz√°ghoz tartozik-e
                if (href.includes(`/${countryName}/`) || href.includes(`football/${countryName}`)) {
                  const pathParts = href.split('/');
                  let leagueName = '';
                  
                  // Pr√≥b√°ljuk megtal√°lni a liga nev√©t az URL-ben
                  for (let i = 0; i < pathParts.length; i++) {
                    if (pathParts[i] === countryName && i + 1 < pathParts.length) {
                      leagueName = pathParts[i + 1];
                      break;
                    }
                  }
                  
                  // Ha nem tal√°ltunk liga nevet az URL-ben, haszn√°ljuk a sz√∂veget
                  if (!leagueName) {
                    leagueName = text.toLowerCase()
                      .replace(/\s+/g, '-')
                      .replace(/[^a-z0-9\-]/g, '');
                  }
                  
                  // Csak akkor adjuk hozz√°, ha m√©g nincs benne
                  const exists = results.some(r => r.name === leagueName || r.displayName === text);
                  
                  if (!exists && leagueName) {
                    results.push({
                      name: leagueName,
                      displayName: text,
                      url: href.startsWith('http') ? href : `https://www.flashscore.com${href}`
                    });
                  }
                }
              }
            });
          } catch (e) {
            // Ignore selector errors
          }
        });
        
        // Ha m√©g mindig nincs eredm√©ny, pr√≥b√°ljunk minden linket
        if (results.length === 0) {
          const allLinks = document.querySelectorAll('a');
          
          allLinks.forEach(link => {
            const href = link.getAttribute('href');
            const text = link.textContent?.trim();
            
            if (href && text && text.length > 2 && 
                (href.includes(`/${countryName}/`) || href.includes(`football/${countryName}`))) {
              
              const leagueName = text.toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/[^a-z0-9\-]/g, '');
              
              const exists = results.some(r => r.displayName === text);
              
              if (!exists && leagueName) {
                results.push({
                  name: leagueName,
                  displayName: text,
                  url: href.startsWith('http') ? href : `https://www.flashscore.com${href}`
                });
              }
            }
          });
        }
        
        // Sz≈±rj√ºk ki a t√∫l r√∂vid vagy gyan√∫s neveket
        const filtered = results.filter(league => 
          league.displayName.length > 3 && 
          !league.displayName.toLowerCase().includes('more') &&
          !league.displayName.toLowerCase().includes('show') &&
          !league.displayName.toLowerCase().includes('view')
        );
        
        return filtered.slice(0, 20); // N√∂velj√ºk a limitet 20-ra
      }, countryName);
      
      await page.close();
      
      logger.info(`‚úÖ ${leagues.length} liga tal√°lva ${countryName} orsz√°gban`);
      leagues.forEach(league => {
        logger.info(`   - ${league.displayName} (${league.name})`);
      });
      
      return leagues;
      
    } catch (error) {
      logger.error(`Hiba ${countryName} lig√°inak felfedez√©se sor√°n:`, error);
      return [];
    }
  }
}