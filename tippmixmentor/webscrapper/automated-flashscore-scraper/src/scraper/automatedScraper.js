import { CONFIG } from '../config/index.js';
import { logger } from '../utils/logger.js';
import { delay, randomDelay } from '../utils/delay.js';
import { saveDataToFile, loadExistingData, fileExists } from '../utils/fileManager.js';
import { createBrowser } from './browser.js';
import { getMatchIdList, getMatchData } from './matchScraper.js';

/**
 * Automatiz√°lt scraping f≈ë oszt√°ly
 */
export class AutomatedScraper {
  constructor() {
    this.browser = null;
    this.isRunning = false;
    this.stats = {
      totalMatches: 0,
      successfulMatches: 0,
      failedMatches: 0,
      startTime: null,
      endTime: null
    };
  }

  /**
   * Scraping ind√≠t√°sa
   */
  async start() {
    if (this.isRunning) {
      logger.warn('Scraper m√°r fut!');
      return;
    }

    this.isRunning = true;
    this.stats.startTime = new Date();
    
    logger.info('üöÄ Automatiz√°lt Flashscore scraping ind√≠t√°sa...');
    
    try {
      this.browser = await createBrowser();
      
      for (const countryConfig of CONFIG.TARGET_LEAGUES) {
        await this.scrapeCountry(countryConfig);
        
        // Orsz√°gok k√∂z√∂tti hosszabb sz√ºnet
        if (CONFIG.TARGET_LEAGUES.indexOf(countryConfig) < CONFIG.TARGET_LEAGUES.length - 1) {
          await delay(CONFIG.DELAY_BETWEEN_COUNTRIES, `Sz√ºnet orsz√°gok k√∂z√∂tt`);
        }
      }
      
      this.stats.endTime = new Date();
      this.logFinalStats();
      
    } catch (error) {
      logger.error('Kritikus hiba a scraping sor√°n:', error);
    } finally {
      await this.cleanup();
    }
  }

  /**
   * Egy orsz√°g lig√°inak scraping-je
   * @param {Object} countryConfig - Orsz√°g konfigur√°ci√≥
   */
  async scrapeCountry(countryConfig) {
    const { country, leagues } = countryConfig;
    
    logger.info(`üè¥ Orsz√°g scraping kezd√©se: ${country.toUpperCase()}`);
    
    for (const league of leagues) {
      try {
        await this.scrapeLeague(country, league);
        
        // Lig√°k k√∂z√∂tti sz√ºnet
        if (leagues.indexOf(league) < leagues.length - 1) {
          await delay(CONFIG.DELAY_BETWEEN_LEAGUES, `Sz√ºnet lig√°k k√∂z√∂tt`);
        }
        
      } catch (error) {
        logger.error(`Hiba a liga scraping sor√°n: ${country}/${league}`, error);
      }
    }
    
    logger.info(`‚úÖ Orsz√°g scraping befejezve: ${country.toUpperCase()}`);
  }

  /**
   * Egy liga scraping-je
   * @param {string} country - Orsz√°g neve
   * @param {string} league - Liga neve
   */
  async scrapeLeague(country, league) {
    logger.info(`‚öΩ Liga scraping kezd√©se: ${country}/${league}`);
    
    try {
      // Meccs ID-k lek√©r√©se
      const matchIds = await getMatchIdList(this.browser, country, league);
      
      if (matchIds.length === 0) {
        logger.warn(`Nem tal√°lhat√≥k meccsek: ${country}/${league}`);
        return;
      }
      
      // Megl√©v≈ë adatok bet√∂lt√©se (inkrement√°lis scraping)
      const season = '2024-2025';
      const filename = `${league}_matches`;
      const existingData = await loadExistingData(country, league, season, filename);
      
      let newMatches = 0;
      let skippedMatches = 0;
      
      for (const matchId of matchIds) {
        try {
          // Ellen≈ërizz√ºk, hogy m√°r van-e adat err≈ël a meccsr≈ël
          if (existingData[matchId]) {
            skippedMatches++;
            logger.debug(`Meccs m√°r l√©tezik, kihagy√°s: ${matchId}`);
            continue;
          }
          
          // Meccs adatok lek√©r√©se
          const matchData = await getMatchData(this.browser, matchId);
          
          if (matchData) {
            existingData[matchId] = matchData;
            newMatches++;
            this.stats.successfulMatches++;
            
            logger.info(`‚úÖ Meccs lek√©rve: ${matchId} (${matchData.home?.name} vs ${matchData.away?.name})`);
          } else {
            this.stats.failedMatches++;
            logger.warn(`‚ùå Meccs lek√©r√©se sikertelen: ${matchId}`);
          }
          
          this.stats.totalMatches++;
          
          // Meccsek k√∂z√∂tti k√©sleltet√©s
          await randomDelay(
            CONFIG.DELAY_BETWEEN_MATCHES, 
            CONFIG.DELAY_BETWEEN_MATCHES + 2000,
            'Meccsek k√∂z√∂tti sz√ºnet'
          );
          
        } catch (error) {
          logger.error(`Hiba a meccs feldolgoz√°sa sor√°n: ${matchId}`, error);
          this.stats.failedMatches++;
        }
      }
      
      // Adatok ment√©se
      if (newMatches > 0 || Object.keys(existingData).length > 0) {
        await saveDataToFile(existingData, country, league, season, filename);
        logger.info(`üíæ Liga adatok mentve: ${country}/${league} (${newMatches} √∫j, ${skippedMatches} kihagyott)`);
      }
      
    } catch (error) {
      logger.error(`Hiba a liga scraping sor√°n: ${country}/${league}`, error);
    }
  }

  /**
   * Scraping le√°ll√≠t√°sa
   */
  async stop() {
    logger.info('üõë Scraping le√°ll√≠t√°sa...');
    this.isRunning = false;
    await this.cleanup();
  }

  /**
   * Cleanup √©s er≈ëforr√°sok felszabad√≠t√°sa
   */
  async cleanup() {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      logger.info('Browser bez√°rva');
    }
    this.isRunning = false;
  }

  /**
   * V√©gs≈ë statisztik√°k logol√°sa
   */
  logFinalStats() {
    const duration = this.stats.endTime - this.stats.startTime;
    const durationMinutes = Math.round(duration / 1000 / 60);
    
    logger.info('üìä SCRAPING STATISZTIK√ÅK:');
    logger.info(`‚è±Ô∏è  Fut√°si id≈ë: ${durationMinutes} perc`);
    logger.info(`üéØ √ñsszes meccs: ${this.stats.totalMatches}`);
    logger.info(`‚úÖ Sikeres: ${this.stats.successfulMatches}`);
    logger.info(`‚ùå Sikertelen: ${this.stats.failedMatches}`);
    logger.info(`üìà Sikeress√©gi ar√°ny: ${Math.round((this.stats.successfulMatches / this.stats.totalMatches) * 100)}%`);
  }

  /**
   * Aktu√°lis st√°tusz lek√©rdez√©se
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      stats: this.stats
    };
  }
}