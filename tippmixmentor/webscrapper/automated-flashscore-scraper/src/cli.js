#!/usr/bin/env node

import {AutomatedScraper} from './scraper/automatedScraper.js';
import {ComprehensiveScraper} from './scraper/comprehensiveScraper.js';
import {logger} from './utils/logger.js';
import {CONFIG} from './config/index.js';
import {cacheManager} from './utils/cacheManager.js';
import fs from 'fs-extra';
import path from 'path';
import inquirer from 'inquirer';
import { selectSeason } from './cli/prompts/season/index.js';

/**
 * CLI parancsok kezel√©se
 */
class CLI {
    constructor() {
        this.scraper = new AutomatedScraper();
    }

    /**
   * Parancsok feldolgoz√°sa
   */
    async processCommand(args) {
        const command = args[2];

        switch (command) {
            case 'start':
                await this.startScraping();
                break;

            case 'status':
                this.showStatus();
                break;

            case 'config':
                this.showConfig();
                break;

            case 'stats':
                await this.showStats();
                break;

            case 'clean':
                await this.cleanData();
                break;

            case 'discover':
                await this.startDiscovery();
                break;

            case 'select':
                await this.startInteractiveSelection();
                break;

            case 'comprehensive':
                await this.startComprehensive();
                break;

            case 'ml-dataset':
                await this.generateMLDatasets();
                break;

            case 'refresh-cache':
                await this.refreshCache();
                break;

            case 'cache-status':
                await this.showCacheStatus();
                break;

            case 'help':
            default:
                this.showHelp();
                break;
        }
    }

    /**
   * Scraping ind√≠t√°sa
   */
    async startScraping() {
        console.log('üöÄ Automatiz√°lt scraping ind√≠t√°sa...\n');
        await this.scraper.start();
    }

    /**
   * Aktu√°lis st√°tusz megjelen√≠t√©se
   */
    showStatus() {
        const status = this.scraper.getStatus();

        console.log('üìä SCRAPER ST√ÅTUSZ');
        console.log('==================');
        console.log(`Fut√°s: ${
            status.isRunning ? 'üü¢ AKT√çV' : 'üî¥ LE√ÅLL√çTVA'
        }`);
        console.log(`√ñsszes meccs: ${
            status.stats.totalMatches
        }`);
        console.log(`Sikeres: ${
            status.stats.successfulMatches
        }`);
        console.log(`Sikertelen: ${
            status.stats.failedMatches
        }`);

        if (status.stats.startTime) {
            const duration = (new Date() - status.stats.startTime) / 1000 / 60;
            console.log(`Fut√°si id≈ë: ${
                Math.round(duration)
            } perc`);
        }
    }

    /**
   * Konfigur√°ci√≥ megjelen√≠t√©se
   */
    showConfig() {
        console.log('‚öôÔ∏è  KONFIGUR√ÅCI√ì');
        console.log('================');
        console.log(`Meccsek k√∂z√∂tti k√©sleltet√©s: ${
            CONFIG.DELAY_BETWEEN_MATCHES
        }ms`);
        console.log(`Lig√°k k√∂z√∂tti k√©sleltet√©s: ${
            CONFIG.DELAY_BETWEEN_LEAGUES
        }ms`);
        console.log(`Orsz√°gok k√∂z√∂tti k√©sleltet√©s: ${
            CONFIG.DELAY_BETWEEN_COUNTRIES
        }ms`);
        console.log(`F√°jlform√°tum: ${
            CONFIG.FILE_FORMAT.toUpperCase()
        }`);
        console.log(`Kimeneti mappa: ${
            CONFIG.OUTPUT_BASE_PATH
        }`);
        console.log(`Headless m√≥d: ${
            CONFIG.HEADLESS ? 'BE' : 'KI'
        }`);

        console.log('\nüéØ C√âLLIG√ÅK:');
        CONFIG.TARGET_LEAGUES.forEach(country => {
            console.log(`  ${
                country.country.toUpperCase()
            }:`);
            country.leagues.forEach(league => {
                console.log(`    - ${league}`);
            });
        });
    }

    /**
   * Statisztik√°k megjelen√≠t√©se
   */
    async showStats() {
        console.log('üìà ADATGY≈∞JT√âSI STATISZTIK√ÅK');
        console.log('===========================');

        try {
            const stats = await this.calculateDataStats();

            console.log(`√ñsszes orsz√°g: ${
                stats.countries
            }`);
            console.log(`√ñsszes liga: ${
                stats.leagues
            }`);
            console.log(`√ñsszes meccs: ${
                stats.totalMatches
            }`);
            console.log(`F√°jlok sz√°ma: ${
                stats.files
            }`);
            console.log(`√ñsszes f√°jlm√©ret: ${
                this.formatBytes(stats.totalSize)
            }`);

            console.log('\nüìÅ ORSZ√ÅGONK√âNTI BONT√ÅS:');
            Object.entries(stats.byCountry).forEach(([country, data]) => {
                console.log(`  ${
                    country.toUpperCase()
                }: ${
                    data.matches
                } meccs, ${
                    data.leagues
                } liga`);
            });

        } catch (error) {
            console.error('Hiba a statisztik√°k sz√°m√≠t√°sakor:', error.message);
        }
    }

    /**
   * Adatok t√∂rl√©se
   */
    async cleanData() {
        console.log('üßπ Adatok t√∂rl√©se...');

        try {
            if (await fs.pathExists(CONFIG.OUTPUT_BASE_PATH)) {
                await fs.remove(CONFIG.OUTPUT_BASE_PATH);
                console.log('‚úÖ Adatok sikeresen t√∂r√∂lve!');
            } else {
                console.log('‚ÑπÔ∏è  Nincs t√∂rlend≈ë adat.');
            }
        } catch (error) {
            console.error('‚ùå Hiba az adatok t√∂rl√©sekor:', error.message);
        }
    }

    /**
   * M√°r let√∂lt√∂tt adatok ellen≈ërz√©se
   */
    async checkExistingData() {
        const existingData = {};

        if (!await fs.pathExists(CONFIG.OUTPUT_BASE_PATH)) {
            return existingData;
        }

        try {
            const countries = await fs.readdir(CONFIG.OUTPUT_BASE_PATH);

            for (const country of countries) {
                const countryPath = path.join(CONFIG.OUTPUT_BASE_PATH, country);
                const countryStats = await fs.stat(countryPath);

                if (countryStats.isDirectory()) {
                    existingData[country] = {
                        leagues: [],
                        totalMatches: 0,
                        lastUpdated: null
                    };

                    const leagues = await fs.readdir(countryPath);

                    for (const league of leagues) {
                        const leaguePath = path.join(countryPath, league);
                        const leagueStats = await fs.stat(leaguePath);

                        if (leagueStats.isDirectory()) {
                            const seasons = await fs.readdir(leaguePath);
                            let leagueMatches = 0;
                            let latestUpdate = null;

                            for (const season of seasons) {
                                const seasonPath = path.join(leaguePath, season);
                                const files = await fs.readdir(seasonPath);

                                for (const file of files) {
                                    if (file.endsWith('.json')) {
                                        const filePath = path.join(seasonPath, file);
                                        const fileStats = await fs.stat(filePath);

                                        if (! latestUpdate || fileStats.mtime > latestUpdate) {
                                            latestUpdate = fileStats.mtime;
                                        }

                                        try {
                                            const data = await fs.readJson(filePath);
                                            leagueMatches += Object.keys(data).length;
                                        } catch (error) { // Hib√°s JSON f√°jl eset√©n folytatjuk
                                        }
                                    }
                                }
                            }

                            existingData[country].leagues.push({name: league, matches: leagueMatches, lastUpdated: latestUpdate});
                            existingData[country].totalMatches += leagueMatches;

                            if (! existingData[country].lastUpdated || (latestUpdate && latestUpdate > existingData[country].lastUpdated)) {
                                existingData[country].lastUpdated = latestUpdate;
                            }
                        }
                    }
                }
            }
        } catch (error) {
            console.error('Hiba a megl√©v≈ë adatok ellen≈ërz√©sekor:', error.message);
        }

        return existingData;
    }

    /**
   * Interakt√≠v kiv√°laszt√°s ind√≠t√°sa
   */
    async startInteractiveSelection() {
        console.log('üéØ Intelligens Liga Kiv√°laszt√°s');
        console.log('===============================\n');

        try {
            const { createBrowser } = await import('./scraper/browser.js');
            const browser = await createBrowser();

            const { CountryDiscovery } = await import('./scraper/countryDiscovery.js');
            const discovery = new CountryDiscovery(browser);

            let countries = await cacheManager.loadCountriesFromCache();
            if (!countries) {
                countries = await discovery.discoverAvailableCountries();
                await cacheManager.saveCountriesToCache(countries);
            }

            if (countries.length === 0) {
                logger.error('Nem tal√°lhat√≥k el√©rhet≈ë orsz√°gok.');
                await browser.close();
                return;
            }

            const { selectedCountries } = await inquirer.prompt([
                {
                    type: 'checkbox',
                    name: 'selectedCountries',
                    message: 'V√°laszd ki a k√≠v√°nt orsz√°gokat:',
                    choices: countries.map(c => ({ name: `${c.flag} ${c.displayName}`, value: c })),
                    validate: answer => answer.length > 0 ? true : 'Legal√°bb egy orsz√°got v√°lassz ki!'
                }
            ]);

            const finalSelection = [];
            for (const country of selectedCountries) {
                let leagues = await cacheManager.loadLeaguesFromCache(country.name);
                if (!leagues) {
                    leagues = await discovery.discoverCountryLeagues(country.name);
                    if (leagues && leagues.length > 0) {
                        await cacheManager.saveLeaguesToCache(country.name, leagues);
                    }
                }

                if (leagues && leagues.length > 0) {
                    const { selectedLeagueNames } = await inquirer.prompt([
                        {
                            type: 'checkbox',
                            name: 'selectedLeagueNames',
                            message: `V√°laszd ki a lig√°kat (${country.displayName}):`,
                            choices: leagues.map(l => ({ name: l.displayName, value: l.name }))
                        }
                    ]);

                    for (const selectedLeagueName of selectedLeagueNames) {
                        const leagueObject = leagues.find(l => l.name === selectedLeagueName);
                        if (leagueObject) {
                            // NEW: Select season for each chosen league
                            const season = await selectSeason(browser, leagueObject.url); // Pass league URL to get seasons
                            finalSelection.push({ 
                                country: country.name, 
                                leagueName: leagueObject.name, // Base league name
                                leagueDisplayName: leagueObject.displayName, // For logging/display
                                seasonName: season.name, // e.g., "2024-2025"
                                seasonUrl: season.url // Full URL for the season
                            });
                        }
                    }
                }
    }

    await browser.close();

    if (finalSelection.length > 0) {
        console.log('\nKiv√°lasztott lig√°k √©s szezonok:');
        finalSelection.forEach(item => {
            console.log(`- ${item.country.toUpperCase()}: ${item.leagueDisplayName} (${item.seasonName})`);
        });

        const { shouldStart } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'shouldStart',
                message: 'Indulhat a scraping a kiv√°lasztott lig√°kkal √©s szezonokkal?',
                default: true
            }
        ]);

        if (shouldStart) {
            await this.startCustomScraping(finalSelection);
        }
    } else {
        console.log('Nincs kiv√°lasztott liga vagy szezon. Kil√©p√©s.');
    }

        } catch (error) {
            logger.error('Hiba az interakt√≠v kiv√°laszt√°s sor√°n:', error);
        }
    }

    /**
   * Egyedi scraping ind√≠t√°sa a kiv√°lasztott orsz√°gokkal/lig√°kkal
   */
    async startCustomScraping(selection) {
        console.log('üöÄ Egyedi scraping ind√≠t√°sa...\n');

        try {
            // The selection now contains country, leagueName, seasonName, seasonUrl
            // We need to adapt AutomatedScraper to handle this new structure.
            // For now, let's just pass it as a new TARGET_LEAGUES structure.
            const customConfig = {
                TARGET_LEAGUES: selection.map(item => ({
                    country: item.country,
                    leagueName: item.leagueName,
                    seasonName: item.seasonName,
                    seasonUrl: item.seasonUrl
                }))
            };

            const customScraper = new AutomatedScraper();

            // Temporarily override CONFIG for this scraping run
            const originalTargetLeagues = CONFIG.TARGET_LEAGUES;
            CONFIG.TARGET_LEAGUES = customConfig.TARGET_LEAGUES;

            await customScraper.start();

            // Restore original CONFIG
            CONFIG.TARGET_LEAGUES = originalTargetLeagues;

            console.log('\n‚úÖ Egyedi scraping befejezve!');

        } catch (error) {
            console.error('‚ùå Hiba az egyedi scraping sor√°n:', error.message);
        }
    }

    /**
   * Liga felfedez√©s ind√≠t√°sa
   */
    async startDiscovery() {
        console.log('üîç Liga felfedez√©s ind√≠t√°sa...\n');

        try { // Import the new CountryDiscovery class
            const {CountryDiscovery} = await import ('./scraper/countryDiscovery.js');
            const {createBrowser} = await import ('./scraper/browser.js');

            const browser = await createBrowser();
            const discovery = new CountryDiscovery(browser);

            // Discover available countries
            const countries = await discovery.discoverAvailableCountries();

            console.log(`\n‚úÖ ${
                countries.length
            } orsz√°g felfedezve:`);
            countries.forEach(country => {
                console.log(`  üè¥ ${
                    country.displayName
                } (${
                    country.name
                })`);
            });

            // Optionally discover leagues for the first few countries
            if (countries.length > 0) {
                console.log('\nüèÜ Liga felfedez√©s az els≈ë orsz√°gban...');
                const firstCountry = countries[0];
                const leagues = await discovery.discoverCountryLeagues(firstCountry.name);

                if (leagues.length > 0) {
                    console.log(`\n‚úÖ ${
                        leagues.length
                    } liga tal√°lva ${
                        firstCountry.displayName
                    } orsz√°gban:`);
                    leagues.forEach(league => {
                        console.log(`  ‚öΩ ${
                            league.displayName
                        } (${
                            league.name
                        })`);
                    });
                }
            }

            await browser.close();
        } catch (error) {
            console.error('‚ùå Hiba a felfedez√©s sor√°n:', error.message);
        }
    }

    /**
   * √Åtfog√≥ scraping ind√≠t√°sa
   */
    async startComprehensive() {
        console.log('üåü √ÅTFOG√ì SCRAPING ind√≠t√°sa - Minden el√©rhet≈ë adat...\n');
        console.log('‚ö†Ô∏è  FIGYELEM: Ez t√∂bb √≥r√°t is ig√©nybe vehet!');
        console.log('‚ö†Ô∏è  A folyamat lassan halad az IP v√©delem miatt.\n');

        const comprehensiveScraper = new ComprehensiveScraper();
        await comprehensiveScraper.startComprehensiveScraping();
    }

    /**
   * ML datasetek gener√°l√°sa
   */
    async generateMLDatasets() {
        console.log('ü§ñ ML datasetek gener√°l√°sa...\n');

        try {
            const {MLDataProcessor} = await import ('./utils/mlDataProcessor.js');
            await MLDataProcessor.generateAllMLDatasets();
            console.log('\n‚úÖ ML datasetek sikeresen gener√°lva!');
            console.log('üìÅ Keres√©s: scraped_data/*/*/*_ml_dataset.csv');
        } catch (error) {
            console.error('‚ùå Hiba az ML datasetek gener√°l√°sa sor√°n:', error.message);
        }
    }

    /**
   * Cache friss√≠t√©se
   */
    async refreshCache() {
        console.log('üîÑ Cache friss√≠t√©se...');

        try {
            const { createBrowser } = await import('./scraper/browser.js');
            const browser = await createBrowser();

            await cacheManager.refreshCache(browser);

            await browser.close();
            console.log('‚úÖ Cache friss√≠t√©se befejezve!');
        } catch (error) {
            console.error('‚ùå Hiba a cache friss√≠t√©sekor:', error.message);
        }
    }

    async showCacheStatus() {
        console.log('üìã CACHE √ÅLLAPOT');
        console.log('===============');

        try {
            const status = await cacheManager.checkCacheStatus();

            if (status.hasCountriesCache) {
                console.log(`üåç Orsz√°gok cache: ‚úÖ (${status.countriesCacheAge} napos)`);
            } else {
                console.log('üåç Orsz√°gok cache: ‚ùå (nem tal√°lhat√≥)');
            }

            console.log(`üèÜ Lig√°k cache: ${status.leaguesCacheCount} orsz√°g`);

            if (status.leaguesCacheCount > 0) {
                console.log(`   - Legr√©gebbi: ${status.oldestLeagueCache} napos`);
                console.log(`   - Leg√∫jabb: ${status.newestLeagueCache} napos`);
            }

            // Cache √©rv√©nyess√©g ellen≈ërz√©se
            const cacheValidDays = 7; // Ugyanaz, mint a CacheManager oszt√°lyban

            if (status.hasCountriesCache && status.countriesCacheAge > cacheValidDays) {
                console.log('\n‚ö†Ô∏è  Az orsz√°gok cache elavult, friss√≠t√©s javasolt!');
            }

            if (status.leaguesCacheCount > 0 && status.oldestLeagueCache > cacheValidDays) {
                console.log('‚ö†Ô∏è  N√©h√°ny liga cache elavult, friss√≠t√©s javasolt!');
            }

            console.log('\nCache friss√≠t√©se:');
            console.log('  npm run refresh-cache');

        } catch (error) {
            console.error('‚ùå Hiba a cache √°llapot ellen≈ërz√©sekor:', error.message);
        }
    }

  /**
   * S√∫g√≥ megjelen√≠t√©se
   */
    showHelp() {
        console.log('üéØ BettingMentor Automatiz√°lt Flashscore Scraper');
        console.log('================================================\n');

        console.log('HASZN√ÅLAT:');
        console.log('  node src/cli.js <parancs>\n');

        console.log('PARANCSOK:');
        console.log('  start         üöÄ Scraping ind√≠t√°sa (konfigur√°lt lig√°k)');
        console.log('  select        üéØ Interakt√≠v orsz√°g/liga kiv√°laszt√°s');
        console.log('  comprehensive üåü MINDEN el√©rhet≈ë adat let√∂lt√©se');
        console.log('  discover      üîç El√©rhet≈ë orsz√°gok/lig√°k felfedez√©se');
        console.log('  ml-dataset    ü§ñ ML datasetek gener√°l√°sa (JSON‚ÜíCSV)');
        console.log('  refresh-cache üîÑ Orsz√°gok √©s lig√°k cache friss√≠t√©se');
        console.log('  cache-status  üìã Cache √°llapot megjelen√≠t√©se');
        console.log('  status        üìä Aktu√°lis st√°tusz');
        console.log('  config        ‚öôÔ∏è  Konfigur√°ci√≥ megjelen√≠t√©se');
        console.log('  stats         üìà Adatgy≈±jt√©si statisztik√°k');
        console.log('  clean         üßπ √ñsszes adat t√∂rl√©se');
        console.log('  help          ‚ùì Ez a s√∫g√≥\n');

        console.log('P√âLD√ÅK:');
        console.log('  node src/cli.js start');
        console.log('  node src/cli.js select');
        console.log('  node src/cli.js refresh-cache\n');
    }

  /**
   * Adatstatisztik√°k sz√°m√≠t√°sa
   */
  async calculateDataStats() {
    const stats = {
      countries: 0,
      leagues: 0,
      totalMatches: 0,
      files: 0,
      totalSize: 0,
      byCountry: {}
    };

    if (!await fs.pathExists(CONFIG.OUTPUT_BASE_PATH)) {
      return stats;
    }

    const countries = await fs.readdir(CONFIG.OUTPUT_BASE_PATH);
    stats.countries = countries.length;

    for (const country of countries) {
      const countryPath = path.join(CONFIG.OUTPUT_BASE_PATH, country);
      const countryStats = await fs.stat(countryPath);

      if (countryStats.isDirectory()) {
        stats.byCountry[country] = { leagues: 0, matches: 0 };

        const leagues = await fs.readdir(countryPath);
        stats.leagues += leagues.length;
        stats.byCountry[country].leagues = leagues.length;

        for (const league of leagues) {
          const leaguePath = path.join(countryPath, league);
          const leagueStats = await fs.stat(leaguePath);

          if (leagueStats.isDirectory()) {
            const seasons = await fs.readdir(leaguePath);

            for (const season of seasons) {
              const seasonPath = path.join(leaguePath, season);
              const files = await fs.readdir(seasonPath);

              for (const file of files) {
                if (file.endsWith('.json')) {
                  const filePath = path.join(seasonPath, file);
                  const fileStats = await fs.stat(filePath);

                  stats.files++;
                  stats.totalSize += fileStats.size;

                  try {
                    const data = await fs.readJson(filePath);
                    const matchCount = Object.keys(data).length;
                    stats.totalMatches += matchCount;
                    stats.byCountry[country].matches += matchCount;
                  } catch (error) {
                    logger.error(`Hiba a JSON f√°jl olvas√°sakor: ${filePath}`, error);
                  }
                }
              }
            }
          }
        }
      }
    }
    return stats;
  }

  /**
   * B√°jtok olvashat√≥ form√°tumba form√°z√°sa
   */
  formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }
}

// CLI ind√≠t√°s
const cli = new CLI();
cli.processCommand(process.argv).catch(error => {
  logger.error('CLI hiba:', error);
  process.exit(1);
});