#!/usr/bin/env node

import {AutomatedScraper} from './scraper/automatedScraper.js';
import {ComprehensiveScraper} from './scraper/comprehensiveScraper.js';
import {logger} from './utils/logger.js';
import {CONFIG} from './config/index.js';
import {cacheManager} from './utils/cacheManager.js';
import fs from 'fs-extra';
import path from 'path';
import inquirer from 'inquirer';

/**
 * CLI parancsok kezel√©se
 */
class CLI {
    constructor() {
        this.scraper = new AutomatedScraper();
    }

    /**
   * Parancsok feldolgoz√°sa
   */
    async processCommand(args) {
        const command = args[2];

        switch (command) {
            case 'start':
                await this.startScraping();
                break;

            case 'status':
                this.showStatus();
                break;

            case 'config':
                this.showConfig();
                break;

            case 'stats':
                await this.showStats();
                break;

            case 'clean':
                await this.cleanData();
                break;

            case 'discover':
                await this.startDiscovery();
                break;

            case 'select':
                await this.startInteractiveSelection();
                break;

            case 'comprehensive':
                await this.startComprehensive();
                break;

            case 'ml-dataset':
                await this.generateMLDatasets();
                break;

            case 'refresh-cache':
                await this.refreshCache();
                break;

            case 'cache-status':
                await this.showCacheStatus();
                break;

            case 'help':
            default:
                this.showHelp();
                break;
        }
    }

    /**
   * Scraping ind√≠t√°sa
   */
    async startScraping() {
        console.log('üöÄ Automatiz√°lt scraping ind√≠t√°sa...\n');
        await this.scraper.start();
    }

    /**
   * Aktu√°lis st√°tusz megjelen√≠t√©se
   */
    showStatus() {
        const status = this.scraper.getStatus();

        console.log('üìä SCRAPER ST√ÅTUSZ');
        console.log('==================');
        console.log(`Fut√°s: ${
            status.isRunning ? 'üü¢ AKT√çV' : 'üî¥ LE√ÅLL√çTVA'
        }`);
        console.log(`√ñsszes meccs: ${
            status.stats.totalMatches
        }`);
        console.log(`Sikeres: ${
            status.stats.successfulMatches
        }`);
        console.log(`Sikertelen: ${
            status.stats.failedMatches
        }`);

        if (status.stats.startTime) {
            const duration = (new Date() - status.stats.startTime) / 1000 / 60;
            console.log(`Fut√°si id≈ë: ${
                Math.round(duration)
            } perc`);
        }
    }

    /**
   * Konfigur√°ci√≥ megjelen√≠t√©se
   */
    showConfig() {
        console.log('‚öôÔ∏è  KONFIGUR√ÅCI√ì');
        console.log('================');
        console.log(`Meccsek k√∂z√∂tti k√©sleltet√©s: ${
            CONFIG.DELAY_BETWEEN_MATCHES
        }ms`);
        console.log(`Lig√°k k√∂z√∂tti k√©sleltet√©s: ${
            CONFIG.DELAY_BETWEEN_LEAGUES
        }ms`);
        console.log(`Orsz√°gok k√∂z√∂tti k√©sleltet√©s: ${
            CONFIG.DELAY_BETWEEN_COUNTRIES
        }ms`);
        console.log(`F√°jlform√°tum: ${
            CONFIG.FILE_FORMAT.toUpperCase()
        }`);
        console.log(`Kimeneti mappa: ${
            CONFIG.OUTPUT_BASE_PATH
        }`);
        console.log(`Headless m√≥d: ${
            CONFIG.HEADLESS ? 'BE' : 'KI'
        }`);

        console.log('\nüéØ C√âLLIG√ÅK:');
        CONFIG.TARGET_LEAGUES.forEach(country => {
            console.log(`  ${
                country.country.toUpperCase()
            }:`);
            country.leagues.forEach(league => {
                console.log(`    - ${league}`);
            });
        });
    }

    /**
   * Statisztik√°k megjelen√≠t√©se
   */
    async showStats() {
        console.log('üìà ADATGY≈∞JT√âSI STATISZTIK√ÅK');
        console.log('===========================');

        try {
            const stats = await this.calculateDataStats();

            console.log(`√ñsszes orsz√°g: ${
                stats.countries
            }`);
            console.log(`√ñsszes liga: ${
                stats.leagues
            }`);
            console.log(`√ñsszes meccs: ${
                stats.totalMatches
            }`);
            console.log(`F√°jlok sz√°ma: ${
                stats.files
            }`);
            console.log(`√ñsszes f√°jlm√©ret: ${
                this.formatBytes(stats.totalSize)
            }`);

            console.log('\nüìÅ ORSZ√ÅGONK√âNTI BONT√ÅS:');
            Object.entries(stats.byCountry).forEach(([country, data]) => {
                console.log(`  ${
                    country.toUpperCase()
                }: ${
                    data.matches
                } meccs, ${
                    data.leagues
                } liga`);
            });

        } catch (error) {
            console.error('Hiba a statisztik√°k sz√°m√≠t√°sakor:', error.message);
        }
    }

    /**
   * Adatok t√∂rl√©se
   */
    async cleanData() {
        console.log('üßπ Adatok t√∂rl√©se...');

        try {
            if (await fs.pathExists(CONFIG.OUTPUT_BASE_PATH)) {
                await fs.remove(CONFIG.OUTPUT_BASE_PATH);
                console.log('‚úÖ Adatok sikeresen t√∂r√∂lve!');
            } else {
                console.log('‚ÑπÔ∏è  Nincs t√∂rlend≈ë adat.');
            }
        } catch (error) {
            console.error('‚ùå Hiba az adatok t√∂rl√©sekor:', error.message);
        }
    }

    /**
   * M√°r let√∂lt√∂tt adatok ellen≈ërz√©se
   */
    async checkExistingData() {
        const existingData = {};

        if (!await fs.pathExists(CONFIG.OUTPUT_BASE_PATH)) {
            return existingData;
        }

        try {
            const countries = await fs.readdir(CONFIG.OUTPUT_BASE_PATH);

            for (const country of countries) {
                const countryPath = path.join(CONFIG.OUTPUT_BASE_PATH, country);
                const countryStats = await fs.stat(countryPath);

                if (countryStats.isDirectory()) {
                    existingData[country] = {
                        leagues: [],
                        totalMatches: 0,
                        lastUpdated: null
                    };

                    const leagues = await fs.readdir(countryPath);

                    for (const league of leagues) {
                        const leaguePath = path.join(countryPath, league);
                        const leagueStats = await fs.stat(leaguePath);

                        if (leagueStats.isDirectory()) {
                            const seasons = await fs.readdir(leaguePath);
                            let leagueMatches = 0;
                            let latestUpdate = null;

                            for (const season of seasons) {
                                const seasonPath = path.join(leaguePath, season);
                                const files = await fs.readdir(seasonPath);

                                for (const file of files) {
                                    if (file.endsWith('.json')) {
                                        const filePath = path.join(seasonPath, file);
                                        const fileStats = await fs.stat(filePath);

                                        if (! latestUpdate || fileStats.mtime > latestUpdate) {
                                            latestUpdate = fileStats.mtime;
                                        }

                                        try {
                                            const data = await fs.readJson(filePath);
                                            leagueMatches += Object.keys(data).length;
                                        } catch (error) { // Hib√°s JSON f√°jl eset√©n folytatjuk
                                        }
                                    }
                                }
                            }

                            existingData[country].leagues.push({name: league, matches: leagueMatches, lastUpdated: latestUpdate});
                            existingData[country].totalMatches += leagueMatches;

                            if (! existingData[country].lastUpdated || (latestUpdate && latestUpdate > existingData[country].lastUpdated)) {
                                existingData[country].lastUpdated = latestUpdate;
                            }
                        }
                    }
                }
            }
        } catch (error) {
            console.error('Hiba a megl√©v≈ë adatok ellen≈ërz√©sekor:', error.message);
        }

        return existingData;
    }

    /**
   * Interakt√≠v kiv√°laszt√°s ind√≠t√°sa
   */
    async startInteractiveSelection() {
        console.log('üéØ Intelligens Liga Kiv√°laszt√°s');
        console.log('===============================\n');

        try { // Ellen≈ërizz√ºk a m√°r let√∂lt√∂tt adatokat
            console.log('üìä Megl√©v≈ë adatok ellen≈ërz√©se...');
            const existingData = await this.checkExistingData();

            // Import the discovery class
            const {CountryDiscovery} = await import ('./scraper/countryDiscovery.js');
            const {createBrowser} = await import ('./scraper/browser.js');

            const browser = await createBrowser();
            const discovery = new CountryDiscovery(browser);

            // Orsz√°gok bet√∂lt√©se cache-b≈ël vagy felfedez√©se
            console.log('üîç El√©rhet≈ë orsz√°gok keres√©se...');
            let countries = await cacheManager.loadCountriesFromCache();

            // Ha nincs cache vagy elavult, akkor felfedezz√ºk az orsz√°gokat
            if (! countries) {
                console.log('üîç Orsz√°gok felfedez√©se √©s cache-el√©se...');
                countries = await discovery.discoverAvailableCountries();
                await cacheManager.saveCountriesToCache(countries);
            }

            if (countries.length === 0) {
                console.log('‚ùå Nem tal√°lhat√≥k el√©rhet≈ë orsz√°gok.');
                await browser.close();
                return;
            }

            // Csoportos√≠t√°s r√©gi√≥k szerint
            const countryGroups = {};
            countries.forEach(country => {
                const region = country.region || 'Egy√©b';
                if (! countryGroups[region]) {
                    countryGroups[region] = [];
                }
                countryGroups[region].push(country);
            });

            // Orsz√°gok megjelen√≠t√©se inform√°ci√≥kkal
            console.log(`\n‚úÖ ${
                countries.length
            } orsz√°g felfedezve:\n`);
            Object.entries(countryGroups).forEach(([region, regionCountries]) => {
                console.log(`üìç ${region}:`);
                regionCountries.forEach(country => {
                    const existing = existingData[country.name];
                    let status = '';

                    if (existing && existing.leagues.length > 0) {
                        const daysSinceUpdate = existing.lastUpdated ? Math.floor((new Date() - existing.lastUpdated) / (1000 * 60 * 60 * 24)) : null;

                        status = ` üìÅ ${
                            existing.leagues.length
                        } liga, ${
                            existing.totalMatches
                        } meccs`;
                        if (daysSinceUpdate !== null) {
                            if (daysSinceUpdate === 0) {
                                status += ` üü¢ ma friss√≠tve`;
                            } else if (daysSinceUpdate <= 7) {
                                status += ` üü° ${daysSinceUpdate} napja friss√≠tve`;
                            } else {
                                status += ` üî¥ ${daysSinceUpdate} napja friss√≠tve`;
                            }
                        }
                    } else {
                        status = ' üÜï √∫j';
                    }

                    console.log(`   ${
                        country.flag
                    } ${
                        country.displayName
                    }${status}`);
                });
                console.log('');
            });

            // Sz≈±r√©si opci√≥k
            logger.info('Prompting for filter option...');
            const {filterOption} = await inquirer.prompt([{
                    type: 'list',
                    name: 'filterOption',
                    message: 'Hogyan szeretn√©d sz≈±rni az orsz√°gokat?',
                    choices: [
                        {
                            name: 'üåü √ñsszes orsz√°g megjelen√≠t√©se',
                            value: 'all'
                        }, {
                            name: 'üÜï Csak √∫j orsz√°gok (m√©g nincs adat)',
                            value: 'new'
                        }, {
                            name: 'üîÑ R√©gen friss√≠tett orsz√°gok (7+ nap)',
                            value: 'old'
                        }, {
                            name: 'üìç R√©gi√≥ szerint sz≈±r√©s',
                            value: 'region'
                        }
                    ]
                }]);
            logger.info(`Filter option selected: ${filterOption}`);

            let filteredCountries = countries;

            if (filterOption === 'new') {
                filteredCountries = countries.filter(country => ! existingData[country.name] || existingData[country.name].leagues.length === 0);
                console.log(`\nüÜï ${
                    filteredCountries.length
                } √∫j orsz√°g tal√°lhat√≥.\n`);
            } else if (filterOption === 'old') {
                filteredCountries = countries.filter(country => {
                        const existing = existingData[country.name];
                        if (! existing || ! existing.lastUpdated) 
                            return false;
                            const daysSinceUpdate = Math.floor((new Date() - existing.lastUpdated) / (1000 * 60 * 60 * 24));
                            return daysSinceUpdate >= 7;
                        }
                    );
                    console.log(`\nüîÑ ${
                        filteredCountries.length
                    } r√©gen friss√≠tett orsz√°g tal√°lhat√≥.\n`);
                } else if (filterOption === 'region') {
                    logger.info('Prompting for selected region...');
                const {selectedRegion} = await inquirer.prompt([{
                            type: 'list',
                            name: 'selectedRegion',
                            message: 'V√°laszd ki a r√©gi√≥t:',
                            choices: Object.keys(countryGroups).map(region => ({name: `üìç ${region} (${
                                    countryGroups[region].length
                                } orsz√°g)`, value: region}))
                        }]);
                logger.info(`Selected region: ${selectedRegion}`);
                    filteredCountries = countryGroups[selectedRegion];
                    console.log(`\nüìç ${
                        filteredCountries.length
                    } orsz√°g a ${selectedRegion} r√©gi√≥ban.\n`);
                }

                if (filteredCountries.length === 0) {
                    console.log('‚ùå Nincs orsz√°g a kiv√°lasztott sz≈±r√©s alapj√°n.');
                    await browser.close();
                    return;
                }

                // Orsz√°gok kiv√°laszt√°sa intelligens inform√°ci√≥kkal
                const countryChoices = filteredCountries.map(country => {
                    const existing = existingData[country.name];
                    let name = `${
                        country.flag
                    } ${
                        country.displayName
                    }`;

                    if (existing && existing.leagues.length > 0) {
                        const daysSinceUpdate = existing.lastUpdated ? Math.floor((new Date() - existing.lastUpdated) / (1000 * 60 * 60 * 24)) : null;

                        name += ` (${
                            existing.leagues.length
                        } liga, ${
                            existing.totalMatches
                        } meccs`;
                        if (daysSinceUpdate !== null) {
                            if (daysSinceUpdate === 0) {
                                name += `, ma friss√≠tve)`;
                            } else {
                                name += `, ${daysSinceUpdate} napja friss√≠tve)`;
                            }
                        } else {
                            name += ')';
                        }
                    } else {
                        name += ' üÜï';
                    }

                    return {name: name, value: country, short: country.displayName};
                });

                logger.info('Prompting for selected countries...');
                const {selectedCountries} = await inquirer.prompt([{
                        type: 'checkbox',
                        name: 'selectedCountries',
                        message: 'V√°laszd ki a k√≠v√°nt orsz√°gokat:',
                        choices: countryChoices,
                        pageSize: 15,
                        validate: (answer) => {
                            if (answer.length < 1) {
                                return 'Legal√°bb egy orsz√°got ki kell v√°lasztanod!';
                            }
                            return true;
                        }
                    }]);
                logger.info(`Selected ${selectedCountries.length} countries.`);

                console.log(`\n‚úÖ ${
                    selectedCountries.length
                } orsz√°g kiv√°lasztva.\n`);

                // Lig√°k felfedez√©se √©s kiv√°laszt√°sa
                const finalSelection = [];

                for (const country of selectedCountries) {
                    console.log(`üèÜ ${
                        country.displayName
                    } lig√°inak felfedez√©se...`);

                    logger.info(`Attempting to load leagues from cache for ${country.displayName}...`);
                    let leagues = await cacheManager.loadLeaguesFromCache(country.name);

                    // Ha nincs cache vagy elavult, akkor felfedezz√ºk a lig√°kat
                    if (! leagues) {
                        logger.info(`Cache miss or outdated for ${country.displayName}. Discovering leagues...`);
                        leagues = await discovery.discoverCountryLeagues(country.name);

                        // Csak akkor mentj√ºk a cache-be, ha tal√°ltunk lig√°kat
                        if (leagues && leagues.length > 0) {
                            await cacheManager.saveLeaguesToCache(country.name, leagues);
                            logger.info(`Leagues discovered and saved to cache for ${country.displayName}.`);
                        }
                    } else {
                        logger.info(`Leagues loaded from cache for ${country.displayName}.`);
                    }

                    if (leagues.length === 0) {
                        console.log(`‚ùå Nem tal√°lhat√≥k lig√°k ${
                            country.displayName
                        } orsz√°gban.\n`);
                        continue;
                    }

                    // Lig√°k inform√°ci√≥kkal val√≥ kieg√©sz√≠t√©se
                    const existingCountryData = existingData[country.name];
                    const leaguesWithInfo = leagues.map(league => {
                        const existingLeague = existingCountryData ?. leagues.find(l => l.name === league.name || l.name.includes(league.name) || league.name.includes(l.name));

                        return {
                            ...league,
                            existing: existingLeague || null
                        };
                    });

                    // Sz≈±r√©si opci√≥k lig√°khoz
                    const newLeagues = leaguesWithInfo.filter(l => !l.existing);
                    const oldLeagues = leaguesWithInfo.filter(l => l.existing);

                    let leagueChoices = [{
                            name: `üåü √ñSSZES LIGA (${
                                leagues.length
                            } db)`,
                            value: 'ALL',
                            short: '√ñsszes liga'
                        }];

                    if (newLeagues.length > 0) {
                        leagueChoices.push({name: `üÜï √öJ LIG√ÅK (${
                                newLeagues.length
                            } db)`, value: 'NEW', short: '√öj lig√°k'});
                    }

                    if (oldLeagues.length > 0) {
                        leagueChoices.push({name: `üîÑ MEGL√âV≈ê LIG√ÅK (${
                                oldLeagues.length
                            } db)`, value: 'EXISTING', short: 'Megl√©v≈ë lig√°k'});
                    }

                    leagueChoices.push(new inquirer.Separator('--- Egyedi lig√°k ---'));

                    leagueChoices.push(... leaguesWithInfo.map(league => {
                        let name = `‚öΩ ${
                            league.displayName
                        }`;
                        if (league.existing) {
                            const daysSinceUpdate = league.existing.lastUpdated ? Math.floor((new Date() - league.existing.lastUpdated) / (1000 * 60 * 60 * 24)) : null;

                            name += ` (${
                                league.existing.matches
                            } meccs`;
                            if (daysSinceUpdate !== null) {
                                if (daysSinceUpdate === 0) {
                                    name += `, ma friss√≠tve)`;
                                } else {
                                    name += `, ${daysSinceUpdate} napja friss√≠tve)`;
                                }
                            } else {
                                name += ')';
                            }
                        } else {
                            name += ' üÜï';
                        }

                        return {name: name, value: league, short: league.displayName};
                    }));

                    logger.info(`Prompting for leagues in ${country.displayName}...`);
                    const {selectedLeagues} = await inquirer.prompt([{
                            type: 'checkbox',
                            name: 'selectedLeagues',
                            message: `V√°laszd ki a lig√°kat ${
                                country.displayName
                            } orsz√°gb√≥l:`,
                            choices: leagueChoices,
                            pageSize: 20
                        }]);

                    // Kiv√°laszt√°s feldolgoz√°sa
                    let leaguesToAdd = [];

                    if (selectedLeagues.includes('ALL')) {
                        leaguesToAdd = leagues;
                    } else if (selectedLeagues.includes('NEW')) {
                        leaguesToAdd = newLeagues;
                    } else if (selectedLeagues.includes('EXISTING')) {
                        leaguesToAdd = oldLeagues;
                    } else {
                        leaguesToAdd = selectedLeagues.filter(l => typeof l === 'object');
                    }

                    if (leaguesToAdd.length > 0) {
                        // Szezon kiv√°laszt√°s
                        const {getAvailableSeasons} = await import ('./scraper/matchScraper.js');
                        const seasonsForLeague = {};

                        for (const league of leaguesToAdd) {
                            console.log(`
‚è≥ Szezonok lek√©r√©se ${country.displayName} - ${league.displayName} lig√°hoz...`);
                            const availableSeasons = await getAvailableSeasons(browser, country.name, league.name);

                            if (availableSeasons.length === 0) {
                                console.log(`‚ùå Nincs el√©rhet≈ë szezon ${league.displayName} lig√°hoz.`);
                                continue;
                            }

                            const seasonChoices = availableSeasons.map(s => ({name: s, value: s}));
                            const {selectedSeason} = await inquirer.prompt([{
                                    type: 'list',
                                    name: 'selectedSeason',
                                    message: `V√°laszd ki a szezont ${league.displayName} lig√°hoz:`, 
                                    choices: seasonChoices,
                                    default: seasonChoices[0].value
                                }]);
                            seasonsForLeague[league.name] = selectedSeason;
                        }

                        finalSelection.push({country: country, leagues: leaguesToAdd, seasons: seasonsForLeague, mode: 'selected'});
                        console.log(`‚úÖ ${
                            country.displayName
                        }: ${
                            leaguesToAdd.length
                        } liga kiv√°lasztva\n`);
                    } else {
                        console.log(`‚ö†Ô∏è ${
                            country.displayName
                        }: Nincs liga kiv√°lasztva\n`);
                    }
                }

                await browser.close();

                if (finalSelection.length === 0) {
                    console.log('‚ùå Nincs kiv√°lasztott liga. Kil√©p√©s.');
                    return;
                }

                // V√©gs≈ë √∂sszefoglal√≥
                console.log('üìã V√âGS≈ê KIV√ÅLASZT√ÅS:');
                console.log('=====================');
                let totalLeagues = 0;
                let newLeaguesCount = 0;

                finalSelection.forEach(selection => {
                        console.log(`${
                            selection.country.flag
                        } ${
                            selection.country.displayName
                        }:`);
                        selection.leagues.forEach(league => {
                                const isNew = !league.existing;
                                const icon = isNew ? 'üÜï' : 'üîÑ';
                                const season = selection.seasons[league.name];
                                console.log(`   ${icon} ${
                                    league.displayName
                                } (Szezon: ${season})`);
                                if (isNew) 
                                    newLeaguesCount++;
                                }
                            );
                            totalLeagues += selection.leagues.length;
                        }
                    );

                    console.log(`\nüìä √ñsszesen: ${
                        finalSelection.length
                    } orsz√°g, ${totalLeagues} liga`);
                    console.log(`üÜï √öj lig√°k: ${newLeaguesCount}`);
                    console.log(`üîÑ Friss√≠tend≈ë lig√°k: ${
                        totalLeagues - newLeaguesCount
                    }\n`);

                    // Meger≈ës√≠t√©s √©s ind√≠t√°s
                        logger.info('Prompting to start scraping...');
                        const {shouldStart} = await inquirer.prompt([{
                            type: 'confirm',
                            name: 'shouldStart',
                            message: 'Elind√≠tsuk a scraping-et ezekkel a be√°ll√≠t√°sokkal?',
                            default: true
                        }]);

                    if(shouldStart) {
                        await this.startCustomScraping(finalSelection);
                    } else {
                        console.log('‚ùå Scraping megszak√≠tva.');
                    }

                } catch (error) {
                    console.error('‚ùå Hiba az interakt√≠v kiv√°laszt√°s sor√°n:', error.message);
                }
            }

            /**
   * Egyedi scraping ind√≠t√°sa a kiv√°lasztott orsz√°gokkal/lig√°kkal
   */
            async startCustomScraping(selection) {
                console.log('üöÄ Egyedi scraping ind√≠t√°sa...\n');

                try { // Create a custom scraper configuration
                    const customConfig = {
                        TARGET_LEAGUES: []
                    };

                    // Convert selection to config format
                    selection.forEach(item => {
                        const leagueNames = item.leagues.map(league => league.name);
                        const seasons = item.seasons;
                        customConfig.TARGET_LEAGUES.push({country: item.country.name, leagues: leagueNames, seasons: seasons});
                    });

                    // Create a custom scraper with the new configuration
                    const customScraper = new AutomatedScraper();

                    // Override the config temporarily
                    const originalConfig = {
                        ...CONFIG
                    };
                    Object.assign(CONFIG, {
                        ...CONFIG,
                        ... customConfig
                    });

                    // Start scraping
                    await customScraper.start();

                    // Restore original config
                    Object.assign(CONFIG, originalConfig);

                    console.log('\n‚úÖ Egyedi scraping befejezve!');

                } catch (error) {
                    console.error('‚ùå Hiba az egyedi scraping sor√°n:', error.message);
                }
            }

            /**
   * Liga felfedez√©s ind√≠t√°sa
   */
            async startDiscovery() {
                console.log('üîç Liga felfedez√©s ind√≠t√°sa...\n');

                try { // Import the new CountryDiscovery class
                    const {CountryDiscovery} = await import ('./scraper/countryDiscovery.js');
                    const {createBrowser} = await import ('./scraper/browser.js');

                    const browser = await createBrowser();
                    const discovery = new CountryDiscovery(browser);

                    // Discover available countries
                    const countries = await discovery.discoverAvailableCountries();

                    console.log(`\n‚úÖ ${
                        countries.length
                    } orsz√°g felfedezve:`);
                    countries.forEach(country => {
                        console.log(`  üè¥ ${
                            country.displayName
                        } (${
                            country.name
                        })`);
                    });

                    // Optionally discover leagues for the first few countries
                    if (countries.length > 0) {
                        console.log('\nüèÜ Liga felfedez√©s az els≈ë orsz√°gban...');
                        const firstCountry = countries[0];
                        const leagues = await discovery.discoverCountryLeagues(firstCountry.name);

                        if (leagues.length > 0) {
                            console.log(`\n‚úÖ ${
                                leagues.length
                            } liga tal√°lva ${
                                firstCountry.displayName
                            } orsz√°gban:`);
                            leagues.forEach(league => {
                                console.log(`  ‚öΩ ${
                                    league.displayName
                                } (${
                                    league.name
                                })`);
                            });
                        }
                    }

                    await browser.close();
                } catch (error) {
                    console.error('‚ùå Hiba a felfedez√©s sor√°n:', error.message);
                }
            }

            /**
   * √Åtfog√≥ scraping ind√≠t√°sa
   */
            async startComprehensive() {
                console.log('üåü √ÅTFOG√ì SCRAPING ind√≠t√°sa - Minden el√©rhet≈ë adat...\n');
                console.log('‚ö†Ô∏è  FIGYELEM: Ez t√∂bb √≥r√°t is ig√©nybe vehet!');
                console.log('‚ö†Ô∏è  A folyamat lassan halad az IP v√©delem miatt.\n');

                const comprehensiveScraper = new ComprehensiveScraper();
                await comprehensiveScraper.startComprehensiveScraping();
            }

            /**
   * ML datasetek gener√°l√°sa
   */
            async generateMLDatasets() {
                console.log('ü§ñ ML datasetek gener√°l√°sa...\n');

                try {
                    const {MLDataProcessor} = await import ('./utils/mlDataProcessor.js');
                    await MLDataProcessor.generateAllMLDatasets();
                    console.log('\n‚úÖ ML datasetek sikeresen gener√°lva!');
                    console.log('üìÅ Keres√©s: scraped_data/*/*/*_ml_dataset.csv');
                } catch (error) {
                    console.error('‚ùå Hiba az ML datasetek gener√°l√°sa sor√°n:', error.message);
                }
            }

            /**
   * Cache friss√≠t√©se
   */
            async refreshCache() {
        console.log('üîÑ Cache friss√≠t√©se...');

        try {
            const { createBrowser } = await import('./scraper/browser.js');
            const browser = await createBrowser();

            await cacheManager.refreshCache(browser);

            await browser.close();
            console.log('‚úÖ Cache friss√≠t√©se befejezve!');
        } catch (error) {
            console.error('‚ùå Hiba a cache friss√≠t√©sekor:', error.message);
        }
    }

            async showCacheStatus() {
        console.log('üìã CACHE √ÅLLAPOT');
        console.log('===============');

        try {
            const status = await cacheManager.checkCacheStatus();

            if (status.hasCountriesCache) {
                console.log(`üåç Orsz√°gok cache: ‚úÖ (${status.countriesCacheAge} napos)`);
            } else {
                console.log('üåç Orsz√°gok cache: ‚ùå (nem tal√°lhat√≥)');
            }

            console.log(`üèÜ Lig√°k cache: ${status.leaguesCacheCount} orsz√°g`);

            if (status.leaguesCacheCount > 0) {
                console.log(`   - Legr√©gebbi: ${status.oldestLeagueCache} napos`);
                console.log(`   - Leg√∫jabb: ${status.newestLeagueCache} napos`);
            }

            // Cache √©rv√©nyess√©g ellen≈ërz√©se
            const cacheValidDays = 7; // Ugyanaz, mint a CacheManager oszt√°lyban

            if (status.hasCountriesCache && status.countriesCacheAge > cacheValidDays) {
                console.log('\n‚ö†Ô∏è  Az orsz√°gok cache elavult, friss√≠t√©s javasolt!');
            }

            if (status.leaguesCacheCount > 0 && status.oldestLeagueCache > cacheValidDays) {
                console.log('‚ö†Ô∏è  N√©h√°ny liga cache elavult, friss√≠t√©s javasolt!');
            }

            console.log('\nCache friss√≠t√©se:');
            console.log('  npm run refresh-cache');

        } catch (error) {
            console.error('‚ùå Hiba a cache √°llapot ellen≈ërz√©sekor:', error.message);
        }
    }

  /**
   * S√∫g√≥ megjelen√≠t√©se
   */
            showHelp() {
                console.log('üéØ BettingMentor Automatiz√°lt Flashscore Scraper');
                console.log('================================================\n');

                console.log('HASZN√ÅLAT:');
                console.log('  node src/cli.js <parancs>\n');

                console.log('PARANCSOK:');
                console.log('  start         üöÄ Scraping ind√≠t√°sa (konfigur√°lt lig√°k)');
                console.log('  select        üéØ Interakt√≠v orsz√°g/liga kiv√°laszt√°s');
                console.log('  comprehensive üåü MINDEN el√©rhet≈ë adat let√∂lt√©se');
                console.log('  discover      üîç El√©rhet≈ë orsz√°gok/lig√°k felfedez√©se');
                console.log('  ml-dataset    ü§ñ ML datasetek gener√°l√°sa (JSON‚ÜíCSV)');
                console.log('  refresh-cache üîÑ Orsz√°gok √©s lig√°k cache friss√≠t√©se');
                console.log('  cache-status  üìã Cache √°llapot megjelen√≠t√©se');
                console.log('  status        üìä Aktu√°lis st√°tusz');
                console.log('  config        ‚öôÔ∏è  Konfigur√°ci√≥ megjelen√≠t√©se');
                console.log('  stats         üìà Adatgy≈±jt√©si statisztik√°k');
                console.log('  clean         üßπ √ñsszes adat t√∂rl√©se');
                console.log('  help          ‚ùì Ez a s√∫g√≥\n');

                console.log('P√âLD√ÅK:');
                console.log('  node src/cli.js start');
                console.log('  node src/cli.js select');
                console.log('  node src/cli.js refresh-cache\n');
            }

  /**
   * Adatstatisztik√°k sz√°m√≠t√°sa
   */
  async calculateDataStats() {
    const stats = {
      countries: 0,
      leagues: 0,
      totalMatches: 0,
      files: 0,
      totalSize: 0,
      byCountry: {}
    };

    if (!await fs.pathExists(CONFIG.OUTPUT_BASE_PATH)) {
      return stats;
    }

    const countries = await fs.readdir(CONFIG.OUTPUT_BASE_PATH);
    stats.countries = countries.length;

    for (const country of countries) {
      const countryPath = path.join(CONFIG.OUTPUT_BASE_PATH, country);
      const countryStats = await fs.stat(countryPath);

      if (countryStats.isDirectory()) {
        stats.byCountry[country] = { leagues: 0, matches: 0 };

        const leagues = await fs.readdir(countryPath);
        stats.leagues += leagues.length;
        stats.byCountry[country].leagues = leagues.length;

        for (const league of leagues) {
          const leaguePath = path.join(countryPath, league);
          const leagueStats = await fs.stat(leaguePath);

          if (leagueStats.isDirectory()) {
            const seasons = await fs.readdir(leaguePath);

            for (const season of seasons) {
              const seasonPath = path.join(leaguePath, season);
              const files = await fs.readdir(seasonPath);

              for (const file of files) {
                if (file.endsWith('.json')) {
                  const filePath = path.join(seasonPath, file);
                  const fileStats = await fs.stat(filePath);

                  stats.files++;
                  stats.totalSize += fileStats.size;

                  try {
                    const data = await fs.readJson(filePath);
                    const matchCount = Object.keys(data).length;
                    stats.totalMatches += matchCount;
                    stats.byCountry[country].matches += matchCount;
                  } catch (error) {
                    logger.error(`Hiba a JSON f√°jl olvas√°sakor: ${filePath}`, error);
                  }
                }
              }
            }
          }
        }
      }
    }
    return stats;
  }

  /**
   * B√°jtok olvashat√≥ form√°tumba form√°z√°sa
   */
  formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }
}

// CLI ind√≠t√°s
const cli = new CLI();
cli.processCommand(process.argv).catch(error => {
  logger.error('CLI hiba:', error);
  process.exit(1);
});
