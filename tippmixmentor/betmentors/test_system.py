#!/usr/bin/env python3
"""
BettingMentor AI System gyors teszt
"""

import sys
import logging
from pathlib import Path

# Logging be√°ll√≠t√°sa
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_imports():
    """Importok tesztel√©se"""
    print("üß™ IMPORTOK TESZTEL√âSE:")
    
    try:
        import pandas as pd
        print(f"‚úÖ pandas {pd.__version__}")
    except ImportError as e:
        print(f"‚ùå pandas: {e}")
        return False
        
    try:
        import numpy as np
        print(f"‚úÖ numpy {np.__version__}")
    except ImportError as e:
        print(f"‚ùå numpy: {e}")
        return False
        
    try:
        import sklearn
        print(f"‚úÖ scikit-learn {sklearn.__version__}")
    except ImportError as e:
        print(f"‚ùå scikit-learn: {e}")
        return False
        
    try:
        import joblib
        print(f"‚úÖ joblib {joblib.__version__}")
    except ImportError as e:
        print(f"‚ùå joblib: {e}")
        return False
        
    return True

def test_data_loader():
    """Data loader tesztel√©se"""
    print("\nüìä DATA LOADER TESZT:")
    
    try:
        from data.sources.flashscore_loader import FlashscoreDataLoader
        
        loader = FlashscoreDataLoader()
        leagues = loader.get_available_leagues()
        
        print(f"‚úÖ FlashscoreDataLoader m≈±k√∂dik")
        print(f"   El√©rhet≈ë lig√°k: {len(leagues)}")
        
        if leagues:
            print("   P√©lda lig√°k:")
            for league in leagues[:3]:
                print(f"     {league['country']}/{league['league']}")
                
        return True
        
    except Exception as e:
        print(f"‚ùå FlashscoreDataLoader hiba: {e}")
        return False

def test_data_processor():
    """Data processor tesztel√©se"""
    print("\nüîÑ DATA PROCESSOR TESZT:")
    
    try:
        from data.data_processor import DataProcessor
        
        processor = DataProcessor()
        summary = processor.get_data_summary()
        
        print(f"‚úÖ DataProcessor m≈±k√∂dik")
        print(f"   √ñsszes meccs: {summary.get('total_matches', 0)}")
        print(f"   Orsz√°gok: {summary.get('countries', 0)}")
        print(f"   Lig√°k: {summary.get('leagues', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå DataProcessor hiba: {e}")
        return False

def test_file_structure():
    """F√°jlstrukt√∫ra tesztel√©se"""
    print("\nüìÅ F√ÅJLSTRUKT√öRA TESZT:")
    
    required_dirs = [
        "data/sources",
        "data/processed", 
        "training/models",
        "mentor_bots/match_predictor"
    ]
    
    all_exist = True
    for directory in required_dirs:
        if Path(directory).exists():
            print(f"‚úÖ {directory}")
        else:
            print(f"‚ùå {directory} hi√°nyzik")
            all_exist = False
            
    return all_exist

def test_main_system():
    """F≈ë rendszer tesztel√©se"""
    print("\nü§ñ F≈ê RENDSZER TESZT:")
    
    try:
        from main import BettingMentorAI
        
        ai_system = BettingMentorAI()
        print("‚úÖ BettingMentorAI inicializ√°lva")
        
        # Gyors adatfeldolgoz√°s teszt
        summary = ai_system.data_processor.get_data_summary()
        if summary.get('total_matches', 0) > 0:
            print(f"‚úÖ Adatok el√©rhet≈ëk: {summary['total_matches']} meccs")
        else:
            print("‚ö†Ô∏è  Nincs adat - futtasd el≈ëbb a scraper-t")
            
        return True
        
    except Exception as e:
        print(f"‚ùå BettingMentorAI hiba: {e}")
        return False

def main():
    """F≈ë teszt f√ºggv√©ny"""
    
    print("üéØ BETTINGMENTOR AI SYSTEM TESZT")
    print("=" * 50)
    
    tests = [
        ("Importok", test_imports),
        ("F√°jlstrukt√∫ra", test_file_structure), 
        ("Data Loader", test_data_loader),
        ("Data Processor", test_data_processor),
        ("F≈ë Rendszer", test_main_system)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ö†Ô∏è  {test_name} teszt r√©szben sikertelen")
        except Exception as e:
            print(f"‚ùå {test_name} teszt hiba: {e}")
            
    print("\n" + "=" * 50)
    print(f"üìä TESZT EREDM√âNYEK: {passed}/{total} sikeres")
    
    if passed == total:
        print("üéâ Minden teszt sikeres! A rendszer haszn√°latra k√©sz.")
        return True
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è  A legt√∂bb teszt sikeres, de vannak probl√©m√°k.")
        return True
    else:
        print("‚ùå T√∫l sok teszt sikertelen. Ellen≈ërizd a setup-ot!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)