#!/usr/bin/env python3
"""
BettingMentor AI System - F≈ë orchestrator
"""

import argparse
import logging
import sys
from pathlib import Path
from datetime import datetime

# Saj√°t modulok
from data.data_processor import DataProcessor
from training.match_predictor_trainer import MatchPredictorTrainer
from mentor_bots.match_predictor.predictor import MatchPredictor
from mentor_bots.advanced_analyzer.value_bet_finder import ValueBetFinder

# Logging be√°ll√≠t√°sa
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('betmentors.log')
    ]
)

logger = logging.getLogger(__name__)

class BettingMentorAI:
    """F≈ë BettingMentor AI rendszer"""
    
    def __init__(self):
        self.data_processor = DataProcessor()
        self.trainer = MatchPredictorTrainer()
        self.predictor = MatchPredictor()
        self.value_bet_finder = ValueBetFinder()
        
    def process_data(self):
        """Adatok feldolgoz√°sa"""
        logger.info("üîÑ Adatok feldolgoz√°sa...")
        
        try:
            # Adatok √∂sszefoglal√≥ja
            summary = self.data_processor.get_data_summary()
            
            print("üìä ADATOK √ñSSZEFOGLAL√ìJA:")
            print(f"√ñsszes meccs: {summary.get('total_matches', 0)}")
            print(f"Orsz√°gok: {summary.get('countries', 0)}")
            print(f"Lig√°k: {summary.get('leagues', 0)}")
            print(f"Csapatok: {summary.get('teams', 0)}")
            
            if summary.get('result_distribution'):
                print("Eredm√©ny eloszl√°s:")
                for result, count in summary['result_distribution'].items():
                    print(f"  {result}: {count}")
                    
            # ML dataset l√©trehoz√°sa
            ml_df = self.data_processor.create_ml_dataset()
            
            if not ml_df.empty:
                print(f"\nü§ñ ML Dataset: {len(ml_df)} meccs, {len(ml_df.columns)} feature")
                return True
            else:
                print("‚ùå Nem siker√ºlt ML datasetet l√©trehozni")
                return False
                
        except Exception as e:
            logger.error(f"Hiba az adatfeldolgoz√°s sor√°n: {e}")
            return False
            
    def train_models(self):
        """Modellek tr√©ningel√©se"""
        logger.info("ü§ñ Modellek tr√©ningel√©se...")
        
        try:
            results = self.trainer.train_models()
            
            # Jelent√©s
            report = self.trainer.create_training_report()
            print(report)
            
            return True
            
        except Exception as e:
            logger.error(f"Hiba a tr√©ning sor√°n: {e}")
            return False
            
    def make_predictions(self, test_data=None):
        """Predikci√≥k k√©sz√≠t√©se"""
        logger.info("üîÆ Predikci√≥k k√©sz√≠t√©se...")
        
        try:
            # Modell bet√∂lt√©se
            if not self.predictor.load_best_model():
                print("‚ùå Nem siker√ºlt modellt bet√∂lteni")
                return False
                
            # Modell info
            info = self.predictor.get_model_info()
            print("ü§ñ HASZN√ÅLT MODELL:")
            print(f"  T√≠pus: {info.get('model_type', 'N/A')}")
            print(f"  Accuracy: {info.get('accuracy', 0):.3f}")
            print(f"  Features: {info.get('feature_count', 0)}")
            print()
            
            # Teszt predikci√≥k (ha nincs val√≥s adat)
            if test_data is None:
                test_data = [
                    {
                        'ball_possession_home': 58,
                        'ball_possession_away': 42,
                        'shots_home': 15,
                        'shots_away': 7,
                        'is_weekend': 1,
                        'is_top_league': 1
                    },
                    {
                        'ball_possession_home': 45,
                        'ball_possession_away': 55,
                        'shots_home': 8,
                        'shots_away': 12,
                        'is_weekend': 0,
                        'is_top_league': 0
                    }
                ]
                
                match_info = [
                    {'home_team': 'Arsenal', 'away_team': 'Chelsea'},
                    {'home_team': 'Barcelona', 'away_team': 'Real Madrid'}
                ]
            else:
                match_info = None
                
            # Predikci√≥k
            predictions = self.predictor.predict_matches_batch(test_data)
            
            # Jelent√©s
            report = self.predictor.create_prediction_report(predictions, match_info)
            print(report)
            
            return True
            
        except Exception as e:
            logger.error(f"Hiba a predikci√≥ sor√°n: {e}")
            return False
            
    def find_value_bets(self):
        """√ârt√©kes fogad√°sok keres√©se"""
        logger.info("üí∞ √ârt√©kes fogad√°sok keres√©se...")
        
        try:
            # Adatok bet√∂lt√©se
            df = self.data_processor.load_all_sources()
            
            if df.empty:
                print("‚ùå Nincs adat az √©rt√©kes fogad√°sok keres√©s√©hez")
                return False
                
            # Csak olyan meccsek, ahol vannak odds adatok
            odds_columns = ['odds_home', 'odds_draw', 'odds_away']
            df_with_odds = df.dropna(subset=odds_columns, how='all')
            
            if df_with_odds.empty:
                print("‚ùå Nincs odds adat az √©rt√©kes fogad√°sok keres√©s√©hez")
                return False
                
            print(f"üìä Elemz√©s: {len(df_with_odds)} meccs odds adatokkal")
            
            # √ârt√©kes fogad√°sok keres√©se
            value_bets = self.value_bet_finder.find_value_bets(df_with_odds)
            
            if not value_bets:
                print("üìà Nem tal√°lhat√≥k √©rt√©kes fogad√°sok a jelenlegi krit√©riumokkal")
                return True
                
            # Jelent√©s
            report = self.value_bet_finder.create_value_bets_report(value_bets)
            print(report)
            
            return True
            
        except Exception as e:
            logger.error(f"Hiba az √©rt√©kes fogad√°sok keres√©se sor√°n: {e}")
            return False
            
    def full_pipeline(self):
        """Teljes pipeline futtat√°sa"""
        logger.info("üöÄ Teljes BettingMentor AI pipeline ind√≠t√°sa...")
        
        print("üéØ BETTINGMENTOR AI SYSTEM")
        print("=" * 50)
        print()
        
        # 1. Adatok feldolgoz√°sa
        if not self.process_data():
            print("‚ùå Adatfeldolgoz√°s sikertelen")
            return False
            
        print("\n" + "="*50 + "\n")
        
        # 2. Modellek tr√©ningel√©se
        if not self.train_models():
            print("‚ùå Modell tr√©ning sikertelen")
            return False
            
        print("\n" + "="*50 + "\n")
        
        # 3. Predikci√≥k
        if not self.make_predictions():
            print("‚ùå Predikci√≥k sikertelen√ºl")
            return False
            
        print("\nüéâ TELJES PIPELINE SIKERESEN BEFEJEZVE!")
        return True


def main():
    """F≈ë f√ºggv√©ny CLI argumentumokkal"""
    
    parser = argparse.ArgumentParser(description='BettingMentor AI System')
    parser.add_argument('command', choices=['data', 'train', 'predict', 'value-bets', 'full'], 
                       help='Futtatand√≥ parancs')
    parser.add_argument('--verbose', '-v', action='store_true', 
                       help='R√©szletes kimenet')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        
    # AI rendszer inicializ√°l√°sa
    ai_system = BettingMentorAI()
    
    # Parancs v√©grehajt√°sa
    if args.command == 'data':
        success = ai_system.process_data()
    elif args.command == 'train':
        success = ai_system.train_models()
    elif args.command == 'predict':
        success = ai_system.make_predictions()
    elif args.command == 'value-bets':
        success = ai_system.find_value_bets()
    elif args.command == 'full':
        success = ai_system.full_pipeline()
    else:
        print(f"Ismeretlen parancs: {args.command}")
        success = False
        
    # Kil√©p√©si k√≥d
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()