#!/usr/bin/env python3
"""
BettingMentor AI System setup script
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Parancs futtat√°sa le√≠r√°ssal"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} sikeres")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} sikertelen: {e}")
        print(f"Hiba: {e.stderr}")
        return False

def setup_environment():
    """K√∂rnyezet be√°ll√≠t√°sa"""
    
    print("üéØ BETTINGMENTOR AI SYSTEM SETUP")
    print("=" * 50)
    
    # Python verzi√≥ ellen≈ërz√©se
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print(f"‚ùå Python 3.8+ sz√ºks√©ges, jelenlegi: {python_version.major}.{python_version.minor}")
        return False
        
    print(f"‚úÖ Python verzi√≥: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # K√∂nyvt√°rak l√©trehoz√°sa
    directories = [
        "data/processed",
        "data/merged", 
        "data/features",
        "training/models",
        "training/experiments",
        "mentor_bots/match_predictor",
        "mentor_bots/value_finder",
        "mentor_bots/risk_analyzer",
        "logs"
    ]
    
    print("\nüìÅ K√∂nyvt√°rak l√©trehoz√°sa...")
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ {directory}")
    
    # Requirements telep√≠t√©se
    print("\nüì¶ Python csomagok telep√≠t√©se...")
    if not run_command("pip install -r requirements.txt", "F√ºgg≈ës√©gek telep√≠t√©se"):
        print("‚ö†Ô∏è  Pr√≥b√°ld: pip3 install -r requirements.txt")
        if not run_command("pip3 install -r requirements.txt", "F√ºgg≈ës√©gek telep√≠t√©se (pip3)"):
            return False
    
    # __init__.py f√°jlok l√©trehoz√°sa
    print("\nüêç Python csomagok inicializ√°l√°sa...")
    init_files = [
        "data/__init__.py",
        "training/__init__.py", 
        "mentor_bots/__init__.py",
        "mentor_bots/match_predictor/__init__.py",
        "mentor_bots/value_finder/__init__.py",
        "mentor_bots/risk_analyzer/__init__.py"
    ]
    
    for init_file in init_files:
        Path(init_file).touch()
        print(f"  ‚úÖ {init_file}")
    
    # Jogosults√°gok be√°ll√≠t√°sa
    print("\nüîê Jogosults√°gok be√°ll√≠t√°sa...")
    os.chmod("main.py", 0o755)
    os.chmod("setup.py", 0o755)
    
    print("\nüéâ SETUP SIKERESEN BEFEJEZVE!")
    print("\nüöÄ Haszn√°lat:")
    print("  python main.py data      # Adatok feldolgoz√°sa")
    print("  python main.py train     # Modellek tr√©ningel√©se") 
    print("  python main.py predict   # Predikci√≥k k√©sz√≠t√©se")
    print("  python main.py full      # Teljes pipeline")
    
    return True

def check_data_sources():
    """Adatforr√°sok ellen≈ërz√©se"""
    
    print("\nüîç ADATFORR√ÅSOK ELLEN≈êRZ√âSE:")
    
    # Flashscore scraper adatok
    flashscore_path = Path("../webscrapper/automated-flashscore-scraper/scraped_data")
    if flashscore_path.exists():
        countries = list(flashscore_path.iterdir())
        print(f"‚úÖ Flashscore adatok: {len(countries)} orsz√°g")
        
        total_matches = 0
        for country_dir in countries:
            if country_dir.is_dir():
                for league_dir in country_dir.iterdir():
                    if league_dir.is_dir():
                        for season_dir in league_dir.iterdir():
                            if season_dir.is_dir():
                                json_files = list(season_dir.glob("*.json"))
                                total_matches += len(json_files)
                                
        print(f"   Becs√ºlt meccsek: {total_matches} f√°jl")
    else:
        print("‚ö†Ô∏è  Flashscore adatok nem tal√°lhat√≥k")
        print("   Futtasd el≈ëbb a webscrapper-t!")
    
    # TODO: Egy√©b adatforr√°sok ellen≈ërz√©se
    
    return True

if __name__ == "__main__":
    if setup_environment():
        check_data_sources()
    else:
        print("\n‚ùå Setup sikertelen!")
        sys.exit(1)