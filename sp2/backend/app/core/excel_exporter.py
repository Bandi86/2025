#!/usr/bin/env python3
"""
Optimaliz√°lt Excel export modul - tiszta strukt√∫r√°val
"""

import sqlite3
import pandas as pd
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any
import logging

logger = logging.getLogger(__name__)

class ExcelExporter:
    """Excel export oszt√°ly"""

    def __init__(self, db_path: str = "data/optimized_sport_data.db"):
        self.db_path = Path(db_path)
        if not self.db_path.exists():
            raise FileNotFoundError(f"Adatb√°zis nem tal√°lhat√≥: {self.db_path}")

    def _fetch_match_data(self) -> pd.DataFrame:
        """Meccs adatok lek√©rdez√©se az adatb√°zisb√≥l"""
        query = '''
            SELECT
                match_id as "Meccs ID",
                teams as "Csapatok",
                time_info as "Id≈ëpont",
                day_info as "Nap",
                odds_1 as "1. Es√©ly",
                odds_2 as "X Es√©ly",
                odds_3 as "2. Es√©ly",
                match_type as "T√≠pus",
                source_pdf as "Forr√°s PDF",
                line_number as "Sor sz√°m",
                extracted_at as "Kinyerve"
            FROM matches
            ORDER BY source_pdf, line_number
        '''

        conn = sqlite3.connect(self.db_path)
        df = pd.read_sql_query(query, conn)
        conn.close()

        return df

    def _create_statistics_data(self, df: pd.DataFrame) -> pd.DataFrame:
        """Statisztikai adatok gener√°l√°sa"""
        stats_data = {
            'Statisztika': [
                '√ñsszes meccs',
                'Egyedi PDF forr√°sok',
                'P form√°tum meccsek',
                'K form√°tum meccsek',
                'Nap form√°tum meccsek',
                '√Åtlagos 1. es√©ly',
                '√Åtlagos X es√©ly',
                '√Åtlagos 2. es√©ly',
                'Legmagasabb 1. es√©ly',
                'Legalacsonyabb 1. es√©ly'
            ],
            '√ârt√©k': [
                len(df),
                df['Forr√°s PDF'].nunique(),
                len(df[df['T√≠pus'] == 'P_format']),
                len(df[df['T√≠pus'] == 'K_format']),
                len(df[df['T√≠pus'] == 'day_format']),
                f"{df['1. Es√©ly'].mean():.2f}" if not df.empty else "N/A",
                f"{df['X Es√©ly'].mean():.2f}" if not df.empty else "N/A",
                f"{df['2. Es√©ly'].mean():.2f}" if not df.empty else "N/A",
                f"{df['1. Es√©ly'].max():.2f}" if not df.empty else "N/A",
                f"{df['1. Es√©ly'].min():.2f}" if not df.empty else "N/A"
            ]
        }

        return pd.DataFrame(stats_data)

    def _create_summary_by_pdf(self, df: pd.DataFrame) -> pd.DataFrame:
        """PDF forr√°s szerinti √∂sszes√≠t≈ë"""
        if df.empty:
            return pd.DataFrame()

        summary = df.groupby('Forr√°s PDF').agg({
            'Meccs ID': 'count',
            '1. Es√©ly': ['mean', 'min', 'max'],
            'X Es√©ly': 'mean',
            '2. Es√©ly': 'mean',
            'T√≠pus': lambda x: x.value_counts().to_dict()
        }).round(2)

        # Oszlop nevek egyszer≈±s√≠t√©se
        summary.columns = [
            'Meccsek sz√°ma', '√Åtlag 1. es√©ly', 'Min 1. es√©ly', 'Max 1. es√©ly',
            '√Åtlag X es√©ly', '√Åtlag 2. es√©ly', 'Form√°tum eloszl√°s'
        ]

        return summary.reset_index()

    def _format_worksheet(self, worksheet, df: pd.DataFrame):
        """Munkaf√ºzet form√°z√°sa"""
        # Oszlop sz√©less√©gek be√°ll√≠t√°sa
        column_widths = {
            'A': 12,  # Meccs ID
            'B': 45,  # Csapatok
            'C': 12,  # Id≈ëpont
            'D': 8,   # Nap
            'E': 12,  # 1. Es√©ly
            'F': 12,  # X Es√©ly
            'G': 12,  # 2. Es√©ly
            'H': 15,  # T√≠pus
            'I': 35,  # Forr√°s PDF
            'J': 10,  # Sor sz√°m
            'K': 20   # Kinyerve
        }

        for col, width in column_widths.items():
            worksheet.column_dimensions[col].width = width

        # Header form√°z√°sa
        from openpyxl.styles import Font, PatternFill

        header_font = Font(bold=True)
        header_fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

        for cell in worksheet[1]:
            cell.font = header_font
            cell.fill = header_fill

    def export_to_excel(self, output_path: Optional[Path] = None) -> Path:
        """F≈ë export funkci√≥"""
        # Adatok lek√©rdez√©se
        df = self._fetch_match_data()

        if df.empty:
            raise ValueError("Nincsenek export√°lhat√≥ adatok az adatb√°zisban!")

        # Output f√°jl n√©v gener√°l√°sa
        if output_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = Path(f"data/szerencsmix_meccsek_{timestamp}.xlsx")

        output_path.parent.mkdir(exist_ok=True)

        logger.info(f"Excel export kezd√©se: {len(df)} meccs")

        # Excel f√°jl l√©trehoz√°sa
        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
            # F≈ë adatlap
            df.to_excel(writer, sheet_name='Meccsek', index=False)

            # Statisztik√°k lap
            stats_df = self._create_statistics_data(df)
            stats_df.to_excel(writer, sheet_name='Statisztik√°k', index=False)

            # PDF forr√°s szerinti √∂sszes√≠t≈ë
            summary_df = self._create_summary_by_pdf(df)
            if not summary_df.empty:
                summary_df.to_excel(writer, sheet_name='PDF √ñsszes√≠t≈ë', index=False)

            # Form√°z√°s alkalmaz√°sa
            self._format_worksheet(writer.sheets['Meccsek'], df)

        logger.info(f"Excel export k√©sz: {output_path}")
        return output_path

    def get_export_info(self) -> Dict[str, Any]:
        """Export inform√°ci√≥k lek√©rdez√©se"""
        df = self._fetch_match_data()

        return {
            'total_matches': len(df),
            'unique_pdfs': df['Forr√°s PDF'].nunique() if not df.empty else 0,
            'date_range': {
                'first': df['Kinyerve'].min() if not df.empty else None,
                'last': df['Kinyerve'].max() if not df.empty else None
            },
            'format_distribution': df['T√≠pus'].value_counts().to_dict() if not df.empty else {}
        }

def main():
    """F≈ë fut√°si logika"""
    print("üìä OPTIMALIZ√ÅLT EXCEL EXPORT")
    print("="*40)

    try:
        exporter = ExcelExporter()

        # Export inform√°ci√≥k
        info = exporter.get_export_info()
        print(f"üìã Export√°land√≥ meccsek: {info['total_matches']}")
        print(f"üìÑ PDF forr√°sok: {info['unique_pdfs']}")

        if info['total_matches'] == 0:
            print("‚ùå Nincsenek export√°lhat√≥ adatok!")
            return

        # Export v√©grehajt√°sa
        excel_file = exporter.export_to_excel()

        print(f"\n‚úÖ SIKERES EXPORT!")
        print(f"üìÑ F√°jl: {excel_file}")
        print(f"üìä {info['total_matches']} meccs export√°lva")

        # R√∂vid el≈ën√©zet
        print(f"\nüëÄ FORM√ÅTUM ELOSZL√ÅS:")
        for format_type, count in info['format_distribution'].items():
            print(f"   {format_type}: {count}")

    except Exception as e:
        logger.error(f"Export hiba: {e}")
        print(f"‚ùå Export hiba: {e}")

if __name__ == "__main__":
    main()
